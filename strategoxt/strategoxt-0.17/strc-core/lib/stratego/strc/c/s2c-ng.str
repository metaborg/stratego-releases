/**
 * This module contains the C backend for the Stratego compiler. It is used to
 * translate StrategoCore terms to equivalent C programs. Only translation is
 * performed; this module will not invoke the C compiler.
 * 
 */
module s2c-ng

imports 
  libstratego-lib
  Stratego-Core
  C 
  stratego/strc/c/C-simplify
  stratego/strc/c/frames

strategies

  compile = 
    stratego-to-c

  stratego-to-c = 
    init-term-caching
    ; TranslateSpec
    ; c-simplify

strategies

  /**
   * Command line options
   */

  s2c-options = 
    ArgOption("--C-include",       
	where(<post-extend-config>("--C-include", [<id>])),
	!"--C-include h   include header file h (\"file.h\" or <file.h>)")

  + Option("--library" + "--lib"
	  ,where(<set-config> ("--library", ()))
	  ,!"--library | --lib    build library instead of application")

strategies

  /**
   * Building a library
   */

  if-lib(s1, s2) = where(<get-config>"--library") < s1 + s2
  if-lib(s)      = if-lib(s, id)
  if-not-lib(s)  = if-lib(id, s)

rules

  TranslateSpec = 
    alltd(Translate)
    ; ComposeTargetProgram

  /**
   * Compose the complete C program consisting of function definitions
   * implementing the strategy definitions, auxiliary functions for
   * initialization, and includes for libraries.
   */

  ComposeTargetProgram =
    where(
        incl          := <GenerateIncludes>
      ; cnstr-decls   := <bagof-Fragment> "ConstructorDecl"
      ; cnstr-inits   := <bagof-Fragment; concat> "ConstructorInit"
      ; function-sigs := <bagof-Fragment> "FunctionSig"
      ; function-regs := <bagof-Fragment> "FunctionReg"
      ; function-defs := <bagof-Fragment> "FunctionDef"
      //; debug(!"function definitions: ")
      ; cnst-decls    := <bagof-Fragment> "ConstDecl"
      ; cnst-inits    := <bagof-Fragment; concat; reverse> "ConstInit" 
    );
    !|[
	// C includes specified on command-line or by default configuration
	~ext-def*:incl

	// ~ext-def*:[PpControl("#include \"static-links-include.h\"")]

        // legacy
	~ext-def*: <if-lib(![],
           ![fun-def|[ void init_constructors(void){} ]|]
	)>

	// initialize variables denoting constructor symbols
	~ext-def*:cnstr-decls
	static void init_module_constructors (void)
	{
	  ~stm*:cnstr-inits
	}

	// initialize cached constant terms
	~ext-def*:cnst-decls
	static void init_module_constant_terms (void)
	{
	  ~stm*:cnst-inits
	}

	// include functions for calling the initialization functions
	~ext-def*:
	  <if-lib(
	     ![PpControl("#include <srts/init-stratego-module.h>")],
	     ![PpControl("#include <srts/init-stratego-application.h>")]
	   )>
	   
	~ext-def*:<![<tracing-table-sig>, <tracing-table-counter-sig>]>
	
	// signatures of all generated functions
	~ext-def*:function-sigs

	// function definitions themselves
	~ext-def*:function-defs

        ~ext-def*:<if-lib(![], ![<register-strategies-function>function-regs])>

	~ext-def*:<if-lib(![], ![<MainDef>])>
    ]|

strategies

  tracing-table-sig  = !c:dec|[ extern const char *__tracing_table[]; ]|

  tracing-table-counter-sig  = !c:dec|[ extern unsigned short __tracing_table_counter; ]|

  register-strategies-function =
    where(l := <length; int-to-string; !IntConst(<id>)>)
    ; !c:fun-def|[
        static void register_strategies(void)
	{
      int initial_size = 117 ;
      int max_load = 75;
      struct str_closure *closures;
      int closures_index = 0;

	  if(strategy_table == NULL) 
	    strategy_table = ATtableCreate(initial_size,max_load);

          closures = (struct str_closure *) malloc(sizeof(struct str_closure) * ~exp:l );
          if(closures == NULL) {
            perror("\"malloc error for registration of dynamic strategies\"");
            exit(1);
          }
	  ~stm*:<id>
	}
      ]|

strategies

  GenerateIncludes =
    <get-config <+ ![]> "--C-include"
    ; map(!PpControl(<conc-strings> ("#include ", <id>)))

  MainDef = 
    !c:fun-def|[ 
      int main(int argc, char *argv[]) {
        ATerm out_term; 
        ATermList in_term;
        int i; 

        ATinit(argc, argv, &out_term);
        init_constructors();
        // SRTS_init_mprotect(); // mprotect no longer needed

        in_term = ATempty; 
        for(i = argc - 1; i >= 0; i--) {
          in_term = ATinsert(in_term, 
                             (ATerm) ATmakeAppl0(ATmakeSymbol(argv[i],0,ATtrue)));
        }

        SRTS_stratego_initialize();
        memset(__tracing_table, 0, sizeof(unsigned short) * TRACING_TABLE_SIZE);
        __tracing_table_counter = 0;
        register_strategies();
        out_term = main_0_0(NULL, (ATerm)in_term); 
        
        if(out_term != NULL)
          {
            ATfprintf(stdout, "\"%t\\n\"", out_term);
            exit(0);
          }
        else
          {
            ATfprintf(stderr, "\"%s: rewriting failed, trace:\\n\"",  argv[0]);
            for(i = 0; __tracing_table[i] && i < TRACING_TABLE_SIZE ; i++) 
              ATfprintf(stderr, "\"\\t%s\\n\"", __tracing_table[i]);
            exit(1);
          }
       }
    ]|

/**
 * Fragments
 */

strategies

  fragment(s|tp) =
    where(s; ?x; rules( Fragment :+ tp -> x ))

/**
 * Signatures
 */
strategies

  DesugarOpDecl :
    ExtOpDecl(c, t) -> OpDecl(c, t)

  Translate =
    try(DesugarOpDecl)
    ; fragment(DeclareConstructor|"ConstructorDecl")
    ; fragment(InitConstructorQ <+ InitConstructor|"ConstructorInit")

  DeclareConstructor :
    OpDecl(c, t) -> c:dec|[ static Symbol ~id:csym; ]|
    where <Arity> t => n
        ; <concat-strings>["sym_", <cify> c, "_", <int-to-string> n] => csym
        ; rules(ConstructorName : (c, n) -> csym)

  Arity : 
    ConstType(t) -> 0

  Arity : 
    FunType(ts, t) -> <length> ts

  InitConstructorQ :
    OpDecl(c, t) ->
    stm*|[
      ~id:csym = ATmakeSymbol(~exp:StringLit([<double-quote>c']), 
			      ~exp:<mk-int-const> ar, ATtrue);
      ATprotectSymbol(~id:csym);
    ]|
    where <string-as-chars(unescape-chars; un-double-quote-chars)> c => c' 
        ; <Arity> t => ar
        ; <ConstructorName> (c, ar) => csym

  InitConstructor :
    OpDecl(c, t) ->
    stm*|[
      ~id:csym = ATmakeSymbol(~exp:StringLit([<double-quote>c]), 
			      ~exp:<mk-int-const> ar, ATfalse);
      ATprotectSymbol(~id:csym);
    ]|
    where ar   := <Arity> t
        ; csym := <ConstructorName> (c, ar)

/**
 * Prototypes for strategy definitions
 */
strategies 

  Translate = //debug(!"Translate: "); 
    SDefIgnore
    <+ is-closure-alloc
    <+ fragment(SDefToDeclaration|"FunctionSig")
       ; fragment(SDefToRegistration|"FunctionReg")
       ; (fragment(TranslateDef | "FunctionDef")
	  <+ {?Def|[ external f(a1* | a2* ) ]|}
	  <+ {?Def|[ external f(a1* | a2* ) = s ]|}
          <+ dbg(|"TranslateDef undefined: "); fail)

  SDefIgnore =
    ?Def|[ f(a1* | a2*) = s ]|
    ; where( !f => "DYNAMIC__CALLS_0_0" )

  SDefToDeclaration :
    Def|[ f(a1* | a2*) = s ]| ->
    dec|[ ATerm ~id:f (StrSL sl, ~param-dec*:ps, ATerm t); ]|
    where <not(is-local-function)> f
        ; ps := <map(TranslateVarDec)> [a1*,a2*]

  SDefToDeclaration :
    Def|[ f(a1* | a2*) = s ]| ->
    dec|[ static ATerm ~id:f (StrSL sl, ~param-dec*:ps, ATerm t); ]|
    where <is-local-function> f
        ; ps := <map(TranslateVarDec)> [a1*,a2*]

  SDefToDeclaration :
    Def|[ external f(a1* | a2*) = s ]| ->
    dec|[ ATerm ~id:f (StrSL sl, ~param-dec*:ps, ATerm t); ]|
    where ps := <map(TranslateVarDec)> [a1*,a2*]

  SDefToDeclaration :
    Def|[ external f(a1* | a2*) ]| ->
    dec|[ ATerm ~id:f (StrSL sl, ~param-dec*:ps, ATerm t); ]|
    where ps := <map(TranslateVarDec)> [a1*,a2*]


/**
 * Registration of strategy definition 
 */
strategies

  SDefToRegistration =
    ( ?Def|[ f(a1*|a2*) = s ]|
    + ?Def|[ external f(a1* | a2*) = s ]|
    + ?Def|[ external f(a1* | a2*) ]| 
    )
    ; !stm|[
        {
          closures[closures_index].fun = &(~id:f);
          closures[closures_index].sl = NULL;
          SRTS_register_function(
              (ATerm) ATmakeAppl0(ATmakeSymbol(~id:<double-quote>f, 0, ATtrue))
            , &(closures[closures_index])
            );
          closures_index++;
        }
       ]|

/**
 * Translation of strategy definition to C function
 */

signature
  constructors
    Next : Id 

strategies 

  is-closure-alloc = 
    ?Def|[ f~{t*}(a1*|a2*) = s ]|
    ; where(<fetch(?ClosureAlloc())> t*)

  // TODO: don't include sl_funs(0) / sl_vars(0)

  // TODO: insert escaping strategy arguments in frame

  TranslateDef :
    Def|[ f~{t*}(a1*|a2*) = s ]| -> <try(make-static)> 
    |[ 
       ATerm ~id:f{}(StrSL sl, ~param-dec*:args, ATerm t)
       {
         __tracing_table[__tracing_table_counter++] = ~exp:<!StringLit([<double-quote> f])>;
         __tracing_table[__tracing_table_counter] = NULL;
         sl_decl(sl);
         ~stm*:fini;
         ~stm*:vini;
         ~stm*:stms;
         ~stm:stm; 
         __tracing_table[--__tracing_table_counter] = NULL;
         return(t);
         ~id:F : 
         --__tracing_table_counter;
         return NULL;
       }
    ]|
    where 
       {| SuccessLabel, FailureLabel
        : <not(fetch(?ClosureAlloc()))> t*
        ; args := <map(TranslateVarDec)> [a1*,a2*]
        ; fini := <init-sl-funs> t*
        ; vini := <init-sl-vars> t*
        ; stms := <filter(AddToFrame)> [a1*, a2*]
        ; F    := <newname> "fail"
        ; stm  := <translate-strat(|Next(), F)> s
       |}


  init-sl-funs : 
    [Offsets(0,j)|_] -> []

  init-sl-funs : 
    [Offsets(i,j)|_] -> [ stm|[ sl_funs(~exp:<mk-int-const>i); ]| ]
    where <not(0)> i

  init-sl-vars : 
    [Offsets(i,0)|_] -> []

  init-sl-vars : 
    [Offsets(i,j)|_] -> [ stm|[ sl_vars(~exp:<mk-int-const>j); ]| ]
    where <not(0)> j



  make-static :
    |[ ATerm ~id:f(~param-dec*:args) { ~stm*:stms } ]| -> 
    //<debug(!"static: ")> 
    |[ static ATerm ~id:f(~param-dec*:args) { ~stm*:stms } ]|
    where //debug(!"make-static: ");
	  <is-local-function> f
	//; debug(!"is local fun")

  is-local-function =
    explode-string
    ; ([is-alpha, '_' | list(is-num)]
       <+ ['l', 'i', 'f', 't', 'e', 'd' | list(is-num)]
       <+ ['l', 'i', 'f', 't', 'e', 'd', '_' | list(is-num)])

  check-arg(|F) :
    VarDec(x, ConstType(_)) -> 
    stm|[
      if(x == NULL) goto ~id:F;
    ]|

strategies

  TranslateVarDec :
    VarDec(x, ConstType(_)) -> param-dec|[ ATerm ~id:x ]| 

  TranslateVarDec :
    VarDec(x, FunType(ts,_)) -> param-dec|[ StrCL x ]|

  AddToFrame : 
    Typedid|[ x~{Offset(i),Escapes()} : tp ]| ->
    stm|[ sl_init_fun(~exp:<mk-int-const>i, ~id:x); ]|
    where FunType(_,_) := tp

  AddToFrame : 
    VarDec(x{Offset(i),Escapes()}, ConstType(_)) ->
    stm|[ sl_init_var(~exp:<mk-int-const>i, ~id:x); ]|

  TranslateType : 
    ConstType(_) -> ParamDecl(TypeSpec([],TypeId("ATerm"),[]), None)

  TranslateType :
    FunType(ts, _) -> 
    ParamDecl(TypeSpec([],TypeId("ATerm"),[]), 
              Some(ParamList(<map(TranslateType)> ts)))

/**
 * Strategy expressions
 */
rules 

  translate-strat(|S,F) =
    TranslateStrat(|S,F)
    <+ dbg(|"*** translate-strat undefined: "); fail

  TranslateStrat(|S,F) :
    Id -> stm|[ goto ~id:S; ]|

  TranslateStrat(|S,F) :
    Fail -> stm|[ goto ~id:F; ]|

  TranslateStrat(|S,F) :
    |[ {x* : s} ]| -> 
    stm|[ 
      {
	~dec*:[Declaration2(TypeSpec([],TypeId("ATerm"),[]),
	        // <map(!var-dec|[~id:<id> = NULL]|)> x*
		<map(!DeclInit(IdDecl([],Id(<id>),None),AssignInit(Id("NULL"))))> x*)
	       ]
        ~stm*:<filter(TranslateEscapingVarDec)> x*
        ~stm:(<translate-strat(|S,F)> s)
      }
    ]|

  TranslateEscapingVarDec : 
    x{Offset(i),Escapes()} -> stm|[
      sl_init_var(~exp:<mk-int-const> i, ~id:x{}); 
    ]|

  TranslateStrat(|S,F) :
    |[ s1; s2 ]| -> 
    stm|[
      { 
        ~stm:<translate-strat(|Next(),F)>s1 
        ~stm:<translate-strat(|S,F)>s2 
      }  
    ]|

  TranslateStrat(|S,F) :
    |[ s1 < s2 + s3 ]| ->
    stm|[
      {
        ATerm ~id:x = t;
        ~stm:<translate-strat(|Next(),F')>s1
        ~stm:<translate-strat(|S,F)>s2
        ~id:F' : t = ~id:x; 
        ~stm:<translate-strat(|S,F)>s3
      }
    ]|
    where <not(Next())> S; <newname> "trm" => x; <newname> "label" => F'
	
  TranslateStrat(|S,F) :
    |[ s1 < s2 + s3 ]| -> 
    stm|[ 
      { 
        ~stm:<translate-strat(|S',F)> |[ s1 < s2 + s3 ]| 
        ~id:S' : ; 
      }
    ]|
    where !S => Next(); <newname> "label" => S'

  TranslateStrat(|S,F) :
    |[ let ~*defs in s end ]| ->
    stm|[
      {
        ~dec*:closures
        ~stm*:stms
        ~stm:stm
      }
    ]|
    where <map(Translate)> defs
        ; (closures, stms) := <filter(MkClosure); unzip; (concat,concat)> defs
	; stm := <translate-strat(|S,F)> s

  // @TODO
  // cater for closures for top-level functions, which will typically
  // have the form 
  //   |[ f1(|) = f2(|) ]|
  // the only purpose of such local definitions is to allocate a closure
  // in order to pass f2(|) on
 
  MkClosure :
    Def|[ f~{Offsets(i,j),Closure(x)}(|) = s ]| ->
    ([dec|[ struct str_closure ~id:y = {&~id:f, &frame}; ]|
     ,dec|[ StrCL ~id:x = &y; ]|]
    , [])
    where y := <new>

  MkClosure :
    Def|[ f~{Offsets(i,j),Offset(k),Escapes(),Closure(x)}(|) = s ]| ->
    ([dec|[ struct str_closure ~id:y = {&~id:f, &frame}; ]|
     ,dec|[ StrCL ~id:x = &y; ]|]
    ,[stm|[ sl_init_fun(~exp:<mk-int-const>k, ~id:x); ]|])
    where y := <new>

  // allocate closure for a top-level function

  MkClosure :
    Def|[ f~{Offsets(0,0),Closure(x),ClosureAlloc()}(|)
            = g~{Frames(frames)}(|) ]| ->
    ([dec|[ struct str_closure ~id:y = {&~id:g, ~exp:sl}; ]|
     ,dec|[ StrCL ~id:x = &y; ]|]
    , [])
    where ?def
	; y := <new>
	; frames' := <Tl> frames
	; if <not([])> frames' then
	    sl := <frames-to-static-link> frames'
	  else
            sl := |[ &frame ]|
	    ; <dbg(|"* warning (MkClosure) expects more than one frame: ")> def
	  end

  MkClosure :
    Def|[ f~{Offsets(0,0),Offset(k),Escapes(),Closure(x),ClosureAlloc()}(|) 
          = g~{Frames(frames)}(|) ]| ->
    ([dec|[ struct str_closure ~id:y = {&~id:f, ~exp:sl}; ]|
     ,dec|[ StrCL ~id:x = &y; ]|]
    ,[stm|[ sl_init_fun(~exp:<mk-int-const>k, ~id:x); ]|])
    where ?def
	; y := <new>
	; frames' := <Tl> frames
	; if <not([])> frames' then
	    sl := <frames-to-static-link> frames'
	  else
            sl := |[ &frame ]|
	    ; <dbg(|"* warning (MkClosure) expects more than one frame: ")> def
	  end

strategies // computing the static link

  frames-to-static-link =
    (Tl <+ err(|"*** frames-to-static-link error: "); fail)
    ; foldr(!exp|[ sl ]|,
	    !exp|[ sl_up(~exp:<Snd>) ]|)

strategies // calling and passing functions

  // a function without annotations must be a top-level function

  mk-call : 
    (f{}, args) -> ()
    where err(|"*** mk-call error: "); <exit> 1   

  // f is a function, pass it its static link

  mk-call : 
    (f{Frames([])}, args) -> 
    exp|[ ~id:f{}(&frame,~exp*:args) ]|

  // f is a function, pass it its static link

  mk-call : 
    (f{Frames(frames)}, args) -> 
    exp|[ ~id:f{}(~exp:sl,~exp*:args) ]|
    where sl := <not([]); frames-to-static-link> frames

  // f is a function, pass it its static link
  // the offset is caused by another use of the function as
  // a closure, it can be ignored in this instance

  mk-call : 
    (f{Offset(i),Frames([])}, args) -> 
    exp|[ ~id:f{}(&frame,~exp*:args) ]|

  mk-call : 
    (f{Offset(i),Frames(frames)}, args) -> 
    exp|[ ~id:f{}(~exp:sl,~exp*:args) ]|
    where <not([]); frames-to-static-link> frames => sl

  // f is a local variable (function argument) containing a closure

  mk-call : 
    (f{Frames([]),ApplyClosure()}, args) -> 
    exp|[ (cl_fun(~id:f{}))(cl_sl(~id:f{}), ~exp*:args) ]|

  // f is a local variable containing a closure
  // (but f also has escaping instances)

  mk-call : 
    (f{Offset(i),Frames([]),ApplyClosure()}, args) -> 
    exp|[ (cl_fun(~id:f{})) (cl_sl(~id:f{}), ~exp*:args) ]|

  // f is a non-local variable containing a closure

  mk-call : 
    (f{Offset(i),Frames(frames),ApplyClosure()}, args) -> 
    exp|[ (sl_fun(~exp:<mk-int-const>i, ~exp:sl))
             (sl_fun_sl(~exp:<mk-int-const>i, ~exp:sl), ~exp*:args) ]| 
    where sl := <not([]); frames-to-static-link> frames

  // passing a local closure to a function 
  // Note: this should be &x in case of a locally constructed closure,
  // but plain x in the case when the closure is passed into the function
  // may also be solved at the point of the definition of the closure, i.e.,
  // create two variables, one that contains the storage of the closure,
  // the second that contains its address
  // ...
  // fixed 

  ArgToCl :
    Strat|[ f~{Closure(x),Frames([])}(|) ]| -> exp|[ x ]|

  ArgToCl :
    Strat|[ f~{Offset(i),Closure(x),Frames([])}(|) ]| -> exp|[ x ]|

  // passing a remote closure to a function

  ArgToCl :
    Strat|[ f~{Offset(i),Closure(x),Frames(frames)}(|) ]| -> 
    exp|[ sl_fun_cl(~exp:<mk-int-const>i, ~exp:sl) ]|
    where sl := <not([]); frames-to-static-link> frames

/**
 * Strategy calls
 */
rules

  TranslateStrat(|S,F) :
    Strat|[ f(s* | t* ) ]| -> 
    <check-unbound-args(|F,t*)>
    stm|[ 
      { 
        t = ~exp:call; 
        if( t == NULL ) goto ~id:F; else goto ~id:S; 
      }
    ]|
    where //debug(!"call a: ");
	  args1 := <map(ArgToCl)> s*
        //; debug(!"call b: ")
	; args2 := <map(topdown(try(construct-term)))> t*
        //; debug(!"call c: ")
	; args := <concat>[args1, args2, [Id("t")]]
        //; debug(!"call d: ")
	; call := <mk-call>(f, args)

  TranslateStrat(|S,F) :
    Strat|[ prim(~str:f, s* | t* ) ]| -> 
    <check-unbound-args(|F,t*)>
    stm|[ 
      { 
        t = ~id:f(~exp*:args); 
        if( t == NULL ) goto ~id:F; else goto ~id:S; 
      }
    ]|
    where args1 := <map(ArgToCl)> s*
        ; args2 := <map(topdown(try(construct-term)))> t*
        ; args  := <conc>(args1, args2)

  TranslateStrat(|S,F) :
    CallDynamic(tp,s*,t*) -> 
    <check-unbound-args(|F,[tp,t*])>
    stm |[ 
      {
        StrCL ~id:f = SRTS_lookup_function(~exp:e);
        if(~id:f == NULL) {
          goto ~id:F;
        }
        t = cl_fun(~id:f)(cl_sl(~id:f), ~exp*:args);
        if( t == NULL )
          goto ~id:F;
        else
          goto ~id:S; 
      }
    ]|
    where args1 := <map(ArgToCl)> s*
        ; args2 := <map(topdown(try(construct-term)))> t*
        ; args  := <concat>[args1, args2, [Id("t")]]
	; e     := <topdown(try(construct-term))>tp
        ; f     := <newname> "calldynamic"

  /**
   * Import a term from a file.
   *
   * Note that the check may be left out if we are sure
   * that the term creation always succeeds.
   */ 

  TranslateStrat(|S,F) :
    ImportTerm(modname) -> 
    stm|[ 
      { 
        t = f(); 
        if( t == NULL ) goto ~id:F; else goto ~id:S; 
      }
    ]|
    where f := <new>
	; <fragment(CgenATerm(|f) | "FunctionDef")> modname
	; fragment(!dec|[ static ATerm f(void); ]| |"FunctionSig")

  CgenATerm(|f) :
    filename -> 
    |[ static ATerm f(void) 
       {
         static ATerm result = NULL;
         static unsigned char term[] = { ~init*:chars };
         if(result == NULL) {
           result = ATreadFromBinaryString((char *) term, ~exp:i);
           if(result != NULL) {
              ATprotect(&result);
           }
         }
         return result;
       }
    ]|
    where
      if <not(file-exists)> filename then
        err(|"importing term from non-existing file")
	; fail
      end
      ; <ReadFromFile> filename
      ; (charshack, length) := <strc-cgen-aterm>
      ; chars := [AssignInit(IntConst(charshack))]
      ; i := <mk-int-const> length

  external strc-cgen-aterm(|)

/**
 * Matching
 */

signature
  constructors
    Match : Term * Exp -> Exp

rules

  TranslateStrat(|S,F) :
    Match(t) -> <translate-strat(|S,F)> Match(t, Id("t"))

  TranslateStrat(|S,F) :
    Match(Wld(), trm) -> stm|[ goto ~id:S; ]|

  TranslateStrat(|S,F) :
    Match(As(t1,t2), trm) ->
    stm|[ 
      { 
        ~stm:(<translate-strat(|Next(),F)> Match(t1,trm))
        ~stm:(<translate-strat(|S,F)> Match(t2,trm))
      }
    ]|

  TranslateStrat(|S,F) :
    Match(Var(x){"unbound"}, trm) ->
    stm|[ { ~exp:e = ~exp:trm; goto ~id:S; } ]|
    where <VarToWriteRef> x => e

  TranslateStrat(|S,F) :
    Match(Var(x){"bound"}, trm) ->
    stm|[ 
      if( ~exp:e == ~exp:trm ) 
        goto ~id:S; 
      else 
        goto ~id:F; 
     ]|
    where <VarToReadRef> x => e

  TranslateStrat(|S,F) :
    Match(Var(x){"(un)bound"}, trm) ->
    stm|[ 
      if( ~exp:e1 == NULL )
        { 
          ~exp:e2 = ~exp:trm; 
          goto ~id:S; 
        }
      else if( ~exp:e1 != ~exp:trm )
        goto ~id:F;
      else
        goto ~id:S;
    ]|
    where <VarToReadRef> x => e1
	; <VarToWriteRef> x => e2

  VarToWriteRef :
    x{} -> exp|[ x ]|

  VarToWriteRef :
    x{Frames([])} -> exp|[ x ]|

  VarToWriteRef : 
    x{Offset(i), Frames([])} -> exp|[ x ]|

  VarToWriteRef : 
    x{Offset(i), Frames(frames)} -> 
    exp|[ sl_readvar(~exp:<mk-int-const>i, ~exp:sl) ]|
    where <not([]); frames-to-static-link> frames => sl

  VarToReadRef : 
    x{} -> exp|[ x ]|

  VarToReadRef :
    x{Frames([])} -> exp|[ x ]|

  VarToReadRef :
    x{Offset(i), Frames([])} -> exp|[ x ]|

  VarToReadRef : 
    x{Offset(i), Frames(frames)} -> 
    exp|[ sl_readvar(~exp:<mk-int-const>i, ~exp:sl) ]|
    where <not([]); frames-to-static-link> frames => sl

  TranslateStrat(|S,F) :
    Match(Var(x){}, trm) -> <translate-strat(|S,F)> Match(Var(x){"(un)bound"}, trm)

  TranslateStrat(|S,F) :
    Match(Explode(t1, t2), Id(trm)) ->
    |[ { ATerm ~id:x, ~id: y;
	 ~id:x = SSL_get_constructor(~id:trm);
	 ~id:y = SSL_get_arguments(~id:trm);
	 ~stm:(<translate-strat(|Next(),F)> Match(t1, Id(x)))
	 ~stm:(<translate-strat(|S,F)> Match(t2, Id(y)))
       } ]|
    where <newname> "trm" => x; <newname> "trm" => y

  TranslateStrat(|S,F) =
    TranslateMatchNoAnno(|S,F)
    <+ TranslateMatchAnno(|S,F)

  TranslateMatchNoAnno(|S,F) :
    Match(Term|[ pt1{^_} ]|, trm) -> <translate-strat(|S,F)> Match(pt1, trm)

  TranslateMatchAnno(|S,F) :
    Match(|[ pt1{^pt2} ]|, Id(trm)) -> 
    stm|[ 
      { 
        ATerm ~id:x; 
        ~id:x = (ATerm)ATgetAnnotations(~id:trm);
        if(~id:x == NULL) 
           ~id:x = (ATerm) ATempty;
        ~stm:(<translate-strat(|Next(),F)> Match(pt1, Id(trm)))
        ~stm:(<translate-strat(|S,F)> Match(pt2, Id(x)))
      } 
    ]|
    where <not(?PreTerm|[_]|)> pt2
	; <newname> "trm" => x

  /**
   * @todo  String constants should probably be cached, just like constructor names
   */
  TranslateStrat(|S,F) :
    Match(Str(x), trm) -> 
    stm|[
      if(ATgetSymbol(~exp:trm) == ATmakeSymbol(~exp:x', 0, ATtrue))
        goto ~id:S;
      else 
        goto ~id:F;
    ]|
    where !StringLit([<escape; double-quote>x]) => x'

  TranslateStrat(|S,F) :
    Match(Int(i), trm) -> 
    stm|[
      if(~exp:LAnd(exp|[ATgetType(~exp:trm) == AT_INT]|, 
                   exp|[ATgetInt((ATermInt)~exp:trm) == ~exp:x']|))
        goto ~id:S;
      else 
        goto ~id:F;
    ]|
    where <mk-int-const> i => x'

  TranslateStrat(|S,F) :
    Match(Real(i),trm) -> 
    stm|[
      if(~exp:LAnd(exp|[ATgetType(~exp:trm) == AT_REAL]|, 
                   exp|[ATgetReal((ATermReal)~exp:trm) == ~exp:x']|))
        goto ~id:S;
      else 
        goto ~id:F;
    ]|
    where !FloatConst(<try(real-to-string)>i) => x'

  /**
   * Translate a match of an Op, but not a Cons/2 or Nil/0.
   */
  TranslateStrat(|S,F) :
    Match(op@Op(c, ts), trm) ->
    stm|[
      if( match_cons(~exp:trm, ~id:cname) )
        { 
          ~stm*:match-args
          goto ~id:S;
        }
      else
        goto ~id:F;
    ]|
    where <not(is-ListOp)> op
	; <ConstructorName> (c, <length> ts) => cname
        ; <thread-map(\ (t,i) ->
             (
               <MatchArg1(|Next(),F) <+ MatchArg2(|Next(),F)> 
                  (t, exp|[ ATgetArgument(~exp:trm,~exp:<mk-int-const> i) ]|)
             , <add>(i, 1)
             )
           \ )> (ts,0) => (match-args,_)

  is-ListOp =
    ?Op("Nil", []) + ?Op("Cons", [_, _])

  MatchArg1(|S,F) : 
    (Var(x){t*}, trm) -> <translate-strat(|S,F)> Match(Var(x){t*}, trm)

  MatchArg2(|S,F) : 
    (t, trm) -> 
    stm|[ 
      { 
         ATerm x = ~exp:trm; 
         ~stm:(<translate-strat(|S,F)> Match(t, Id(x)))
      } 
    ]|
    where <newname> "trm" => x

  TranslateStrat(|S,F) :
    Match(Op("Nil", []), trm) ->
    stm|[
      if(~exp:LAnd(exp|[(ATgetType(~exp:trm) == AT_LIST)]|, 
                   exp|[ATisEmpty(~exp:trm)]|))
        goto ~id:S;
      else 
        goto ~id:F;
    ]|

  TranslateStrat(|S,F) :
    Match(Op("Cons", [hd, tl]), trm) ->
    stm|[
      if(~exp:LAnd(exp|[(ATgetType(~exp:trm) == AT_LIST)]|, 
                   exp|[(!(ATisEmpty(~exp:trm)))]|))
        { 
          ~stm*:match-args 
          goto ~id:S;
        }
      else
        goto ~id:F;
    ]|
    where <map(MatchArg1(|Next(),F) <+ MatchArg2(|Next(),F))> 
	   [(hd, exp|[ ATgetFirst((ATermList)~exp:trm) ]|), 
            (tl, exp|[ (ATerm)ATgetNext((ATermList)~exp:trm) ]|)] => match-args

/**
 * Building
 */
rules

  TranslateStrat(|S,F) :
    Build(t) -> 
    <check-unbound-args(|F,t)>
    stm|[
      { 
        ~dec*:decs
	~stm*:stms
        t = ~exp:e;
        goto ~id:S;
      }
    ]|
    where {| CheckBuild, FailureLabel
	   : rules( FailureLabel : _ -> F )
	   ; <construct-term> t => e
	   ; bagof-CheckBuild; unzip; (id, reverse; concat) => (decs, stms)
	   |}

  check-unbound-args(|F,t) =
    try(CheckUnboundArgs(|F,t))

  CheckUnboundArgs(|F,t) :
    s -> 
    stm|[ 
      if(~exp:e)
        goto ~id:F;
      else  
        ~stm:s
    ]|
    where <collect({?Var(_){t*}; where(<not(["bound"])> t* )})> t
	; not([])
	; foldr1(!exp|[ ~exp:<Hd; ConstructVar> == NULL ]|
	        ,!exp|[ ~exp:<Fst; ConstructVar> == NULL || ~exp:<Snd> ]|) => e

/**
 * Term construction with constant term caching
 */
rules 

  init-term-caching =
    where(
       !Op("Nil", []) => t1
       ; !Anno(Op("Nil", []),Op("Nil", [])) => t2
       ; !exp|[ (ATerm) ATempty ]| => e
    )
    ; rules( Cache : t1 -> e )
    ; rules( Cache : t2 -> e )

  construct-term =
    Cache 
    <+ ConstructAnnoVar
    <+ ConstructVar
    <+ !(<id>, <ConstructTerm>)
       ; (CacheConstant <+ Snd)

  CacheConstant :
    (t, e1) -> e2
    where <(Op(id, map(Cache)); proper-list 
	    + Anno(Cache, Cache) 
	    + Int(id) + Str(id) + Real(id) /* + BuildDefault(id) */ )> t
        ; <newname> "term" => x	    
        ; !Id(x) => e2
        ; rules( Cache : t -> e2 )
        ; !(x, e1)
        ; fragment(DeclareTermId|"ConstDecl")
        ; fragment(InitTermId|"ConstInit")

rules

  ConstructTerm :
    Int(i) -> 
    exp|[ 
      (ATerm)ATmakeInt(~exp:<mk-int-const> i)
    ]|

  ConstructTerm :
    Real(x) -> 
    exp|[ 
      (ATerm)ATmakeReal(~exp:FloatConst(<try(real-to-string)> x))
    ]|

  ConstructTerm :
    Str(x) -> 
    exp|[ 
      (ATerm)ATmakeAppl(ATmakeSymbol(~exp:StringLit([<escape; double-quote>x]), 0, ATtrue)) 
    ]|

  ConstructVar :
    Term|[ x ]| -> e
    where <VarToReadRef> x => e

  ConstructAnnoVar :
    |[ x{^pt2} ]| -> 
    exp|[ 
      (ATerm) SRTS_setAnnotations(~exp:e, ~exp:<construct-term> pt2)
    ]|
    where <ConstructVar> Term|[ x ]| => e

  ConstructTerm :
    |[ pt1{^Nil()} ]| -> <construct-term> pt1
    where <not(?Term|[ x ]|)> pt1

  ConstructTerm :
    |[ pt1{^pt2} ]| -> 
    exp|[ 
      (ATerm) SRTS_setAnnotations(~exp:<construct-term> pt1, ~exp:<construct-term> pt2)
    ]|
    where <not(?PreTerm|[ Nil() ]|)> pt2
        ; <not(?Term|[ x ]|)> pt1

//  ConstructTerm :
//    |[ _ t ]| -> <construct-term> t

  ConstructTerm :
    PreTerm|[ c(t*) ]| -> 
    exp|[ 
      (ATerm)ATmakeAppl(
               ~id:<ConstructorName>(c, <length> t*) 
               , ~exp*:<map(construct-term)>t*
             )
    ]|
    where
      not(is-ListOp)

  ConstructTerm :
    Explode(t1, t2) -> 
    exp|[ 
      x
    ]|
    with
      x := <newname> "trm"
	; FailureLabel => F
	; !(dec|[ ATerm ~id:x; ]|, 
            stm*|[ ~id:x = SSL_mkterm(~exp:<construct-term> t1, ~exp:<construct-term> t2);
                   if(x == NULL) goto ~id:F; ]|) => stms
	; rules( CheckBuild :+= stms )

  ConstructTerm :
    Op("Nil", []) -> exp|[ (ATerm)ATempty ]|

  ConstructTerm :
    PreTerm|[ Cons(t1,t2) ]| -> 
    exp|[ 
      (ATerm)ATinsert(~exp:e, ~exp:<construct-term> t1)
    ]|
    where
      <construct-term> t2
      ; if <not(Anno(is-ListOp,id))> t2 then 
          check-aterm-list 
        else
          if ?Id(_) then
	    !|[ (ATermList) ~exp:<id> ]|
          else
            try(UncastATerm)
          end
          ; try(CastATermListSetAnnotations)
        end => e

  check-aterm-list :
    e -> exp|[ (ATermList)x ]|
    where <newname> "trm" => x
	; FailureLabel => F
	; !(dec|[ ATerm ~id:x; ]|, 
            stm*|[ ~id:x = CheckATermList(~exp:e);
                   if(x == NULL) goto ~id:F; ]|) => stms
	; rules( CheckBuild :+= stms )

  CastATerm :
    e -> exp|[ (ATerm) ~exp:e ]|

  CastATermListSetAnnotations :
    exp |[ SRTS_setAnnotations(~exp:e1, ~exp:e2) ]| -> exp |[ (ATermList) SRTS_setAnnotations(~exp:e1, ~exp:e2) ]|

  UncastATerm :
    exp|[ (ATerm)~exp:e ]| -> e

strategies

  proper-list =
    Op("Nil", [])
    + Op("Cons", [id, proper-list])
    + Op(id, id)
      ; not(is-ListOp)

  DeclareTermId :
    (x, e) ->
    c:dec|[ static ATerm ~id:x; ]|

  InitTermId :
    (x, e) ->
    [Stat(Assign(Id(x), AssignEq, e)),
     Stat(FunCall(Id("ATprotect"),[Address(Id(x))]))]

   mk-int-const =
    !IntConst(<try(int-to-string)>)
