module C-simplify
imports C
strategies

  c-simplify =
    bottomup-l(repeat(Csimplify))
    //; remove-unused-labels
    
rules

  Csimplify :
    Compound(decs1, [Compound(decs2, stats) | stats']) -> 
    Compound(<conc>(decs1,decs2), <conc>(stats, stats'))

  Csimplify :
    Compound(decs1, [Compound(decs2, stats)]) -> 
    Compound(<conc>(decs1,decs2), stats)

//  Csimplify :
//    Compound(decs, stats) -> Compound(decs, stats')
//    where <listbu1(LiftCompound)> stats => stats'

//  LiftCompound :
//    [Compound([], stats1) | stats2] -> <conc> (stats1, stats2)

  Csimplify :
    [Compound([], stats) | stats'] -> <conc>(stats, stats')

  Csimplify :
    [Stat(EmptyExp) | stats] -> stats

  Csimplify :
    IfElse(e, s, Compound([],[])) -> If(e, s)

  Csimplify :
    IfElse(e, Compound([],[]), s) -> If(Negation(e), s)

//  Csimplify' : // not valid if s2 is a macro
//    IfElse(e, s1, Compound([],[s2])) -> IfElse(e, s1, s2)
//    where <Stat(id)> s2

//  Csimplify' : // not valid if s1 is a macro
//    IfElse(e, Compound([],[s1]), s2) -> IfElse(e, s1, s2)
//    where <Stat(id)> s1

//  Csimplify' : // not valid if s is a macro
//    If(e, Compound([],[s])) -> If(e, s)
//    where <Stat(id)> s

  Csimplify :
    Goto(Id(Next)) -> Compound([],[])
    //stm|[ goto ~id:Next; ]| -> stm|[ { } ]|

strategies

  /**
   * Remove labels and gotos that are not used.
   *
   * @todo: RemoveDeadCode assumes that there are not labels in branches
   * of conditionals that are jumped to from outside.
   */

  remove-unused-labels =
    alltd(remove-labels-in-fundef)

  remove-labels-in-fundef :
    |[ ATerm ~id:f(~param-dec*:args) { ~stm*:stms1 } ]| -> 
    |[ ATerm ~id:f(~param-dec*:args) { ~stm*:stms2 } ]|
    where {| LabelUsed 
           : <topdown-l(try(RemoveDeadCode); try(RemoveGoto))
	     ; alltd(MarkGoto)
             ; topdown-l(try(RemoveLabel <+ RemoveDeadCode))
             > stms1 => stms2 
           |}

  MarkGoto =
    ?stm|[ goto ~id:L; ]|
    ; rules( LabelUsed : L )
    ; debug(!"used: ")

  RemoveLabel :
    stm*|[ ~id:L : ~stm:s ~stm*:stms1 ]| -> <debug(!"left: ")> stms2
    where debug(!"removed: ")
	; <not(LabelUsed)> L
	; <drop-until({L2,s2:?stm|[ ~id:L2 : ~stm:s2 ]|})> stms1 => stms2

  RemoveDeadCode :
    stm*|[ goto ~id:L; ~stm*:stms1 ]| -> 
    stm*|[ goto ~id:L; ~stm*:stms2 ]|
    where <drop-until({L2,s2:?stm|[ ~id:L2 : ~stm:s2 ]|})> stms1 => stms2

  RemoveGoto :
    stm*|[ goto ~id:L; ~id:L : ~stm:s ~stm*:stms ]| -> 
    stm*|[             ~id:L : ~stm:s ~stm*:stms ]|
