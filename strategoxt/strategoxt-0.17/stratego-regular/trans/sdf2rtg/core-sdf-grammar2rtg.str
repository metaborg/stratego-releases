/**
 * Converts a normalized SDF grammar in abstract syntax to an RTG in abstract syntax.
 *
 * @author  Martin Bravenboer <martin.bravenboer@gmail.com>
 */
module core-sdf-grammar2rtg
imports
  libstratego-lib
  libstratego-rtg
  Sdf2
  sdf/tool/xtc
  libstratego-xtc

strategies

  /**
   * @type  Grammar -> RTG
   */
  core-sdf-grammar2rtg =
    where(
      <table-create> "generated-nonterms"
    )
  ; where(
      collect-om(?syntax(_))
    ; map(grammar2prodrules <+ log(|Error(), "Rewriting syntax section failed"); fail)
    ; concat
    ; if ?[] then
        log(|Error(), "No production rules in RTG. Did you specify the right main module?")
        ; <xtc-exit> 1
      else
        ?prods
      end
    )

    /**
     * @todo  use start symbols of SDF
     */
  ; collect-om(is-start-prod)
  ; if ?[] then
      log(|Error(), "No start productions found. Did you specify any start-symbols in the syntax definition?")
      ; <xtc-exit> 1
    else
      map(start-prod2tree; ?Ref(<id>) <+ err(!"Rewriting production to nonterm failed"); fail)
    ; !RTG(Start(<id>), ProdRules(prods))
    end


/**
 * @type  Grammar -> List(ProdRule)
 */
strategies

  grammar2prodrules :
    syntax(prods) ->
      < remove-all(ignore-prod)
      ; map({p:
          ?p
        ; (  listinj2prodrule
          <+ seq2prodrule
          <+ alt2prodrule
          <+ var2prodrule
          <+ opt2prodrule
          <+ inj2prodrule
          <+ prod2prodrule
          <+ err(!"Rewriting production failed"); fail
          )
        ; where(try(<cycle-error> (p, <id>)))
        })
      ; remove-all(?[])
      > prods

  grammar2prodrules =
    ?context-free-syntax(_)
    ; fatal-err(|"context-free syntax in input hasn't been normalized to syntax")

  grammar2prodrules =
    ?lexical-syntax(_)
    ; fatal-err(|"lexical syntax in input hasn't been normalized to syntax")

  cycle-error =
    ?(p, rtg |[ A -> A ]|)
    ; log(|Critical(), "production rule resulted in a direct cycle", p)
    ; <exit> 1

strategies

  /**
   * Ignore layout productions.
   *
   * @type Production ->? _
   */
  ignore-prod =
    ?prod(_, cf(layout()), _)

  ignore-prod =
    ?prod(_, cf(opt(layout())), _)

  /**
   * Ignore lexical productions.
   */
  ignore-prod =
    ?prod(_, lex(_), _)

  ignore-prod = 
    ?prod(_,lit(_), _)

  ignore-prod = 
    ?prod(_,ci-lit(_), _)

  ignore-prod =
    ?prod([lex(iter-star(char-class(_)))], cf(iter-star(char-class(_))), _)

  ignore-prod =
    ?prod([lex(_)],  sym, _)
    ; where(<oncetd(?char-class(_))> sym)

  /*
  cf(alt(
       char-class(simple-charclass(present(conc(range(numeric("\\0"),numeric("\\92")),range(numeric("\\94"),numeric("\\255"))))))
     , alt(sort("CloseBracket"),sort("TwoCloseBrackets"))
     )
  )*/


  /**
   * Ignore syntax -> context-free injections
   */
  ignore-prod =
    ?prod([a],  cf(a), _)

  /**
   * Ignore varsym -> context-free injections
   */
  ignore-prod =
    ?prod([varsym(cf(a))], cf(a), _)

  /**
   * Ignore lit -> lit | lit | lit productions
   */
  ignore-prod =
    ?prod([lit(_)], cf(alt(lit(_), more)),attrs([]))
    ; where(
        <rec rec(lit(id) + alt(rec, rec))> more
      )

  ignore-prod =
    ?prod([start()], sort("SURROGATE-START"), _)

  ignore-prod =
    ?prod(_, file-start(), _)

  /**
   * Ignore a reject production that injects A into A.
   */
  ignore-prod =
    ?prod(_, _, attrs(attrs)); where(<contains-reject> attrs)


  /**
   * Ignore aux. productions
   */
  ignore-prod =
    ?prod(_, _, attrs(attrs)); where(<contains-rtg(?ignore())> attrs)

  /**
   * Ignore a bracket production that injects A into A.
   */
  ignore-prod =
    prod(?syms, cf(match-sort(?x)), ?attrs(attrs))
    ; where(
        <contains-bracket> attrs
      ; <not(get-cnstr-name)> attrs
      ; <syms2trees> syms => [ rtg |[ x ]| ]
      )

  match-sort(s) =
    sort(s)

  match-sort(s) =
    parameterized-sort(s, id)

  ignore-prod =
    is-start-prod

  is-start-prod =
    ?prod(_, start(), _)

  start-prod2tree :
    prod(syms, start(), _) -> t
      where <syms2trees> syms => [t]

strategies

  /**
   * Rewrites a context-free production with a constructor.
   *
   * @type Production -> ProdRule
   */
  prod2prodrule :
    p@prod(syms, sym, attrs(attrs)) -> result
    where
        <sym2nonterm> sym => A
      ; <syms2trees> syms => t*
      ; if y := <get-cnstr-name> attrs then
          !rtg |[ A -> y(t*) ]|
        else
          log-prod(|Error(), "No constructor name specified in production:", p)
          ;    log(|Error(), "Resolution: please add a cons attribute to this production.")
          ; if-verbose1(log(|Error(), "Production in abstract syntax: ", p))
          ; if <get-config> IgnoreMissingCons() then
              ![]
            else
              // FIXME SDF: http://sjofar.sen.cwi.nl:8080/show_bug.cgi?id=660
                 <?prod([sort("Label"), lit(_), sort("Symbol")], sort("Symbol"), _)> p
                 ; ![]

              <+ <?prod([sort("Symbol"),lit(_),sort("Symbol")],sort("Symbol"), _)> p
                 ; ![]

              <+ <xtc-exit> 1
            end
         end
       ; ?result

/**
 * Injections
 */
rules

  /**
   * Rewrites an context-free or lexical injection.
   *
   * The lhs must be a simple non-terminal reference.
   */
  inj2prodrule :
    prod([inj], sym, attrs(attrs)) -> rtg |[ A -> t ]|
      where not(<get-cnstr-name> attrs)
          ; <sym2tree> inj => t
          ; <sym2nonterm> sym => A

  /**
   * Rewrite a bracket production which is not a 'real' injection.
   */
  inj2prodrule :
    prod(syms, cf(<match-sort(?x)>), attrs(attrs)) -> rtg |[ x -> A ]|
      where <contains-bracket> attrs
          ; <not(get-cnstr-name)> attrs
          ; <syms2trees> syms => [ rtg |[ A ]| ]

/**
 * Sequence
 */
rules

  /**
   * syms -> (syms)
   */
  seq2prodrule :
    prod(syms, nt, _) -> rtg |[ x -> <(i)> (t*) ]|
      where <is-seq-symbol> nt
          ; <get-nonterm-of> nt => x
          ; <syms2trees> syms => t*
          ; <length; int-to-string> t* => i

/**
 * Alternatives
 */
rules

  alt2prodrule :
    prod(syms, nt, _) -> rtg |[ x -> t ]|
      where <is-alt-symbol> nt
          ; <get-nonterm-of> nt => x
          ; <syms2trees> syms => [t]

/**
 * Iteration
 */
rules

  /**
   *  A+ -> A* 
   */
  listinj2prodrule :
    prod([s1@cf(iter(a))], s2@cf(iter-star(a)), _) -> rtg |[ x2 -> x1 ]|
      where <get-nonterm-of> s1 => x1
          ; <get-nonterm-of> s2 => x2

  /**
   * -> A* 
   * -> {A lit}* 
   */
  listinj2prodrule :
    prod([], sym, _) -> rtg |[ x -> <nil>() ]|
      where <is-list-symbol> sym
          ; <get-nonterm-of> sym => x

  /**
   *  A -> A+
   */
  listinj2prodrule :
    prod([cf(a)], cf(iter(a)), _) -> rtg |[ x1 -> <cons> (t, x2) ]|
      where <sym2tree> cf(a) => t
          ; <get-nonterm-of> cf(iter(a)) => x1
          ; <get-nonterm-of> cf(iter-star(a)) => x2

  /**
   *  A -> A+
   */
  listinj2prodrule :
    prod([a], iter(a), _) -> rtg |[ x1 -> <cons> (t, x2) ]|
    where
        <sym2tree> a => t
      ; <get-nonterm-of> iter(a) => x1
      ; <get-nonterm-of> iter-star(a) => x2

/**
 * Iteration with Separator
 * Currently only separators that do not occur in the AST are supported.
 */
rules

  /**
   * {A lit}* lit  {A lit}+ -> {A lit}+
   */
  listinj2prodrule :
    prod(syms, nt, _) -> rtg |[ x -> <conc> (y, z) ]|
      where <is-list-symbol> nt
          ; <get-nonterm-of> nt => x
          ; <filter(not(is-empty-sym)); map(is-list-symbol; get-nonterm-of)> syms => [y, z]

  /**
   *  {A lit}+ -> {A lit}* 
   */
  listinj2prodrule :
    prod([s1@cf(iter-sep(a, sep))], s2@cf(iter-star-sep(a, sep)), _) -> rtg |[ x2 -> x1 ]|
      where <is-empty-sym> sep
          ; <get-nonterm-of> s1 => x1
          ; <get-nonterm-of> s2 => x2

  /**
   *  A -> {A lit}+
   */
  listinj2prodrule :
    prod([cf(a)], nt@cf(iter-sep(a, sep)), _) -> rtg |[ x -> <cons> (t, x2) ]|
      where <is-empty-sym> sep
          ; <sym2tree> cf(a) => t
          ; <get-nonterm-of> nt => x
          ; <get-nonterm-of> cf(iter-star-sep(a, sep)) => x2

/**
 * Alternative
 */
rules

  /**
   *  A -> A?
   */
  opt2prodrule :
    prod([cf(A)], nt@cf(opt(A)), _) -> rtg |[ x -> <some> (t) ]|
      where <sym2tree> A => t
          ; <get-nonterm-of> nt => x

  /**
   *  -> A?
   */
  opt2prodrule :
    prod([], cf(opt(a)), _) -> rtg |[ x -> <none> () ]|
      where <get-nonterm-of> cf(opt(a)) => x

/**
 * Variables
 */
rules

  var2prodrule :
    prod(_, varsym(sym), _) -> rtg |[ x -> meta-var(<string>) ]|
      where <sym2nonterm> sym => x

strategies

  get-nonterm-of =
   ?key
   ; is-nonterm-generator
   ; (  <table-get> ("generated-nonterms", key)
     <+ <table-get> ("generated-nonterms", cf(key))
     <+ <table-get> ("generated-nonterms", <?cf(<id>)> key)
     <+ sdf-symbol-to-string
        ; where(<table-put> ("generated-nonterms", key, <id>))
     )

  is-seq-symbol =
      cf(is-seq-symbol)
    + seq(id, is-list)

  is-alt-symbol = 
      cf(is-alt-symbol)
    + alt(id, id)
     
  is-list-symbol = 
      cf(is-list-symbol)
    + iter-star-sep(id, id)
    + iter-sep(id, id)
    + iter-star(id)
    + iter(id)

  is-nonterm-generator = 
      is-list-symbol
    + is-seq-symbol
    + is-alt-symbol
    + cf(is-nonterm-generator)
    + opt(id)
    + varsym(id)

strategies

  /**
   * @type List(Symbol) -> List(AnnoTreeFN)
   */
  syms2trees =
      filter(not(is-empty-sym))
    ; map(sym2tree)

  /**
   * @type  Symbol -> Symbol
   */
  is-empty-sym = ?lit(_)
  is-empty-sym = ?ci-lit(_)
  is-empty-sym = ?layout()
  is-empty-sym = opt(is-empty-sym)
  is-empty-sym = cf(is-empty-sym)
  is-empty-sym = lex(is-empty-sym)
  is-empty-sym = label(id, is-empty-sym)

/**
 * @type  Symbol -> AnnoTreeFN
 */  
strategies

  sym2tree :
    sym -> rtg |[ A ]|
      where <sym2nonterm> sym => A

  sym2tree:
    cf(sym) -> <sym2tree> sym
      where <not(is-nonterm-generator)> cf(sym)

  sym2tree:
    lex(sym) -> rtg |[ <string> ]|

  sym2tree:
    char-class(_) -> rtg |[ <int> ]|

  sym2tree:
    label(_,sym) -> <sym2tree> sym

  sym2tree:
    sym -> rtg |[ x ]|
      where <get-nonterm-of> sym => x

rules

  sym2nonterm :
    sym -> rtg nonterm |[ x ]|
      where <get-nonterm-of> sym => x

  sym2nonterm =
    sort2nonterm

  sym2nonterm =
    ?cf(<sort2nonterm>)

  sort2nonterm :
    sort(x) -> rtg nonterm |[ x ]|

  sort2nonterm :
    parameterized-sort(x, params) -> rtg nonterm |[ y ]|
    where
      Symbol2String => y

strategies

  /**
   * @type  List(Attribute) -> String
   */
  get-cnstr-name =
    fetch-elem(
      ?default(term(cons(<id>)))

      // FIXME SDF: used for old SDF
      <+ ?term(cons(<id>))
    )

  /**
   * @type  List(Attribute) ->? _
   */
  contains-bracket =
    fetch(?bracket())

  /**
   * @type  List(Attribute) ->? _
   */
  contains-reject =
    fetch(?reject())

  /**
   * @type  List(Attribute) ->? _
   */
  contains-rtg(s) =
    fetch(term(rtg(where(s))))

strategies

  err(s) = log(|Error(), <s> (), <id>)
  dbg(s) = log(|Debug(), <s> (), <id>)

strategies

  sdf-symbol-to-string =
    Symbol2String
    ; newname
    <+ log-sym(|Warning(), "Cannot generate a nice name for symbol", <id>)
     ;     log(|Warning(), "  Please report this bug at ")
     ;     log(|Warning(), "    - https://bugs.cs.uu.nl/browse/STR")
     ;     log(|Warning(), "    - or martin.bravenboer@gmail.com")
     ; new
     ;     log(|Warning(), "  Resolution: falling back to the ugly name ", <id>)

  Symbol2String :
    cf(sym) -> <Symbol2String> sym

  Symbol2String :
    lex(sym) -> <Symbol2String> sym

  /**
   * @todo  This could be improved by using quoted identifiers.
   */
  Symbol2String :
    char-class(_) -> "CharClass"

  /**
   * @todo  This could be improved by using quoted identifiers.
   */
  Symbol2String :
    lit(_) -> "Lit"

  Symbol2String :
    ci-lit(_) -> "CaseInsensitiveLit"

  Symbol2String :
    iter(sym) -> <conc-strings> ("ListPlusOf", <Symbol2String> sym)

  Symbol2String :
    iter-star(sym) -> <conc-strings> ("ListStarOf", <Symbol2String> sym)

  Symbol2String :
    iter-sep(sym, sep) -> <conc-strings> ("ListPlusOf", <Symbol2String> sym)

  Symbol2String :
    iter-star-sep(sym, sep) -> <conc-strings> ("ListStarOf", <Symbol2String> sym)

  Symbol2String :
    sort(s) -> s
    where
      <is-string> s

  Symbol2String :
    parameterized-sort(x, params)  -> <concat-strings> [x, "_" | param-string]
    where
      <is-string> x
      ; <map(Symbol2String)> params => param-string

  Symbol2String :
    label(_,sym) -> <Symbol2String> sym

  Symbol2String :
    opt(sym) -> <conc-strings> ("Opt", <Symbol2String> sym)

  Symbol2String :
    seq(sym, syms) ->
      < filter(not(?lit(_) + ?ci-lit(_)))
      ; map(Symbol2String)
      ; <separate-by> ("_", <id>)
      ; concat-strings
      > [sym | syms]

  Symbol2String :
    alt(sym1, sym2) -> <concat-strings> [<Symbol2String> sym1, "_", <Symbol2String> sym2]

strategies

  log-sym(|severity, msg, sym) =
    log-prod(|severity, msg, sym)

  /**
   * @todo Use libgpp
   */
  log-prod(|severity, msg, prod) =
    where(
      xtc-temp-files(
        !prod
      ; write-to
      ; xtc-pp-sdf2
      ; ?FILE(<read-text-file; trim-chars('\n' + '\r' + ' ' + '\t'); string-as-chars(filter(not('\n' + '\r')))>)
      ; ?prodtxt
      )
    ; log(|severity, msg)
    ; log(|severity, <conc-strings> ("  ", prodtxt))
    )

signature
  constructors
    rtg    : rtginfo -> rtg
    ignore : rtginfo


    /**
     * FIXME: bootstrap problem

    cilit : String -> Tree

    // WTF?
    ci-lit : String -> Tree
     */