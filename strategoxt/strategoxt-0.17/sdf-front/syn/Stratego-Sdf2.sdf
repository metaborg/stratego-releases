%%%
 %% The definition of Sdf2 in Stratego tries to stay as close to the ASF+SDF 
 %% specification of SDF2 in "Syntax Definition for Language Prototyping" by 
 %% Eelco Visser.
 %%
 %% @author Martin Bravenboer
 %%%
module Stratego-Sdf2
imports
  languages/sdf2/syntax/Sdf2
  StrategoRenamed

hiddens
  context-free start-symbols StrategoModule

exports
  %% HACK
  context-free syntax
    Group "." -> Group {non-assoc,cons("non-transitive")}


  context-free syntax

        "|[" SDF "]|" -> StrategoTerm {cons("ToTerm")}
    "d" "|[" SDF "]|" -> StrategoTerm {cons("ToTerm")}

        "|[" Module "]|" -> StrategoTerm {cons("ToTerm")}
    "m" "|[" Module "]|" -> StrategoTerm {cons("ToTerm")}
    "M" "|[" ModuleName "]|" -> StrategoTerm {cons("ToTerm")}

    "i" "|[" Import "]|" -> StrategoTerm {cons("ToTerm")}

        "|[" Section  "]|" -> StrategoTerm {cons("ToTerm")}
    "s" "|[" Section  "]|" -> StrategoTerm {cons("ToTerm")}

         "|[" Grammar  "]|" -> StrategoTerm {cons("ToTerm")}
         "|[" Grammar* "]|" -> StrategoTerm {cons("ToTerm")}
    "G"  "|[" Grammar  "]|" -> StrategoTerm {cons("ToTerm")}
    "G*" "|[" Grammar* "]|" -> StrategoTerm {cons("ToTerm")}

    "is" "|[" ImpSection "]|" -> StrategoTerm {cons("ToTerm")}

        "|[" Attributes "]|" -> StrategoTerm {cons("ToTerm")}
    "$" "|[" Attributes "]|" -> StrategoTerm {cons("ToTerm")}

        "|[" Production  "]|" -> StrategoTerm {cons("ToTerm"), prefer}
    "p" "|[" Production  "]|" -> StrategoTerm {cons("ToTerm")}

         "|[" Productions "]|" -> StrategoTerm {cons("ToTerm")}
    "p*" "|[" Productions "]|" -> StrategoTerm {cons("ToTerm")}

         "|[" Symbol      "]|" -> StrategoTerm {cons("ToTerm")}
    "A"  "|[" Symbol      "]|" -> StrategoTerm {cons("ToTerm")}
    "A*" "|[" Symbols     "]|" -> StrategoTerm {cons("ToTerm")}

    "cc" "|[" CharClass "]|" -> StrategoTerm {cons("ToTerm")}

         "|[" Renaming "]|" -> StrategoTerm {cons("ToTerm")}
    "ro" "|[" Renaming "]|" -> StrategoTerm {cons("ToTerm")}

         "|[" Alias "]|" -> StrategoTerm {cons("ToTerm")}
    "al" "|[" Alias "]|" -> StrategoTerm {cons("ToTerm")}

    "~"     StrategoVar  -> Symbol {cons("FromTerm")}
    "~sym:" StrategoTerm -> Symbol {cons("FromTerm")}


%%% 
 %% Tricky: the reject needs to be lexical syntax to
 %% avoid reject of variables. These lexical rejects only 
 %% reject the literal alternatives of an ambiguity. Thus,
 %% the context-free variable is still allowed.
 %%%

  lexical syntax
    MetaVar -> Sort {reject}
    MetaVar -> IdCon  {reject}
    MetaVar -> StrCon {reject}

%%%
 %% Symbols: Section 7.1
 %%%

  variables
    SymbolMetaVar      -> Symbol
    SymbolMetaVar "*"  -> Symbol*
    SymbolMetaVar "+"  -> Symbol+

    SymbolMetaVar "*"  -> {Symbol ","}*
    SymbolMetaVar "+"  -> {Symbol ","}+

  lexical syntax
    [ABC][0-9\']* -> SymbolMetaVar
    SymbolMetaVar -> MetaVar

  lexical restrictions
    SymbolMetaVar -/- [A-Za-z0-9]

%%%
 %% Grammar: Section 7.2
 %%%

  variables 
    "G" [0-9\']* -> Grammar

%%%
 %% Productions and attributes: Section 7.3.1
 %%%

  variables
    "attr" [0-9\']*     -> Attribute
    "attr" [0-9\']* "*" -> {Attribute ","}*
    "attr" [0-9\']* "+" -> {Attribute ","}+
    "$" [0-9\']*        -> Attributes

    "p" [0-9\']*     -> Production
    "p" [0-9\']* "*" -> Production*
    "p" [0-9\']* "+" -> Production+

%%%
 %% Sort: Section 7.4.1
 %%%

  variables 
     SortMetaVar -> Sort

  lexical syntax
    "S" [0-9\']* -> SortMetaVar
    SortMetaVar -> MetaVar

  lexical restrictions
    SortMetaVar -/- [A-Za-z0-9]

%%%
 %% CharClass: Section 7.4.2
 %%%

  variables 
    "cc" [0-9\']* -> CharClass {prefer}

%%%
 %% Literals
 %%%

  variables
    StrConMetaVar -> StrCon

  lexical syntax    
    "L" [0-9\']*  -> StrConMetaVar
    StrConMetaVar -> MetaVar

  lexical restrictions
    StrConMetaVar -/- [A-Za-z0-9]

%%%
 %% Groups and priorities
 %%%

  variables %% section 8.1.1
    "g" [0-9\']*      -> Group
    "gg" [0-9\']* "*" -> {Group ">"}*
    "gg" [0-9\']* "+" -> {Group ">"}+

    "pr" [0-9\']*     -> Priority
    "pr" [0-9\']* "*" -> {Priority ","}*
    "pr" [0-9\']* "+" -> {Priority ","}+

    AssocMetaVar -> Associativity

  lexical syntax
    "as" [0-9\']* -> AssocMetaVar

  lexical restrictions
    AssocMetaVar -/- [A-Za-z0-9]

  variables %% section 8.4.1
    "restr" [0-9\']*     -> Restriction
    "restr" [0-9\']* "*" -> Restriction*
    "restr" [0-9\']* "+" -> Restriction+

  variables %% section 9.1.1
    "ro" [0-9\']*     -> Renaming
    "ro" [0-9\']* "*" -> Renaming*
    "ro" [0-9\']* "+" -> Renaming+

  variables %% section 9.2.1
    "al" [0-9\']*     -> Alias
    "al" [0-9\']* "*" -> Alias*
    "al" [0-9\']* "+" -> Alias+

  variables %% section 9.3.1
    "Mid" [0-9\']* -> ModuleId
    "M"   [0-9\']* -> ModuleName
    
    "s" [0-9\']*     -> Section
    "s" [0-9\']* "*" -> Section*
    "s" [0-9\']* "+" -> Section+

    "m" [0-9\']*     -> Module
    "m" [0-9\']* "*" -> Module*
    "m" [0-9\']* "+" -> Module+

    "d" [0-9\']*     -> Definition

    "i" [0-9\']*     -> Import
    "i" [0-9\']* "*" -> Import*
    "i" [0-9\']* "+" -> Import+

    "is" [0-9\']*     -> ImpSection
    "is" [0-9\']* "*" -> ImpSection*
