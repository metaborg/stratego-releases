Module("cgen-aterm",[Imports([Import("libstratego-lib")]),Signature([Constructors([OpDecl("FunctionName",ConstType(SortNoArgs("ConfigKey")))])]),Strategies([SDefNoArgs("main-cgen-aterm",Call(SVar("input-wrap"),[CallNoArgs(SVar("functionname-option")),Seq(Assign(Var("tbl"),RootApp(CallNoArgs(SVar("write-to-shared-string")))),Seq(Where(CallT(SVar("print-header"),[],[Var("tbl")])),Seq(Call(SVar("repeat"),[LChoice(Seq(CallT(SVar("splitmap"),[CallNoArgs(SVar("print-elem"))],[NoAnnoList(Int("15"))]),Seq(CallNoArgs(SVar("print-newline")),CallNoArgs(SVar("Snd")))),Seq(Call(SVar("map"),[CallNoArgs(SVar("print-elem"))]),Fail))]),Where(CallT(SVar("print-footer"),[],[Var("tbl")])))))])),SDefNoArgs("functionname-option",Choice(CallT(SVar("ArgOption"),[StrCong("\"--name\""),Call(SVar("OptionHandler"),[BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Op("FunctionName",[])),RootApp(Id)])))])],[NoAnnoList(Str("\"--name           Function name for getting the ATerm\""))]),CallT(SVar("OptionCheck"),[BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Str("\"--help\"")),NoAnnoList(Tuple([]))]))),Call(SVar("OptionOneCheck"),[StrCong("\"--name\"")])],[NoAnnoList(Str("\"error: option --name is required\""))])))]),Strategies([SDefT("print-header",[],[DefaultVarDec("tbl")],Where(BA(CallNoArgs(SVar("fputstrings")),NoAnnoList(Tuple([NoAnnoList(List([NoAnnoList(Str("\"\n#include <aterm1.h>\n\nATerm \"")),App(CallNoArgs(SVar("get-config")),NoAnnoList(Op("FunctionName",[]))),NoAnnoList(Str("\"_0_0(ATerm t) {\n  static ATerm result = NULL;\n  static char parsetable[] = {\n    \""))])),RootApp(CallNoArgs(SVar("stdout-stream")))]))))),SDefT("print-footer",[],[DefaultVarDec("tbl")],Where(BA(CallNoArgs(SVar("fputstrings")),NoAnnoList(Tuple([NoAnnoList(List([NoAnnoList(Str("\"\n  0 };\n\n  if(result == NULL) {\n      result = ATreadFromSharedString(parsetable, \"")),App(Seq(CallNoArgs(SVar("length")),CallNoArgs(SVar("int-to-string"))),Var("tbl")),NoAnnoList(Str("\");\n    if(result != NULL) {\n      ATprotect(&result);\n    }\n  }\n  return result;\n}\n\""))])),RootApp(CallNoArgs(SVar("stdout-stream")))]))))),SDefNoArgs("print-newline",Where(BA(CallNoArgs(SVar("fputs")),NoAnnoList(Tuple([NoAnnoList(Str("\"\\n\"")),RootApp(CallNoArgs(SVar("stdout-stream")))]))))),SDefNoArgs("print-elem",Seq(BA(CallNoArgs(SVar("fputs")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("int-to-string"))),RootApp(CallNoArgs(SVar("stdout-stream")))]))),BA(CallNoArgs(SVar("fputs")),NoAnnoList(Tuple([NoAnnoList(Str("\",\"")),RootApp(CallNoArgs(SVar("stdout-stream")))]))))),SDefNoArgs("fputstrings",Seq(Match(NoAnnoList(Tuple([Var("strings"),Var("stream")]))),BA(Call(SVar("map"),[BA(CallNoArgs(SVar("fputs")),NoAnnoList(Tuple([RootApp(Id),Var("stream")])))]),Var("strings"))))])])
