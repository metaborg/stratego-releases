Module("term/integer",[Imports([Import("lang/dynamic-rules")]),Strategies([SDefNoArgs("is-int",Seq(Match(Var("i")),Prim("\"SSL_is_int\"",[Var("i")])))]),Strategies([SDefNoArgs("add",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),LChoice(Prim("\"SSL_addi\"",[Var("x"),Var("y")]),Prim("\"SSL_addr\"",[Var("x"),Var("y")])))),SDefNoArgs("addi",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Prim("\"SSL_addi\"",[Var("x"),Var("y")]))),SDefT("int-add",[],[DefaultVarDec("y")],Seq(Match(Var("x")),Prim("\"SSL_addi\"",[Var("x"),Var("y")]))),SDefNoArgs("addr",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Prim("\"SSL_addr\"",[Var("x"),Var("y")])))]),Strategies([SDefNoArgs("subt",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),LChoice(Prim("\"SSL_subti\"",[Var("x"),Var("y")]),Prim("\"SSL_subtr\"",[Var("x"),Var("y")])))),SDefNoArgs("subti",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Prim("\"SSL_subti\"",[Var("x"),Var("y")]))),SDefT("int-subt",[],[DefaultVarDec("y")],Seq(Match(Var("x")),Prim("\"SSL_subti\"",[Var("x"),Var("y")]))),SDefNoArgs("subtr",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Prim("\"SSL_subtr\"",[Var("x"),Var("y")])))]),Strategies([SDefNoArgs("mul",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),LChoice(Prim("\"SSL_muli\"",[Var("x"),Var("y")]),Prim("\"SSL_mulr\"",[Var("x"),Var("y")])))),SDefNoArgs("muli",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Prim("\"SSL_muli\"",[Var("x"),Var("y")]))),SDefNoArgs("mulr",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Prim("\"SSL_mulr\"",[Var("x"),Var("y")])))]),Strategies([SDefNoArgs("div",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),LChoice(Prim("\"SSL_divi\"",[Var("x"),Var("y")]),Prim("\"SSL_divr\"",[Var("x"),Var("y")])))),SDefNoArgs("divi",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Prim("\"SSL_divi\"",[Var("x"),Var("y")]))),SDefNoArgs("divr",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Prim("\"SSL_divr\"",[Var("x"),Var("y")])))]),Strategies([SDefNoArgs("mod",LChoice(CallNoArgs(SVar("modi")),CallNoArgs(SVar("modr")))),SDefNoArgs("modi",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Prim("\"SSL_modi\"",[Var("x"),Var("y")]))),SDefNoArgs("modr",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Prim("\"SSL_modr\"",[Var("x"),Var("y")])))]),Strategies([SDefNoArgs("gt",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Test(LChoice(Prim("\"SSL_gti\"",[Var("x"),Var("y")]),Prim("\"SSL_gtr\"",[Var("x"),Var("y")]))))),SDefNoArgs("gti",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Test(Prim("\"SSL_gti\"",[Var("x"),Var("y")])))),SDefNoArgs("gtr",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Test(Prim("\"SSL_gtr\"",[Var("x"),Var("y")])))),SDefNoArgs("geq",LChoice(Match(NoAnnoList(Tuple([Var("x"),Var("x")]))),CallNoArgs(SVar("gt")))),SDefNoArgs("lt",Not(CallNoArgs(SVar("geq")))),SDefNoArgs("leq",Not(CallNoArgs(SVar("gt"))))]),Strategies([SDefT("int-leq",[],[DefaultVarDec("y")],Not(CallT(SVar("int-gt"),[],[Var("y")]))),SDefT("int-gt",[],[DefaultVarDec("y")],Seq(Match(Var("x")),Where(Prim("\"SSL_gti\"",[Var("x"),Var("y")])))),SDefT("int-lt",[],[DefaultVarDec("y")],Seq(Match(Var("x")),Where(Prim("\"SSL_lti\"",[Var("x"),Var("y")]))))]),Strategies([SDefNoArgs("leq-leq",Call(SVar("comp-comp"),[CallNoArgs(SVar("leq")),CallNoArgs(SVar("leq"))])),SDefNoArgs("leq-lt",Call(SVar("comp-comp"),[CallNoArgs(SVar("leq")),CallNoArgs(SVar("lt"))])),SDefNoArgs("lt-leq",Call(SVar("comp-comp"),[CallNoArgs(SVar("lt")),CallNoArgs(SVar("leq"))])),SDefNoArgs("lt-lt",Call(SVar("comp-comp"),[CallNoArgs(SVar("lt")),CallNoArgs(SVar("lt"))])),SDef("comp-comp",[DefaultVarDec("s1"),DefaultVarDec("s2")],Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y"),Var("z")]))),Where(Seq(BA(CallNoArgs(SVar("s1")),NoAnnoList(Tuple([Var("x"),Var("y")]))),BA(CallNoArgs(SVar("s2")),NoAnnoList(Tuple([Var("y"),Var("z")])))))))]),Strategies([SDefNoArgs("even",Where(AM(BA(CallNoArgs(SVar("mod")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("2"))]))),NoAnnoList(Int("0"))))),SDefNoArgs("max",GuardedLChoice(CallNoArgs(SVar("gt")),CallNoArgs(SVar("Fst")),CallNoArgs(SVar("Snd")))),SDefNoArgs("min",GuardedLChoice(CallNoArgs(SVar("gt")),CallNoArgs(SVar("Snd")),CallNoArgs(SVar("Fst")))),SDefNoArgs("pos",Where(BA(CallNoArgs(SVar("geq")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("0"))]))))),SDefNoArgs("neg",Where(BA(CallNoArgs(SVar("lt")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("0"))]))))),SDefNoArgs("int",Seq(Match(Var("x")),Prim("\"SSL_int\"",[Var("x")])))]),Strategies([SDefNoArgs("set-random-seed",Seq(Match(Var("seed")),Prim("\"SSL_srand\"",[Var("seed")]))),SDefNoArgs("get-random-max",PrimNoArgs("\"SSL_RAND_MAX\"")),SDefNoArgs("next-random",PrimNoArgs("\"SSL_rand\""))]),Strategies([SDef("apply-int-to-str-tuple",[DefaultVarDec("s")],Seq(TupleCong(CallNoArgs(SVar("string-to-int")),[CallNoArgs(SVar("string-to-int"))]),Seq(CallNoArgs(SVar("s")),CallNoArgs(SVar("int-to-string"))))),SDefNoArgs("addS",Call(SVar("apply-int-to-str-tuple"),[CallNoArgs(SVar("add"))])),SDefNoArgs("subtS",Call(SVar("apply-int-to-str-tuple"),[CallNoArgs(SVar("subt"))])),SDefNoArgs("mulS",Call(SVar("apply-int-to-str-tuple"),[CallNoArgs(SVar("mul"))])),SDefNoArgs("divS",Call(SVar("apply-int-to-str-tuple"),[CallNoArgs(SVar("div"))])),SDefNoArgs("modS",Call(SVar("apply-int-to-str-tuple"),[CallNoArgs(SVar("mod"))])),SDefNoArgs("maxS",Call(SVar("apply-int-to-str-tuple"),[CallNoArgs(SVar("max"))])),SDefNoArgs("minS",Call(SVar("apply-int-to-str-tuple"),[CallNoArgs(SVar("min"))])),SDefNoArgs("gtS",Where(Seq(TupleCong(CallNoArgs(SVar("string-to-int")),[CallNoArgs(SVar("string-to-int"))]),CallNoArgs(SVar("gt"))))),SDefNoArgs("geqS",Where(Seq(TupleCong(CallNoArgs(SVar("string-to-int")),[CallNoArgs(SVar("string-to-int"))]),CallNoArgs(SVar("geq"))))),SDefNoArgs("ltS",Where(Seq(TupleCong(CallNoArgs(SVar("string-to-int")),[CallNoArgs(SVar("string-to-int"))]),CallNoArgs(SVar("lt"))))),SDefNoArgs("leqS",Where(Seq(TupleCong(CallNoArgs(SVar("string-to-int")),[CallNoArgs(SVar("string-to-int"))]),CallNoArgs(SVar("leq"))))),SDefNoArgs("inc",BA(CallNoArgs(SVar("add")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("1"))])))),SDefNoArgs("int-inc",CallT(SVar("int-add"),[],[NoAnnoList(Int("1"))])),SDefNoArgs("dec",BA(CallNoArgs(SVar("subt")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("1"))])))),SDefNoArgs("int-dec",CallT(SVar("int-subt"),[],[NoAnnoList(Int("1"))]))]),Strategies([SDefNoArgs("log2",Seq(Build(NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("0"))]))),Seq(Call(SVar("repeat"),[TupleCong(Seq(Build(NoAnnoList(Tuple([App(CallNoArgs(SVar("divi")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("2"))]))),App(Seq(CallNoArgs(SVar("mod")),Match(NoAnnoList(Int("0")))),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("2"))])))]))),CallNoArgs(SVar("Fst"))),[CallNoArgs(SVar("inc"))])]),Match(NoAnnoList(Tuple([NoAnnoList(Int("1")),RootApp(Id)]))))))]),Strategies([SDefNoArgs("gcd",Seq(TupleCong(CallNoArgs(SVar("abs")),[CallNoArgs(SVar("abs"))]),Let([SDefNoArgs("gcd'",Choice(LRule(RuleNoCond(NoAnnoList(Tuple([Var("x"),NoAnnoList(Int("0"))])),Var("x"))),LRule(RuleNoCond(NoAnnoList(Tuple([Var("x"),Var("y")])),App(CallNoArgs(SVar("gcd'")),NoAnnoList(Tuple([Var("y"),App(CallNoArgs(SVar("mod")),NoAnnoList(Tuple([Var("x"),Var("y")])))])))))))],CallNoArgs(SVar("gcd'"))))),SDefNoArgs("abs",Seq(Choice(CallNoArgs(SVar("is-int")),CallNoArgs(SVar("is-real"))),IfThen(CallNoArgs(SVar("neg")),BA(CallNoArgs(SVar("subt")),NoAnnoList(Tuple([NoAnnoList(Int("0")),RootApp(Id)]))))))]),Signature([Constructors([OpDecl("Infinite",ConstType(SortNoArgs("IntI"))),OpDeclInj(FunType([ConstType(SortNoArgs("Int"))],ConstType(SortNoArgs("IntI"))))])]),Rules([SDefNoArgs("add-inf",Let([RDefNoArgs("add-inf1",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Infinite",[])),Wld])),NoAnnoList(Op("Infinite",[])))),RDefNoArgs("add-inf2",RuleNoCond(NoAnnoList(Tuple([Wld,NoAnnoList(Op("Infinite",[]))])),NoAnnoList(Op("Infinite",[]))))],LChoice(Choice(CallNoArgs(SVar("add-inf1")),CallNoArgs(SVar("add-inf2"))),CallNoArgs(SVar("add"))))),SDefNoArgs("lt-inf",LChoice(Match(NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("is-int"))),NoAnnoList(Op("Infinite",[]))]))),Seq(TupleCong(CallNoArgs(SVar("is-int")),[CallNoArgs(SVar("is-int"))]),CallNoArgs(SVar("lt")))))]),Strategies([SDefNoArgs("new-counter",Seq(CallNoArgs(SVar("new")),CallNoArgs(SVar("reset-counter")))),SDefNoArgs("reset-counter",Seq(Match(Var("c")),Where(BA(CallNoArgs(SVar("set-counter")),NoAnnoList(Tuple([Var("c"),NoAnnoList(Int("0"))])))))),SDefNoArgs("set-counter",Seq(Match(NoAnnoList(Tuple([Var("c"),Var("n")]))),GenDynRules([SetDynRule(DynRuleId(RDecNoArgs("Counter")),RuleNoCond(Var("c"),Var("n")))]))),SDefNoArgs("get-counter",LChoice(CallNoArgs(SVar("Counter")),Seq(BA(CallNoArgs(SVar("set-counter")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("0"))]))),Build(NoAnnoList(Int("0")))))),SDefNoArgs("next-counter",Seq(Match(Var("c")),Seq(CallNoArgs(SVar("get-counter")),Seq(CallNoArgs(SVar("inc")),Where(BA(CallNoArgs(SVar("set-counter")),NoAnnoList(Tuple([Var("c"),RootApp(Id)]))))))))]),Strategies([SDefNoArgs("int-to-string",Seq(Match(Var("x")),Prim("\"SSL_int_to_string\"",[Var("x")]))),SDefNoArgs("string-to-int",Seq(Match(Var("x")),Prim("\"SSL_string_to_int\"",[Var("x")])))]),Strategies([SDefNoArgs("hex-string-to-int",BA(CallNoArgs(SVar("generic-string-to-int")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("16"))])))),SDefNoArgs("dec-string-to-int",BA(CallNoArgs(SVar("generic-string-to-int")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("10"))])))),SDefNoArgs("oct-string-to-int",BA(CallNoArgs(SVar("generic-string-to-int")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("8"))])))),SDefNoArgs("bin-string-to-int",BA(CallNoArgs(SVar("generic-string-to-int")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("2"))])))),SDefNoArgs("hex-chars-to-int",BA(CallNoArgs(SVar("generic-chars-to-int")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("16"))])))),SDefNoArgs("dec-chars-to-int",BA(CallNoArgs(SVar("generic-chars-to-int")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("10"))])))),SDefNoArgs("oct-chars-to-int",BA(CallNoArgs(SVar("generic-chars-to-int")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("8"))])))),SDefNoArgs("bin-chars-to-int",BA(CallNoArgs(SVar("generic-chars-to-int")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("2"))])))),SDefNoArgs("generic-string-to-int",Seq(TupleCong(CallNoArgs(SVar("explode-string")),[Id]),CallNoArgs(SVar("generic-chars-to-int")))),SDefNoArgs("generic-chars-to-int",LChoice(CallNoArgs(SVar("neg-chars-to-int")),CallNoArgs(SVar("pos-chars-to-int")))),RDefNoArgs("neg-chars-to-int",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Char("'-'"))],Var("chars"))),Var("radix")])),App(CallNoArgs(SVar("mul")),NoAnnoList(Tuple([NoAnnoList(Int("-1")),App(CallNoArgs(SVar("pos-chars-to-int")),NoAnnoList(Tuple([Var("chars"),Var("radix")])))]))),BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("chars")),NoAnnoList(Int("0"))]))))),SDefNoArgs("pos-chars-to-int",Seq(Match(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("char")],Var("chars"))),Var("r")]))),BA(Call(SVar("foldl"),[BA(CallNoArgs(SVar("add")),NoAnnoList(Tuple([App(CallNoArgs(SVar("char-to-digit")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("Fst"))),Var("r")]))),App(CallNoArgs(SVar("mul")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("Snd"))),Var("r")])))])))]),NoAnnoList(Tuple([Var("chars"),App(CallNoArgs(SVar("char-to-digit")),NoAnnoList(Tuple([Var("char"),Var("r")])))]))))),RDefNoArgs("char-to-digit",Rule(NoAnnoList(Tuple([Var("x"),Var("radix")])),Var("result"),Seq(BA(CallNoArgs(SVar("is-num")),Var("x")),Seq(AM(BA(CallNoArgs(SVar("subt")),NoAnnoList(Tuple([Var("x"),NoAnnoList(Char("'0'"))]))),Var("result")),BA(CallNoArgs(SVar("lt")),NoAnnoList(Tuple([Var("result"),Var("radix")]))))))),RDefNoArgs("char-to-digit",Rule(NoAnnoList(Tuple([Var("x"),NoAnnoList(Int("16"))])),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([NoAnnoList(Int("10")),App(CallNoArgs(SVar("subt")),NoAnnoList(Tuple([Var("x"),NoAnnoList(Char("'a'"))])))]))),BA(CallNoArgs(SVar("leq-leq")),NoAnnoList(Tuple([NoAnnoList(Char("'a'")),Var("x"),NoAnnoList(Char("'f'"))]))))),RDefNoArgs("char-to-digit",Rule(NoAnnoList(Tuple([Var("x"),NoAnnoList(Int("16"))])),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([NoAnnoList(Int("10")),App(CallNoArgs(SVar("subt")),NoAnnoList(Tuple([Var("x"),NoAnnoList(Char("'A'"))])))]))),BA(CallNoArgs(SVar("leq-leq")),NoAnnoList(Tuple([NoAnnoList(Char("'A'")),Var("x"),NoAnnoList(Char("'F'"))])))))])])
