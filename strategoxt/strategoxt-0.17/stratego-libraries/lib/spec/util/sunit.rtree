Module("util/sunit",[Imports([Import("system/io/file"),Import("system/io/dir"),Import("system/io/char"),Import("system/io/term")]),Strategies([SDef("test-suite",[DefaultVarDec("name"),DefaultVarDec("tests")],Seq(CallNoArgs(SVar("name")),Seq(Call(SVar("debug"),[Build(NoAnnoList(Str("\"test suite: \"")))]),Seq(CallNoArgs(SVar("init-record")),Seq(CallNoArgs(SVar("tests")),Seq(CallNoArgs(SVar("report-test")),CallNoArgs(SVar("check-for-failures")))))))),SDef("apply-test",[DefaultVarDec("name"),DefaultVarDec("s"),DefaultVarDec("in-term"),DefaultVarDec("out")],Call(SVar("do-test"),[CallNoArgs(SVar("name")),Seq(AM(LChoice(Seq(Call(SVar("sunit-create-input"),[CallNoArgs(SVar("in-term"))]),CallNoArgs(SVar("s"))),Seq(BA(CallNoArgs(SVar("print-failure")),NoAnnoList(Str("\"  strategy failed\""))),Fail)),Var("tmp")),Seq(AM(Call(SVar("sunit-create-output"),[CallNoArgs(SVar("out"))]),Var("tmp'")),LChoice(AM(Build(Var("tmp'")),Var("tmp")),Seq(Seq(BA(CallT(SVar("print-failure"),[],[NoAnnoList(Str("\"  result not equal : \""))]),Var("tmp")),BA(CallT(SVar("print-failure"),[],[NoAnnoList(Str("\"  expected         : \""))]),Var("tmp'"))),Fail))))])),SDef("apply-test",[DefaultVarDec("name"),DefaultVarDec("s"),DefaultVarDec("in-term")],Call(SVar("do-test"),[CallNoArgs(SVar("name")),LChoice(Seq(Call(SVar("sunit-create-input"),[CallNoArgs(SVar("in-term"))]),CallNoArgs(SVar("s"))),Seq(BA(CallNoArgs(SVar("print-failure")),NoAnnoList(Str("\"  strategy failed\""))),Fail))])),SDef("apply-and-check",[DefaultVarDec("name"),DefaultVarDec("s"),DefaultVarDec("in-term"),DefaultVarDec("check")],Call(SVar("do-test"),[CallNoArgs(SVar("name")),Seq(LChoice(Seq(Call(SVar("sunit-create-input"),[CallNoArgs(SVar("in-term"))]),CallNoArgs(SVar("s"))),Seq(BA(CallNoArgs(SVar("print-failure")),NoAnnoList(Str("\"  application failed\""))),Fail)),LChoice(CallNoArgs(SVar("check")),Seq(CallT(SVar("print-failure"),[],[NoAnnoList(Str("\"  check failed: \""))]),Fail)))])),SDef("apply-and-fail",[DefaultVarDec("name"),DefaultVarDec("s"),DefaultVarDec("in-term")],Call(SVar("apply-and-fail"),[CallNoArgs(SVar("name")),CallNoArgs(SVar("s")),CallNoArgs(SVar("in-term")),Build(NoAnnoList(Tuple([])))])),SDef("apply-and-fail",[DefaultVarDec("name"),DefaultVarDec("s"),DefaultVarDec("in-term"),DefaultVarDec("out")],Call(SVar("do-test"),[CallNoArgs(SVar("name")),LChoice(Seq(Call(SVar("sunit-create-input"),[CallNoArgs(SVar("in-term"))]),Not(CallNoArgs(SVar("s")))),Seq(BA(CallNoArgs(SVar("print-failure")),NoAnnoList(Str("\"  succeeded (should fail)\""))),Fail))])),SDef("apply-and-show",[DefaultVarDec("name"),DefaultVarDec("s"),DefaultVarDec("in-term")],Call(SVar("do-test"),[CallNoArgs(SVar("name")),Seq(LChoice(Seq(Call(SVar("sunit-create-input"),[CallNoArgs(SVar("in-term"))]),CallNoArgs(SVar("s"))),Seq(BA(CallNoArgs(SVar("print-failure")),NoAnnoList(Str("\"  strategy failed\""))),Fail)),BA(CallNoArgs(SVar("debug")),NoAnnoList(List([NoAnnoList(Str("\"  succeeded; result: \"")),RootApp(Id)]))))]))]),Strategies([SDefT("apply-test",[DefaultVarDec("s")],[DefaultVarDec("name"),DefaultVarDec("in-term"),DefaultVarDec("out")],Call(SVar("apply-test"),[Build(Var("name")),CallNoArgs(SVar("s")),Build(Var("in-term")),Build(Var("out"))])),SDefT("apply-test",[DefaultVarDec("s")],[DefaultVarDec("name"),DefaultVarDec("in-term")],Call(SVar("apply-test"),[Build(Var("name")),CallNoArgs(SVar("s")),Build(Var("in-term"))])),SDefT("apply-and-check",[DefaultVarDec("s")],[DefaultVarDec("name"),DefaultVarDec("in-term"),DefaultVarDec("check")],Call(SVar("apply-and-check"),[Build(Var("name")),CallNoArgs(SVar("s")),Build(Var("in-term")),Build(Var("check"))])),SDefT("apply-and-fail",[DefaultVarDec("s")],[DefaultVarDec("name"),DefaultVarDec("in-term")],Call(SVar("apply-and-fail"),[Build(Var("name")),CallNoArgs(SVar("s")),Build(Var("in-term"))])),SDefT("apply-and-fail",[DefaultVarDec("s")],[DefaultVarDec("name"),DefaultVarDec("in-term"),DefaultVarDec("out")],Call(SVar("apply-and-fail"),[Build(Var("name")),CallNoArgs(SVar("s")),Build(Var("in-term")),Build(Var("out"))])),SDefT("apply-and-show",[DefaultVarDec("s")],[DefaultVarDec("name"),DefaultVarDec("in-term")],Call(SVar("apply-and-show"),[Build(Var("name")),CallNoArgs(SVar("s")),Build(Var("in-term"))]))]),Strategies([SDef("sunit-create-input",[DefaultVarDec("s")],LChoice(CallNoArgs(SVar("s")),Seq(Call(SVar("say"),[Build(NoAnnoList(Str("\"error: input strategy for this test failed\"")))]),Fail))),SDef("sunit-create-output",[DefaultVarDec("s")],LChoice(CallNoArgs(SVar("s")),Seq(Call(SVar("say"),[Build(NoAnnoList(Str("\"error: output strategy for this test failed\"")))]),Fail))),SDef("do-test",[DefaultVarDec("nr"),DefaultVarDec("s")],Seq(Where(Seq(CallNoArgs(SVar("nr")),CallNoArgs(SVar("debug")))),LChoice(Seq(Where(CallNoArgs(SVar("s"))),CallNoArgs(SVar("record-success"))),CallNoArgs(SVar("record-failure"))))),SDef("testing",[DefaultVarDec("nr"),DefaultVarDec("s")],Call(SVar("do-test"),[CallNoArgs(SVar("nr")),LChoice(Seq(CallNoArgs(SVar("s")),Call(SVar("debug"),[Build(NoAnnoList(Str("\"  succeeded: \"")))])),Seq(Call(SVar("debug"),[Build(NoAnnoList(Str("\"  failed: \"")))]),Fail))])),SDefT("do-test",[DefaultVarDec("s")],[DefaultVarDec("nr")],Seq(Where(BA(CallNoArgs(SVar("debug")),Var("nr"))),LChoice(Seq(Where(CallNoArgs(SVar("s"))),CallNoArgs(SVar("record-success"))),CallNoArgs(SVar("record-failure")))))]),Strategies([SDefNoArgs("init-record",Build(NoAnnoList(Tuple([NoAnnoList(Int("0")),NoAnnoList(Int("0"))])))),SDefNoArgs("record-success",TupleCong(CallNoArgs(SVar("inc")),[Id])),SDefNoArgs("record-failure",TupleCong(Id,[CallNoArgs(SVar("inc"))])),SDefNoArgs("check-for-failures",TupleCong(Id,[IntCong("0")])),SDefNoArgs("report-test",TupleCong(Call(SVar("debug"),[Build(NoAnnoList(Str("\"successes: \"")))]),[Call(SVar("debug"),[Build(NoAnnoList(Str("\"failures: \"")))])])),SDefNoArgs("print-failure",Seq(CallNoArgs(SVar("sunit-failure-string")),CallNoArgs(SVar("debug")))),SDefT("print-failure",[],[DefaultVarDec("msg")],Call(SVar("debug"),[BA(CallNoArgs(SVar("sunit-failure-string")),Var("msg"))]))]),Strategies([SDefNoArgs("sunit-failure-string",IfThen(AM(BA(CallNoArgs(SVar("getenv")),NoAnnoList(Str("\"ENABLE_COLORS\""))),NoAnnoList(Str("\"true\""))),BA(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([RootApp(CallNoArgs(SVar("sunit-color-red"))),RootApp(Id),RootApp(CallNoArgs(SVar("sunit-color-plain")))]))))),SDefNoArgs("sunit-color-red",BA(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([App(CallNoArgs(SVar("implode-string")),NoAnnoList(List([NoAnnoList(Int("27"))]))),NoAnnoList(Str("\"[01;31m\""))])))),SDefNoArgs("sunit-color-plain",BA(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([App(CallNoArgs(SVar("implode-string")),NoAnnoList(List([NoAnnoList(Int("27"))]))),NoAnnoList(Str("\"[m\""))]))))])])
