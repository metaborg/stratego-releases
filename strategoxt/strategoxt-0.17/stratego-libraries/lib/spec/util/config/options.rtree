Module("util/config/options",[Imports([Import("system/io/char"),Import("system/io/term"),Import("system/io/dir"),Import("system/io/file"),Import("system/io/process"),Import("util/config/parse-options"),Import("util/config/common"),Import("util/config/verbose"),Import("util/config/keep"),Import("util/time"),Import("util/log"),Import("term/string")]),Strategies([SDef("io-wrap",[DefaultVarDec("s")],Call(SVar("io-wrap"),[Fail,CallNoArgs(SVar("s"))])),SDef("io-wrap",[DefaultVarDec("extra-opts"),DefaultVarDec("s")],Call(SVar("io-wrap"),[CallNoArgs(SVar("extra-opts")),CallNoArgs(SVar("system-usage")),CallNoArgs(SVar("system-about")),CallNoArgs(SVar("s"))])),SDef("io-wrap",[DefaultVarDec("extra-opts"),DefaultVarDec("usage"),DefaultVarDec("about"),DefaultVarDec("s")],Call(SVar("option-wrap"),[LChoice(CallNoArgs(SVar("extra-opts")),CallNoArgs(SVar("io-options"))),CallNoArgs(SVar("usage")),CallNoArgs(SVar("about")),Id,Call(SVar("io"),[CallNoArgs(SVar("s"))])])),SDef("output-wrap",[DefaultVarDec("s")],Call(SVar("output-wrap"),[Fail,CallNoArgs(SVar("s"))])),SDef("output-wrap",[DefaultVarDec("extra-opts"),DefaultVarDec("s")],Call(SVar("option-wrap"),[LChoice(CallNoArgs(SVar("extra-opts")),CallNoArgs(SVar("output-options"))),Call(SVar("output"),[CallNoArgs(SVar("s"))])])),SDef("input-wrap",[DefaultVarDec("s")],Call(SVar("input-wrap"),[Fail,CallNoArgs(SVar("s"))])),SDef("input-wrap",[DefaultVarDec("extra-opts"),DefaultVarDec("s")],Call(SVar("option-wrap"),[LChoice(CallNoArgs(SVar("extra-opts")),CallNoArgs(SVar("input-options"))),Call(SVar("input"),[CallNoArgs(SVar("s"))])]))]),Strategies([SDef("io",[DefaultVarDec("s")],Call(SVar("input"),[Call(SVar("output"),[CallNoArgs(SVar("s"))])])),SDef("output",[DefaultVarDec("s")],Seq(CallNoArgs(SVar("s")),Seq(Build(NoAnnoList(Tuple([RootApp(LChoice(BA(CallNoArgs(SVar("get-config")),NoAnnoList(Str("\"-o\""))),Build(NoAnnoList(Op("stdout",[]))))),RootApp(Id)]))),GuardedLChoice(Where(BA(CallNoArgs(SVar("get-config")),NoAnnoList(Str("\"-b\"")))),CallNoArgs(SVar("WriteToBinaryFile")),CallNoArgs(SVar("WriteToTextFile")))))),SDef("input",[DefaultVarDec("s")],Seq(LChoice(BA(CallNoArgs(SVar("get-config")),NoAnnoList(Str("\"-i\""))),Build(NoAnnoList(Op("stdin",[])))),Seq(CallNoArgs(SVar("ReadFromFile")),CallNoArgs(SVar("s")))))]),Strategies([SDef("io-stream-wrap",[DefaultVarDec("s")],Call(SVar("io-stream-wrap"),[Fail,CallNoArgs(SVar("s"))])),SDef("io-stream-wrap",[DefaultVarDec("extra-opts"),DefaultVarDec("s")],Call(SVar("io-stream-wrap"),[CallNoArgs(SVar("extra-opts")),CallNoArgs(SVar("system-usage")),CallNoArgs(SVar("system-about")),CallNoArgs(SVar("s"))])),SDef("io-stream-wrap",[DefaultVarDec("extra-opts"),DefaultVarDec("usage"),DefaultVarDec("about"),DefaultVarDec("s")],Call(SVar("option-wrap"),[LChoice(CallNoArgs(SVar("extra-opts")),CallNoArgs(SVar("io-options"))),CallNoArgs(SVar("usage")),CallNoArgs(SVar("about")),Id,Call(SVar("io-stream"),[CallNoArgs(SVar("s"))])])),SDef("io-stream",[DefaultVarDec("s")],Let([SDefNoArgs("open",LChoice(CallNoArgs(SVar("open-stream")),Seq(Match(NoAnnoList(Tuple([RootApp(Id),Wld]))),Seq(CallNoArgs(SVar("perror")),BA(CallNoArgs(SVar("exit")),NoAnnoList(Int("1")))))))],Seq(Assign(Var("fin"),App(GuardedLChoice(CallNoArgs(SVar("get-config")),BA(CallNoArgs(SVar("open")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Str("\"r\""))]))),CallNoArgs(SVar("stdin-stream"))),NoAnnoList(Str("\"-i\"")))),Seq(Assign(Var("fout"),App(GuardedLChoice(CallNoArgs(SVar("get-config")),BA(CallNoArgs(SVar("open")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Str("\"w\""))]))),CallNoArgs(SVar("stdout-stream"))),NoAnnoList(Str("\"-o\"")))),CondChoice(BA(CallNoArgs(SVar("s")),NoAnnoList(Tuple([Var("fin"),Var("fout")]))),Seq(Call(SVar("try"),[BA(CallNoArgs(SVar("fclose")),Var("fout"))]),Seq(Call(SVar("try"),[BA(CallNoArgs(SVar("fclose")),Var("fin"))]),CallNoArgs(SVar("report-success")))),Seq(AM(PrimNoArgs("\"SSL_stacktrace_get_all_frame_names\""),Var("trace")),Seq(Call(SVar("try"),[BA(CallNoArgs(SVar("fclose")),Var("fout"))]),Seq(Call(SVar("try"),[BA(CallNoArgs(SVar("fclose")),Var("fin"))]),Seq(Call(SVar("try"),[Seq(BA(CallNoArgs(SVar("get-config")),NoAnnoList(Str("\"-o\""))),CallNoArgs(SVar("remove-file")))]),BA(CallNoArgs(SVar("report-failure")),Var("trace")))))))))))]),Strategies([SDef("option-wrap",[DefaultVarDec("opts"),DefaultVarDec("s")],Call(SVar("option-wrap"),[CallNoArgs(SVar("opts")),CallNoArgs(SVar("system-usage")),Id,CallNoArgs(SVar("s"))])),SDef("option-wrap",[DefaultVarDec("opts"),DefaultVarDec("usage"),DefaultVarDec("announce"),DefaultVarDec("s")],Call(SVar("option-wrap"),[CallNoArgs(SVar("opts")),CallNoArgs(SVar("usage")),CallNoArgs(SVar("system-about")),CallNoArgs(SVar("announce")),CallNoArgs(SVar("s"))])),SDef("option-wrap",[DefaultVarDec("opts"),DefaultVarDec("usage"),DefaultVarDec("about"),DefaultVarDec("announce"),DefaultVarDec("s")],Seq(Call(SVar("parse-options"),[CallNoArgs(SVar("opts")),CallNoArgs(SVar("usage")),CallNoArgs(SVar("about"))]),Seq(CallNoArgs(SVar("announce")),LChoice(Seq(CallNoArgs(SVar("s")),CallNoArgs(SVar("report-success"))),Seq(PrimNoArgs("\"SSL_stacktrace_get_all_frame_names\""),CallNoArgs(SVar("report-failure")))))))]),Strategies([SDefNoArgs("io-options",Choice(CallNoArgs(SVar("input-option")),Choice(CallNoArgs(SVar("aterm-output-option")),CallNoArgs(SVar("general-options"))))),SDefNoArgs("input-options",Choice(CallNoArgs(SVar("input-option")),CallNoArgs(SVar("general-options")))),SDefNoArgs("output-options",Choice(CallNoArgs(SVar("aterm-output-option")),CallNoArgs(SVar("general-options")))),SDefNoArgs("general-options",Choice(CallNoArgs(SVar("verbose-option")),Choice(CallNoArgs(SVar("keep-option")),Choice(CallNoArgs(SVar("statistics-option")),CallNoArgs(SVar("aterm-lib-options")))))),SDefNoArgs("aterm-lib-options",Call(SVar("Option"),[CallT(SVar("string-starts-with"),[],[NoAnnoList(Str("\"-at-\""))]),Id,Fail])),SDefNoArgs("keep-option",Call(SVar("ArgOption"),[Choice(StrCong("\"-k\""),StrCong("\"--keep\"")),Where(BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Str("\"--keep\"")),RootApp(CallNoArgs(SVar("string-to-int")))])))),Build(NoAnnoList(Str("\"-k i | --keep i  Keep intermediates (default 0)\"")))])),SDefNoArgs("statistics-option",Call(SVar("ArgOption"),[StrCong("\"--statistics\""),Where(BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Str("\"--statistics\"")),RootApp(CallNoArgs(SVar("string-to-int")))])))),Build(NoAnnoList(Str("\"--statistics i   Print statistics (default 0 = none)\"")))])),SDefNoArgs("input-option",Call(SVar("ArgOption"),[Choice(StrCong("\"-i\""),StrCong("\"--input\"")),Where(BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Str("\"-i\"")),RootApp(Id)])))),Build(NoAnnoList(Str("\"-i f|--input f   Read input from f\"")))])),SDefNoArgs("output-option",Call(SVar("ArgOption"),[Choice(StrCong("\"-o\""),StrCong("\"--output\"")),Where(BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Str("\"-o\"")),RootApp(Id)])))),Build(NoAnnoList(Str("\"-o f|--output f  Write output to f\"")))])),SDefNoArgs("aterm-output-option",Choice(CallNoArgs(SVar("output-option")),Call(SVar("Option"),[StrCong("\"-b\""),Where(BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Str("\"-b\"")),NoAnnoList(Tuple([]))])))),Build(NoAnnoList(Str("\"-b               Write binary output\"")))]))),SDefNoArgs("verbose-option",Choice(Call(SVar("Option"),[Choice(StrCong("\"-S\""),StrCong("\"--silent\"")),Where(BA(CallNoArgs(SVar("set-verbosity")),NoAnnoList(Int("0")))),Build(NoAnnoList(Str("\"-S|--silent      Silent execution (same as --verbose 0)\"")))]),Call(SVar("ArgOption"),[StrCong("\"--verbose\""),Where(Seq(CallNoArgs(SVar("verbose-to-int")),CallNoArgs(SVar("set-verbosity")))),Build(NoAnnoList(Str("\"--verbose i      Verbosity level i (default 1)\n                    ( i as a number or as a verbosity descriptor:\n                      emergency, alert, critical, error, \n                      warning, notice, info, debug, vomit )\"")))])))]),Strategies([SDefNoArgs("verbose-to-int",LChoice(CallNoArgs(SVar("string-to-level")),CallNoArgs(SVar("string-to-int")))),SDef("need-help",[DefaultVarDec("u")],Seq(BA(CallNoArgs(SVar("get-config")),NoAnnoList(Str("\"--help\""))),CallNoArgs(SVar("u")))),SDef("if-not-silent",[DefaultVarDec("s")],LChoice(Test(AM(CallNoArgs(SVar("verbosity")),NoAnnoList(Int("0")))),CallNoArgs(SVar("s")))),SDefNoArgs("report-success",Seq(CallNoArgs(SVar("report-run-time")),BA(CallNoArgs(SVar("exit")),NoAnnoList(Int("0"))))),SDefNoArgs("report-failure",Call(SVar("report-failure"),[CallNoArgs(SVar("exit"))])),SDef("report-failure",[DefaultVarDec("exit")],Seq(Match(Var("stacktrace")),Seq(CallNoArgs(SVar("report-run-time")),Seq(BA(CallNoArgs(SVar("fprintnl")),NoAnnoList(Tuple([NoAnnoList(Op("stderr",[])),NoAnnoList(List([App(CallNoArgs(SVar("log-src")),NoAnnoList(Tuple([]))),NoAnnoList(Str("\": rewriting failed, trace:\""))]))]))),Seq(BA(Seq(CallNoArgs(SVar("reverse")),Call(SVar("map"),[BA(CallNoArgs(SVar("fprintnl")),NoAnnoList(Tuple([NoAnnoList(Op("stderr",[])),NoAnnoList(List([NoAnnoList(Str("\"\\t\"")),RootApp(Id)]))])))])),Var("stacktrace")),BA(CallNoArgs(SVar("exit")),NoAnnoList(Int("1")))))))),SDefNoArgs("report-failure-no-trace",Call(SVar("report-failure-no-trace"),[CallNoArgs(SVar("exit"))])),SDef("report-failure-no-trace",[DefaultVarDec("exit")],Seq(BA(CallNoArgs(SVar("fprintnl")),NoAnnoList(Tuple([NoAnnoList(Op("stderr",[])),NoAnnoList(List([App(CallNoArgs(SVar("log-src")),NoAnnoList(Tuple([]))),NoAnnoList(Str("\": rewriting failed\""))]))]))),BA(CallNoArgs(SVar("exit")),NoAnnoList(Int("1"))))),SDefNoArgs("whoami",BA(CallNoArgs(SVar("get-config")),NoAnnoList(Str("\"program\""))))])])
