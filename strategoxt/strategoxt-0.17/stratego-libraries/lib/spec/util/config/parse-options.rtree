Module("util/config/parse-options",[Imports([Import("util/config/common")]),Signature([Sorts([SortNoArgs("Option")]),Constructors([OpDecl("Program",FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("Option")))),OpDecl("Undefined",FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("Option"))))])]),Strategies([SDefNoArgs("system-usage-switch",Call(SVar("Option"),[Choice(StrCong("\"--help\""),Choice(StrCong("\"-h\""),StrCong("\"-?\""))),BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Str("\"--help\"")),NoAnnoList(Tuple([]))]))),Build(NoAnnoList(Str("\"-h|-?|--help     Display usage information\"")))])),SDefNoArgs("system-about-switch",Choice(Call(SVar("Option"),[StrCong("\"--about\""),BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Str("\"--about\"")),NoAnnoList(Tuple([]))]))),Build(NoAnnoList(Str("\"--about          Display information about this program\"")))]),Call(SVar("Option"),[StrCong("\"--version\""),Where(Seq(BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Str("\"--about\"")),NoAnnoList(Tuple([]))]))),BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Str("\"-v\"")),NoAnnoList(Tuple([]))]))))),Build(NoAnnoList(Str("\"--version        Same as --about\"")))])))]),Strategies([SDef("parse-options",[DefaultVarDec("s")],Call(SVar("parse-options"),[CallNoArgs(SVar("s")),CallNoArgs(SVar("system-usage")),CallNoArgs(SVar("system-about"))])),SDef("parse-options",[DefaultVarDec("s"),DefaultVarDec("usage"),DefaultVarDec("about")],Seq(Where(BA(CallNoArgs(SVar("table-put")),NoAnnoList(Tuple([NoAnnoList(Str("\"usage-table\"")),NoAnnoList(Str("\"usage\"")),NoAnnoList(List([]))])))),Seq(Call(SVar("parse-options'"),[LChoice(CallNoArgs(SVar("s")),LChoice(CallNoArgs(SVar("system-usage-switch")),CallNoArgs(SVar("system-about-switch"))))]),Seq(Call(SVar("try"),[LChoice(Seq(Where(BA(CallNoArgs(SVar("get-config")),NoAnnoList(Str("\"--help\"")))),Seq(CallNoArgs(SVar("usage")),BA(CallNoArgs(SVar("exit")),NoAnnoList(Int("0"))))),LChoice(Seq(Where(BA(CallNoArgs(SVar("get-config")),NoAnnoList(Str("\"--about\"")))),Seq(CallNoArgs(SVar("about")),BA(CallNoArgs(SVar("exit")),NoAnnoList(Int("0"))))),Seq(Call(SVar("fetch"),[Call(SVar("Undefined"),[Match(Var("option"))])]),Seq(BA(CallNoArgs(SVar("fprintnl")),NoAnnoList(Tuple([NoAnnoList(Op("stderr",[])),NoAnnoList(List([NoAnnoList(Str("\"Invalid option: \"")),Var("option")]))]))),Seq(CallNoArgs(SVar("usage")),BA(CallNoArgs(SVar("exit")),NoAnnoList(Int("1"))))))))]),Where(BA(CallNoArgs(SVar("table-destroy")),NoAnnoList(Str("\"usage-table\"")))))))),SDef("parse-options'",[DefaultVarDec("s")],Seq(Match(NoAnnoList(ListTail([Var("program")],Var("args")))),Seq(Where(BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Str("\"program\"")),Var("program")])))),Seq(Where(Seq(Id,Seq(Call(SVar("try"),[BA(CallNoArgs(SVar("s")),NoAnnoList(Str("\"register-usage-info\"")))]),Call(SVar("try"),[BA(CallNoArgs(SVar("s")),NoAnnoList(Tuple([NoAnnoList(Str("\"handle-init-action\"")),Var("args")])))])))),Seq(ListCong([Build(NoAnnoList(Op("Program",[RootApp(Id)])))],Rec("x",LChoice(Choice(ListCongNoTail([]),Seq(CallNoArgs(SVar("s")),ListCong([Id],CallNoArgs(SVar("x"))))),CallNoArgs(SVar("UndefinedOption"))))),Where(Seq(Id,Seq(Call(SVar("try"),[BA(CallNoArgs(SVar("s")),NoAnnoList(Tuple([NoAnnoList(Str("\"handle-default-action\"")),Var("args")])))]),Call(SVar("try"),[BA(CallNoArgs(SVar("s")),NoAnnoList(Tuple([NoAnnoList(Str("\"handle-check-action\"")),Var("args")])))])))))))))]),Strategies([SDef("register-usage",[DefaultVarDec("s")],Seq(BA(CallNoArgs(SVar("table-push")),NoAnnoList(Tuple([NoAnnoList(Str("\"usage-table\"")),NoAnnoList(Str("\"usage\"")),App(CallNoArgs(SVar("s")),NoAnnoList(Tuple([])))]))),Fail)),SDefNoArgs("system-usage",LChoice(CallNoArgs(SVar("override-system-usage")),CallNoArgs(SVar("default-system-usage")))),SDefNoArgs("system-about",LChoice(CallNoArgs(SVar("override-system-about")),CallNoArgs(SVar("default-system-about")))),SDef("short-description",[DefaultVarDec("s")],Fail),SDef("long-description",[DefaultVarDec("s")],Fail),SDefNoArgs("override-system-usage",Fail),SDefNoArgs("override-system-about",Fail),SDefNoArgs("default-system-usage",Seq(Where(LChoice(AM(BA(CallNoArgs(SVar("get-config")),NoAnnoList(Str("\"program\""))),Var("p")),Call(SVar("option-defined"),[Call(SVar("Program"),[Match(Var("p"))])]))),Call(SVar("default-system-usage"),[Call(SVar("short-description"),[Build(Var("p"))]),Call(SVar("long-description"),[Build(Var("p"))])]))),SDef("default-system-usage",[DefaultVarDec("short"),DefaultVarDec("long")],Seq(LChoice(AM(BA(CallNoArgs(SVar("get-config")),NoAnnoList(Str("\"program\""))),Var("p")),Call(SVar("option-defined"),[Call(SVar("Program"),[Match(Var("p"))])])),Seq(Call(SVar("try"),[Seq(CallNoArgs(SVar("short")),CallNoArgs(SVar("echo")))]),Seq(BA(CallNoArgs(SVar("echo")),NoAnnoList(Str("\"\\nOptions:\""))),Seq(BA(Seq(CallNoArgs(SVar("table-get")),CallNoArgs(SVar("reverse"))),NoAnnoList(Tuple([NoAnnoList(Str("\"usage-table\"")),NoAnnoList(Str("\"usage\""))]))),Seq(Call(SVar("map"),[BA(CallNoArgs(SVar("echo")),NoAnnoList(List([NoAnnoList(Str("\"   \"")),RootApp(Id)])))]),Seq(BA(CallNoArgs(SVar("echo")),NoAnnoList(Str("\"\\nDescription:\""))),Call(SVar("try"),[Seq(CallNoArgs(SVar("long")),Seq(IfThen(CallNoArgs(SVar("is-string")),Build(NoAnnoList(List([RootApp(Id)])))),CallNoArgs(SVar("echo"))))])))))))),SDefNoArgs("default-system-about",BA(Seq(CallNoArgs(SVar("get-config")),CallNoArgs(SVar("echo"))),NoAnnoList(Str("\"program\""))))]),Rules([RDef("Option",[DefaultVarDec("is-flag"),DefaultVarDec("label"),DefaultVarDec("s")],Rule(NoAnnoList(ListTail([Var("flag")],Var("rest"))),NoAnnoList(ListTail([App(CallNoArgs(SVar("label")),NoAnnoList(Tuple([])))],Var("rest"))),BA(CallNoArgs(SVar("is-flag")),Var("flag")))),SDef("Option",[DefaultVarDec("is-flag"),DefaultVarDec("label")],Call(SVar("Option"),[CallNoArgs(SVar("is-flag")),CallNoArgs(SVar("label")),Build(NoAnnoList(Str("\"\"")))])),SDef("Option",[DefaultVarDec("is-flag"),DefaultVarDec("label"),DefaultVarDec("s")],Seq(StrCong("\"register-usage-info\""),Call(SVar("register-usage"),[CallNoArgs(SVar("s"))])))]),Rules([RDef("ArgOption",[DefaultVarDec("is-flag"),DefaultVarDec("label"),DefaultVarDec("s")],Rule(NoAnnoList(ListTail([Var("flag"),Var("arg")],Var("rest"))),NoAnnoList(ListTail([App(CallNoArgs(SVar("label")),Var("arg"))],Var("rest"))),BA(CallNoArgs(SVar("is-flag")),Var("flag")))),SDef("ArgOption",[DefaultVarDec("is-flag"),DefaultVarDec("label")],Call(SVar("ArgOption"),[CallNoArgs(SVar("is-flag")),CallNoArgs(SVar("label")),Build(NoAnnoList(Str("\"\"")))])),SDef("ArgOption",[DefaultVarDec("is-flag"),DefaultVarDec("label"),DefaultVarDec("s")],Seq(StrCong("\"register-usage-info\""),Call(SVar("register-usage"),[CallNoArgs(SVar("s"))])))]),Rules([SDef("Arg2Option",[DefaultVarDec("is-flag"),DefaultVarDec("label")],Call(SVar("Arg2Option"),[CallNoArgs(SVar("is-flag")),CallNoArgs(SVar("label")),Build(NoAnnoList(Str("\"\"")))])),RDef("Arg2Option",[DefaultVarDec("is-flag"),DefaultVarDec("label"),DefaultVarDec("s")],Rule(NoAnnoList(ListTail([Var("flag"),Var("arg1"),Var("arg2")],Var("rest"))),NoAnnoList(ListTail([App(CallNoArgs(SVar("label")),NoAnnoList(Tuple([Var("arg1"),Var("arg2")])))],Var("rest"))),BA(CallNoArgs(SVar("is-flag")),Var("flag")))),SDef("Arg2Option",[DefaultVarDec("is-flag"),DefaultVarDec("label"),DefaultVarDec("s")],Seq(StrCong("\"register-usage-info\""),Call(SVar("register-usage"),[CallNoArgs(SVar("s"))])))]),Rules([RDefNoArgs("UndefinedOption",RuleNoCond(NoAnnoList(ListTail([Var("x")],Var("rest"))),NoAnnoList(ListTail([NoAnnoList(Op("Undefined",[Var("x")]))],Var("rest")))))]),Strategies([SDef("option-defined",[DefaultVarDec("s")],Call(SVar("fetch"),[CallNoArgs(SVar("s"))]))]),Rules([RDefT("Option",[DefaultVarDec("is-flag"),DefaultVarDec("handlers")],[DefaultVarDec("msg")],Rule(NoAnnoList(ListTail([Var("flag")],Var("rest"))),NoAnnoList(ListTail([App(CallNoArgs(SVar("handlers")),NoAnnoList(Tuple([NoAnnoList(Str("\"handle-user-action\"")),Var("flag")])))],Var("rest"))),BA(CallNoArgs(SVar("is-flag")),Var("flag")))),SDefT("Option",[DefaultVarDec("is-flag"),DefaultVarDec("handlers")],[DefaultVarDec("msg")],Call(SVar("OptionHandlerHelper"),[CallNoArgs(SVar("is-flag")),CallNoArgs(SVar("handlers"))]))]),Rules([RDefT("ArgOption",[DefaultVarDec("is-flag"),DefaultVarDec("handlers")],[DefaultVarDec("msg")],Rule(NoAnnoList(ListTail([Var("flag"),Var("arg")],Var("rest"))),NoAnnoList(ListTail([App(CallNoArgs(SVar("handlers")),NoAnnoList(Tuple([NoAnnoList(Str("\"handle-user-action\"")),Var("arg")])))],Var("rest"))),BA(CallNoArgs(SVar("is-flag")),Var("flag")))),SDefT("ArgOption",[DefaultVarDec("is-flag"),DefaultVarDec("handlers")],[DefaultVarDec("msg")],Call(SVar("OptionHandlerHelper"),[CallNoArgs(SVar("is-flag")),CallNoArgs(SVar("handlers"))]))]),Strategies([SDef("OptionHandlerHelper",[DefaultVarDec("is-flag"),DefaultVarDec("handlers")],Seq(Match(NoAnnoList(Tuple([NoAnnoList(Str("\"handle-default-action\"")),Var("args")]))),Seq(IfThen(Not(BA(Call(SVar("fetch"),[CallNoArgs(SVar("is-flag"))]),Var("args"))),CallNoArgs(SVar("handlers"))),Fail))),SDef("OptionHandlerHelper",[DefaultVarDec("is-flag"),DefaultVarDec("handlers")],Seq(Match(NoAnnoList(Tuple([Var("action"),Wld]))),Seq(Where(Not(AM(Build(Var("action")),NoAnnoList(Str("\"handle-default-action\""))))),Seq(CallNoArgs(SVar("handlers")),Fail)))),SDef("OptionHandler",[DefaultVarDec("user")],Call(SVar("OptionHandler"),[Id,CallNoArgs(SVar("user")),Id])),SDef("OptionHandler",[DefaultVarDec("init"),DefaultVarDec("user"),DefaultVarDec("default")],Seq(Match(NoAnnoList(Tuple([NoAnnoList(Str("\"handle-init-action\"")),Var("args")]))),BA(CallNoArgs(SVar("init")),Var("args")))),SDef("OptionHandler",[DefaultVarDec("init"),DefaultVarDec("user"),DefaultVarDec("default")],Seq(Match(NoAnnoList(Tuple([NoAnnoList(Str("\"handle-user-action\"")),Var("arg")]))),BA(CallNoArgs(SVar("user")),Var("arg")))),SDef("OptionHandler",[DefaultVarDec("init"),DefaultVarDec("user"),DefaultVarDec("default")],Seq(Match(NoAnnoList(Tuple([NoAnnoList(Str("\"handle-default-action\"")),Var("args")]))),BA(CallNoArgs(SVar("default")),Var("args"))))]),Strategies([SDefT("OptionCheck",[DefaultVarDec("exit"),DefaultVarDec("checks")],[DefaultVarDec("msg")],Seq(Match(NoAnnoList(Tuple([NoAnnoList(Str("\"handle-check-action\"")),RootApp(Id)]))),Seq(LChoice(CallNoArgs(SVar("checks")),Seq(BA(CallNoArgs(SVar("fprintnl")),NoAnnoList(Tuple([NoAnnoList(Op("stderr",[])),NoAnnoList(List([Var("msg")]))]))),CallNoArgs(SVar("exit")))),Fail))),SDef("OptionNotCombinedCheck",[DefaultVarDec("is-flag"),DefaultVarDec("other-flags")],Where(IfThen(Call(SVar("fetch"),[CallNoArgs(SVar("is-flag"))]),IfThen(Call(SVar("fetch"),[CallNoArgs(SVar("other-flags"))]),Fail)))),SDef("OptionZeroOrOneCheck",[DefaultVarDec("is-flag")],Where(Seq(Call(SVar("filter"),[CallNoArgs(SVar("is-flag"))]),IfThen(Match(NoAnnoList(ListTail([Wld,Wld],Wld))),Fail)))),SDef("OptionOneCheck",[DefaultVarDec("is-flag")],Where(Seq(Call(SVar("filter"),[CallNoArgs(SVar("is-flag"))]),IfThen(Choice(Match(NoAnnoList(List([]))),Match(NoAnnoList(ListTail([Wld,Wld],Wld)))),Fail)))),SDef("OptionOneOrMoreCheck",[DefaultVarDec("is-flag")],Where(Seq(Call(SVar("filter"),[CallNoArgs(SVar("is-flag"))]),IfThen(Match(NoAnnoList(List([]))),Fail))))])])
