Module("stratego/gpp/Util",[Strategies([SDefT("gpp-topdown-fputs",[],[DefaultVarDec("stream")],Seq(Where(Assign(NoAnnoList(Op("Stream",[Var("pointer")])),Var("stream"))),Call(SVar("topdown"),[Call(SVar("try"),[Seq(CallNoArgs(SVar("is-string")),Where(CallT(SVar("gpp-fputs"),[],[Var("pointer")])))])]))),SDefT("gpp-fputs",[],[DefaultVarDec("stream")],Seq(Match(Var("str")),Prim("\"SSL_fputs\"",[Var("str"),Var("stream")])))]),Strategies([SDefNoArgs("gpp-flat-list",Call(SVar("gpp-flat-list"),[Build(NoAnnoList(List([])))])),SDef("gpp-flat-list",[DefaultVarDec("cont")],Seq(Match(NoAnnoList(List([]))),CallNoArgs(SVar("cont")))),SDef("gpp-flat-list",[DefaultVarDec("cont")],Seq(Match(NoAnnoList(ListTail([Var("hd")],Var("tl")))),CondChoice(AM(Build(Var("hd")),NoAnnoList(List([]))),Build(NoAnnoList(ListTail([NoAnnoList(List([]))],App(Call(SVar("gpp-flat-list"),[CallNoArgs(SVar("cont"))]),Var("tl"))))),CondChoice(AM(Build(Var("hd")),NoAnnoList(ListTail([Wld],Wld))),BA(Call(SVar("gpp-flat-list"),[BA(Call(SVar("gpp-flat-list"),[CallNoArgs(SVar("cont"))]),Var("tl"))]),Var("hd")),Build(NoAnnoList(ListTail([Var("hd")],App(Call(SVar("gpp-flat-list"),[CallNoArgs(SVar("cont"))]),Var("tl")))))))))]),Strategies([SDefNoArgs("gpp-hs-length",LChoice(CallT(SVar("gpp-SOpt-value"),[],[NoAnnoList(Op("HS",[]))]),Build(NoAnnoList(Int("1"))))),SDefNoArgs("gpp-vs-length",LChoice(CallT(SVar("gpp-SOpt-value"),[],[NoAnnoList(Op("VS",[]))]),Build(NoAnnoList(Int("0"))))),SDefNoArgs("gpp-is-length",LChoice(CallT(SVar("gpp-SOpt-value"),[],[NoAnnoList(Op("IS",[]))]),Build(NoAnnoList(Int("0"))))),SDefT("gpp-SOpt-value",[],[DefaultVarDec("opt")],Seq(Call(SVar("fetch"),[Match(NoAnnoList(Op("SOpt",[Var("opt"),Var("value")])))]),BA(CallNoArgs(SVar("string-to-int")),Var("value")))),RDefNoArgs("gpp-SOpts-of-alignment",RuleNoCond(NoAnnoList(Op("AL",[Var("sopts")])),Var("sopts"))),RDefNoArgs("gpp-SOpts-of-alignment",RuleNoCond(NoAnnoList(Op("AR",[Var("sopts")])),Var("sopts"))),RDefNoArgs("gpp-SOpts-of-alignment",RuleNoCond(NoAnnoList(Op("AC",[Var("sopts")])),Var("sopts"))),SDefNoArgs("gpp-construct-rows",Seq(Call(SVar("split"),[Id,Build(NoAnnoList(List([])))]),Seq(Rec("x",Scope(["a","b","xs","ys"],LChoice(Seq(Match(NoAnnoList(Tuple([NoAnnoList(List([])),Var("xs")]))),Build(NoAnnoList(List([NoAnnoList(Op("R",[NoAnnoList(List([])),App(CallNoArgs(SVar("reverse")),Var("xs"))]))])))),LChoice(Seq(Match(NoAnnoList(Tuple([NoAnnoList(ListTail([NoAnnoList(Op("R",[Var("a"),Var("b")]))],Var("xs"))),Var("ys")]))),Build(NoAnnoList(ListTail([NoAnnoList(Op("R",[NoAnnoList(List([])),App(CallNoArgs(SVar("reverse")),Var("ys"))])),NoAnnoList(Op("R",[Var("a"),Var("b")]))],App(CallNoArgs(SVar("x")),NoAnnoList(Tuple([Var("xs"),NoAnnoList(List([]))]))))))),Seq(Match(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("a")],Var("xs"))),Var("ys")]))),BA(CallNoArgs(SVar("x")),NoAnnoList(Tuple([Var("xs"),NoAnnoList(ListTail([Var("a")],Var("ys")))])))))))),Call(SVar("filter"),[Not(Call(SVar("R"),[Id,ListCongNoTail([])]))])))),SDefT("gpp-rel-string-length",[],[DefaultVarDec("xpos")],Seq(AM(CallNoArgs(SVar("explode-string")),Var("chars")),CondChoice(Call(SVar("at-suffix"),[Match(NoAnnoList(ListTail([NoAnnoList(Char("'\\n'"))],Var("tail"))))]),BA(CallNoArgs(SVar("subt")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("tail")),Var("xpos")]))),BA(CallNoArgs(SVar("length")),Var("chars")))))])])
