/**
 * Tests for the Stratego SGLR Library.
 *
 * @author  Martin Bravenboer <martin.bravenboer@gmail.com>
 */
module stratego-sglr-tests
imports
  libstratego-lib
  libstratego-xtc
  libstratego-sglr
  ExpId
  ExpInt
  ConcreteSyntax
  error-support
  KernelStartSymbol

strategies

  main-stratego-sglr-tests =
    test-suite(!"Stratego SGLR Library",
    id
    ; open-close-tests
    ; simple-parse-tests
    ; advanced-parse-tests
    ; kernel-start-symbol
    ; filter-tests
    ; config-tests
    ; error-reporting-tests
    ; implode-tests
    ; implode-tests-custom
    ; implode-tests-concrete
    ; implode-tests-concrete-yield
    ; implode-tests-conc
    ; implode-tests-ast-attributes    
    ; implode-tests-lexical    
    ; asfix2me-tests
    ; asfix-anno-position-info-tests
    ; asfix-anno-location-tests
    )

  open-close-tests = id
    ; apply-test(!"Open and close a parse table"
      , open-parse-table; ?ParseTable(_); close-parse-table
      , <ReadFromFile> "ExpInt.tbl"
      )
    ; apply-and-fail(!"Opening a non-parse table should fail graciously."
      , open-parse-table
      , !1
      )

  simple-parse-tests =
      where(
        <ReadFromFile> "ExpInt.tbl"; open-parse-table => tbl
      ; <ReadFromFile> "ExpIntAmb.tbl"; open-parse-table => ambtbl
      )

    ; apply-and-check(!"Parse a simple expression"
      , parse-string-pt(|tbl)
      , !"1 + 1"
      , is-parse-tree
      )

    ; apply-and-check(!"Parse a simple expression, second time."
      , parse-string-pt(|tbl)
      , !"2 + 3"
      , is-parse-tree
      )

    ; apply-test(!"Parse and implode a simple expression"
      , parse-string(|tbl)
      , !"4 + 5"
      , !Plus(Int("4"), Int("5"))
      )

    ; apply-test(!"A succesful parse must not result in a parse error."
      , parse-string(|tbl)
        ; not(get-parse-error)
      , !"4 + 5"
      , !Plus(Int("4"), Int("5"))
      )

    ; apply-and-check(!"A parse error must result in a parse error."
      , not(parse-string(|tbl))
        ; get-parse-error
      , !"4 +"
      , ?error(_, _)
      )

    ; apply-test(!"Test that the parse error is removed if there is a succesful parse."
      , where(
          not(<parse-string(|tbl)> "4 +")
          ; get-parse-error
        )
        ; parse-string(|tbl)
        ; not(get-parse-error)
      , !"4 + 5"
      , !Plus(Int("4"), Int("5"))
      )

    ; apply-and-check(!"Parse an ambiguous string"
      , parse-string(|ambtbl)
      , !"4 + 5 + 6"
      , ?amb(<id>)
        ; ?[_, _]
        ; fetch(?Plus(Plus(Int("4"), Int("5")), Int("6")))
        ; fetch(?Plus(Int("4"), Plus(Int("5"), Int("6"))))
      )

    ; apply-and-check(!"Parse an ambiguous string result in an error with -A"
      , set-ambiguity-is-error(true)
        ; not(parse-string(|ambtbl))
        ; get-parse-error
      , !"4 + 5 + 6"
      , ?error(_, _)
      )

    ; set-default-sglr-config

    ; {stream:
        apply-test(!"Parse a simple expression from a stream."
        , <fopen> (<id>, "r") => stream
          ; parse-stream(|tbl)
          ; where(<fclose> stream)
        , !"test.exp"
        , !Plus(Int("1"), Int("2"))
        )
      }

    ; {stream:
        apply-and-check(!"Parse a simple invalid expression from a stream."
        , <fopen> (<id>, "r") => stream
          ; not(parse-stream(|tbl))
          ; get-parse-error
          ; where(<fclose> stream)
        , !"test-error.exp"
        , ?error(_, _)
        )
      }

    ; apply-test(!"Parse a simple expression from a file."
      , parse-file(|tbl)
      , !"test.exp"
      , !Plus(Int("1"), Int("2"))
      )

    ; apply-and-check(!"Parse a simple invalid expression from a file."
      , not(parse-file(|tbl))
        ; get-parse-error
      , !"test-error.exp"
      , ?error(_, _)
      )

    ; where(
        <close-parse-table> tbl
      ; <close-parse-table> ambtbl
      )


  advanced-parse-tests =
    where(
      <ReadFromFile> "ExpId.tbl"  => fid
    ; <ReadFromFile> "ExpInt.tbl" => fint
    )

    ; {tblint, tblid:
        apply-test(!"Parse two expressions with same parse table"
        ,   where(<open-parse-table> fint => tblint)
          ; (parse-string(|tblint), parse-string(|tblint))
          ; where(<close-parse-table> tblint)
        , !("1 + 2", "3 + 4 ")
        , !(Plus(Int("1"), Int("2")), Plus(Int("3"), Int("4")))
        )
      }

    ; {tblint, tblid:
        apply-test(!"Interleave parsing of with two different parse tables"
        ,   where(<open-parse-table> fint => tblint)
          ; where(<open-parse-table> fid  => tblid)
          ; ( parse-string(|tblint)
            , parse-string(|tblid)
            , parse-string(|tblint)
            , parse-string(|tblid)
            )
          ; where(<close-parse-table> tblint)
          ; where(<close-parse-table> tblid)
        , !("1 + 2", "a + b ", "3 + 4", "c + d")
        , !( Plus(Int("1"), Int("2"))
           , Plus(Var("a"), Var("b"))
           , Plus(Int("3"), Int("4"))
           , Plus(Var("c"), Var("d"))
           )
        )
      }

  kernel-start-symbol =
      where(
        <ReadFromFile> "KernelStartSymbol.tbl"; open-parse-table => tbl
      )

    ; apply-test(!"Parse a kernel start symbol"
      , parse-string(|tbl)
      , !"   " // 3 spaces
      , !InlineHTML([32,32,32])
      )
    ; apply-test(!"Parse a kernel start symbol"
      , parse-string(|tbl, "InlineHTML")
      , !"   " // 3 spaces
      , !InlineHTML([32,32,32])
      )

    ; apply-test(!"Parse a kernel start symbol"
      , parse-string(|tbl, "InlineHTML")
      , !"  \n "
      , !InlineHTML([32,32,10,32])
      )

    ; apply-test(!"Parse a kernel start symbol"
      , parse-string(|tbl, "Word")
      , !"abc"
      , !Word([97,98,99])
      )

    ; apply-and-check(!"Parse a kernel start symbol"
      , parse-string(|tbl)
      , !"abc"
      , ?amb(<id>)
        ; ?[_, _]
        ; fetch(?Word([97,98,99]))
        ; fetch(?InlineHTML([97,98,99]))
      )

    ; apply-test(!"Parse a kernel start symbol"
      , parse-string(|tbl, "InlineHTML")
      , !"abc"
      , !InlineHTML([97,98,99])
      )

    ; where(
        <close-parse-table> tbl
      )

  filter-tests = id

    ; apply-test(!"Check that the eagerness filter is disabled by default"
      , set-default-filters
        ; not(get-filter-eagerness)
      , !()
      , !()
      )

    ; apply-test(!"Check that the eagerness filter can be enabled"
      , set-filter-eagerness(true)
        ; get-filter-eagerness
      , !()
      , !()
      )

    ; set-default-sglr-config

    ; apply-test(!"Check that the injection count filter is disabled by default"
      , set-default-filters
        ; not(get-filter-injection-count)
      , !()
      , !()
      )

    ; apply-test(!"Check that the injection count filter can be enabled"
      , set-filter-injection-count(true)
        ; get-filter-injection-count
      , !()
      , !()
      )

    ; set-default-sglr-config

    ; apply-test(!"Check that the direct eagerness filter is enabled by default"
      , set-default-filters
        ; get-filter-direct-eagerness
      , !()
      , !()
      )

    ; apply-test(!"Check that the direct eagerness filter can be disabled"
      , set-filter-direct-eagerness(false)
        ; not(get-filter-direct-eagerness)
      , !()
      , !()
      )

    ; set-default-sglr-config

    ; apply-test(!"Check that the priority filter is enabled by default"
      , set-default-filters
        ; get-filter-priority
      , !()
      , !()
      )

    ; apply-test(!"Check that the priority filter can be disabled"
      , set-filter-priority(false)
        ; not(get-filter-priority)
      , !()
      , !()
      )

    ; set-default-sglr-config

    ; apply-test(!"Check that the reject filter is enabled by default"
      , set-default-filters
        ; get-filter-reject 
      , !()
      , !()
      )

    ; apply-test(!"Check that the reject filter can be disabled"
      , set-filter-reject(false)
        ; not(get-filter-reject)
      , !()
      , !()
      )

  config-tests = id

    ; set-default-sglr-config

    ; apply-test(!"Check that ambiguities are not treated as errors by default"
      , not(get-ambiguity-is-error)
      , !()
      , !()
      )

    ; apply-test(!"Check that the ambiguity errors can be enabled"
      , set-ambiguity-is-error(true)
        ; get-ambiguity-is-error
      , !()
      , !()
      )

    ; set-default-sglr-config

  error-reporting-tests =
      where(
        <ReadFromFile> "ExpInt.tbl"; open-parse-table => tbl
      ; <ReadFromFile> "ExpIntAmb.tbl"; open-parse-table => ambtbl
      )

    ; {error :
        apply-test(!"Test the reporting of a parse error."
        , not(parse-string(|tbl))
          ; where(get-parse-error => error)
          ; report-error(|error)
          ; !()
        , !"4 +"
        , !()
        )
      }

    ; {error :
        apply-test(!"Test the reporting of a parse error."
        , not(parse-string(|tbl))
          ; where(get-parse-error => error)
          ; !FILE("test-error.exp")
          ; report-error(|error)
          ; !()
        , !"4 +"
        , !()
        )
      }

    ; {error :
        apply-test(!"Test the reporting of a parse error from a file."
        , not(parse-file(|tbl))
          ; where(get-parse-error => error)
          ; !FILE("test-error.exp")
          ; report-error(|error)
          ; !()
        , !"test-error.exp"
        , !()
        )
      }

    ; where(<close-parse-table> tbl)

/**
 * Position info
 */
strategies

  asfix-anno-position-info-tests =
      where(
        <ReadFromFile> "ExpInt.tbl"; open-parse-table => tbl
      )

    ; apply-test(!"Position info for a simple expression"
      , parse-string-pt(|tbl)
        ; asfix-anno-position-info(|"")
        ; implode-asfix
        ; strip-non-string-annos
      , !"1 + 2"
      , !Plus(
           Int("1"{[pos-info(),area-in-file("",area(1,0,1,1,0,1))]})
         , Int("2"{[pos-info(),area-in-file("",area(1,4,1,5,4,1))]})
         )
      )

    ; apply-test(!"Position info for a simple expression"
      , parse-string-pt(|tbl)
        ; asfix-anno-position-info(|"")
        ; implode-asfix
        ; strip-non-string-annos
      , !"1 + 234"
      , !Plus(
           Int("1"{[pos-info(),area-in-file("",area(1,0,1,1,0,1))]})
         , Int("234"{[pos-info(),area-in-file("",area(1,4,1,7,4,3))]})
         )
      )

    ; where(
        <close-parse-table> tbl
      )

    /* position-info produces SEGV on amb
    ; where(
        <ReadFromFile> "ExpIntAmb.tbl"; open-parse-table => ambtbl
      )


    ; apply-and-check(!"Position info for a simple ambiguous expression"
      , parse-string-pt(|ambtbl)
        ; asfix-anno-position-info(|"")
        ; implode-asfix
        ; strip-non-string-annos

      , !"1 + 2 + 3"
      , ?amb(<id>)
        ; fetch(
            ?Plus(
              Int("1"{[pos-info(),area-in-file("",area(1,0,1,1,0,1))]})
            , Plus(
                Int("2"{[pos-info(),area-in-file("",area(1,4,1,5,4,1))]})
              , Int("3"{[pos-info(),area-in-file("",area(1,8,1,9,8,1))]})
              )
            )
         )
      )

    ; where(
        <close-parse-table> ambtbl
      )
    */

  strip-non-string-annos =
    topdown(if not(is-string) then rm-annotations end)

/**
 * Location annotations
 */
strategies

  asfix-anno-location-tests =
      where(
        <ReadFromFile> "ExpInt.tbl"; open-parse-table => tbl
      )

    ; asfix-anno-location-test(|"Location of a simple expression", tbl
      , "1 + 2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(1,5,1,6)}){Location(1,5,1,6)}
        ){Location(1,1,1,6)}
      )

    ; asfix-anno-location-test(|"Location with newline 1", tbl
      , "1 \n + 2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(2,4,2,5)}){Location(2,4,2,5)}
        ){Location(1,1,2,5)}
      )

    ; asfix-anno-location-test(|"Location with newline 2", tbl
      , "1 \n\n + 2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(3,4,3,5)}){Location(3,4,3,5)}
        ){Location(1,1,3,5)}
      )

    ; asfix-anno-location-test(|"Location with newline 3", tbl
      , "1 \n\n + \n\n 2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(5,2,5,3)}){Location(5,2,5,3)}
        ){Location(1,1,5,3)}
      )

    ; asfix-anno-location-test(|"Location with newline 4", tbl
      , "1\n+\n2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(3,1,3,2)}){Location(3,1,3,2)}
        ){Location(1,1,3,2)}
      )

    ; asfix-anno-location-test(|"Location with newline 5", tbl
      , "1\n\n+\n\n2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(5,1,5,2)}){Location(5,1,5,2)}
        ){Location(1,1,5,2)}
      )

    ; asfix-anno-location-test(|"Location with \\r newline 1", tbl
      , "1 \r\n + 2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(2,4,2,5)}){Location(2,4,2,5)}
        ){Location(1,1,2,5)}
      )

    ; asfix-anno-location-test(|"Location of a simple expression", tbl
      , "1 + 234"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("234"{Location(1,5,1,8)}){Location(1,5,1,8)}
        ){Location(1,1,1,8)}
      )

    ; asfix-anno-location-test(|"Location of a simple expression with some whitespace", tbl
      , "   1 + 234  "
      , Plus(
          Int("1"{Location(1,4,1,5)}){Location(1,4,1,5)}
        , Int("234"{Location(1,8,1,11)}){Location(1,8,1,11)}
        ){Location(1,4,1,11)}
      )

    ; asfix-anno-location-test(|"Location of simple expression with some whitespace", tbl
      , "   1   +   234  "
      , Plus(
          Int("1"{Location(1,4,1,5)}){Location(1,4,1,5)}
        , Int("234"{Location(1,12,1,15)}){Location(1,12,1,15)}
        ){Location(1,4,1,15)}
      )

    ; where(
        <close-parse-table> tbl
      )

    ; where(
        <ReadFromFile> "ExpIntAmb.tbl"; open-parse-table => ambtbl
      )

    ; apply-and-check(!"Location for a simple ambiguous expression"
      , asfix-anno-location-test-strategy(|ambtbl)
      , !"1 + 2 + 3"
      , ?amb(<id>)
        ; fetch(
            ?Plus(
              Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
            , Plus(
                Int("2"{Location(1,5,1,6)}){Location(1,5,1,6)}
              , Int("3"{Location(1,9,1,10)}){Location(1,9,1,10)}
              ){Location(1,5,1,10)}
            ){Location(1,1,1,10)}
          )
        ; fetch(
            ?Plus(
              Plus(
                Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
              , Int("2"{Location(1,5,1,6)}){Location(1,5,1,6)}
              ){Location(1,1,1,6)}
            , Int("3"{Location(1,9,1,10)}){Location(1,9,1,10)}
            ){Location(1,1,1,10)}
         )
      )

    ; where(
        <close-parse-table> ambtbl
      )

  asfix-anno-location-test(|msg, tbl, string, term) =
      apply-test(!msg
      , asfix-anno-location-test-strategy(|tbl)
      , !string
      , !term
      )

  asfix-anno-location-test-strategy(|tbl) =
    parse-string-pt(|tbl)
    ; asfix-anno-location
    ; implode-asfix

/**
 * Implode
 */
strategies
    
  implode-tests =
      where(
        <ReadFromFile> "ConcreteSyntax.tbl"; open-parse-table => tbl
      )
    ; set-default-sglr-config
      
    ; apply-test(!"Implode a meta list variable (sep)."
      , parse-string(|tbl)
      , !"|[ f(e*) ]|"
      , !ToTerm(Call("f", meta-listvar("e*")))
      )
      
    ; apply-test(!"Implode a meta list variable."
      , parse-string(|tbl)
      , !"|[ [ e* ] ]|"
      , !ToTerm(List(meta-listvar("e*")))
      )
     
    ; apply-test(!"Implode a meta variable."
      , parse-string(|tbl)
      , !"|[ e ]|"
      , !ToTerm(meta-var("e"))
      )
    
    ; where(<close-parse-table> tbl)

  implode-tests-custom =
      where(
        <ReadFromFile> "CustomImplode.tbl"; open-parse-table => tbl
      )

    ; apply-test(!"Custom implode 1"
      , parse-string-pt(|tbl, "Iter")
        ; custom-implode-1
      , !"a b"
      , !Iter(["a","b"])
      )

    ; apply-test(!"Custom implode 2"
      , parse-string-pt(|tbl, "Iter-sep")
        ; custom-implode-1
      , !"a,b,c"
      , !Iter-sep(["a", ",","b", ",","c"])
      )

    ; apply-test(!"Custom implode 3"
      , parse-string-pt(|tbl, "Iter-star")
        ; custom-implode-1
      , !"a b c"
      , !Iter-star(["a","b","c"])
      )

    ; apply-test(!"Custom implode 4"
      , parse-string-pt(|tbl, "Iter-star-sep")
        ; custom-implode-1
      , !"a,b,c" 
      , !Iter-star-sep(["a", ",","b", ",","c"])
      )

    ; apply-test(!"Custom implode 5"
      , parse-string-pt(|tbl, "Nesting-iter-sep1")
        ; custom-implode-1
      , !"a b c; d e f; g h i"
      , !Nesting-iter-sep1([["a","b","c"], ";",["d","e","f"], ";", ["g","h","i"]])
      )

    ; apply-test(!"Custom implode 6"
      , parse-string-pt(|tbl, "Nesting-iter-sep2")
        ; custom-implode-1
      , !"a A b B C D e E F g"
      , !Nesting-iter-sep2([["a"],["A"],["b"],["B","C","D"],["e"],["E","F"],["g"]])
      )

    ; apply-test(!"Custom implode 7"
      , parse-string-pt(|tbl, "Nesting-iter-star-sep")
        ; custom-implode-1
      , !"a b c; d e f; g h i"
      , !Nesting-iter-star-sep([["a","b","c"], ";",["d","e","f"], ";", ["g","h","i"]])
      )

    ; apply-test(!"Custom implode 8"
      , parse-string-pt(|tbl, "Empty-iter-star-sep")
        ; custom-implode-1
      , !""
      , !Empty-iter-star-sep([])
      )

    ; apply-test(!"Custom implode 9"
      , parse-string-pt(|tbl, "Alt1a")
        ; custom-implode-2
      , !"A"
      , !Alt1a(alt(2,["A"]))
      )

    /*
    ; apply-test(!"Custom implode 10"
      , parse-string-pt(|tbl, "Alt2a")
        ; custom-implode-2
      , !"f a a A"
      , !Alt2a("a",alt(1,[("a","A")]))
      )
    */

    ; apply-test(!"Custom implode 11"
      , parse-string-pt(|tbl, "Alt3a")
        ; custom-implode-2
      , !"noot"
      , !"noot"
      )

    ; apply-test(!"Custom implode 12"
      , parse-string-pt(|tbl, "Alt4a")
        ; custom-implode-2
      , !"A"
      , !Alt4a("A")
      )

    ; apply-test(!"Custom implode 13"
      , parse-string-pt(|tbl, "Var1")
        ; custom-implode-2
      , !"aap"
      , !Var1("aap")
      )

    ; where(<close-parse-table> tbl)

  custom-implode-1 =
    asfix-flat-lex
    ; asfix-remove-layout
    ; asfix-flat-list
    ; asfix-replace-appl
    ; asfix-flat-injections
    ; ?parsetree(<id>, _)

  custom-implode-2 =
    asfix-flat-lex
    ; asfix-remove-layout
    ; asfix-flat-list
    ; asfix-remove-lit
    ; asfix-replace-appl
    ; asfix-flat-injections
    ; asfix-flat-alt
    ; asfix-remove-seq
    ; ?parsetree(<id>, _)

  implode-tests-concrete =
      where(
        <ReadFromFile> "Concrete.tbl"; open-parse-table => tbl
      )
    ; set-default-sglr-config

    ; apply-and-check(!"Simple quotation with asfix content."
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"<? a ?>"
      , ?ToTerm(appl(_, _))
      )
      
    ; apply-and-check(!"Simple quotation with asfix content (ToMetaExpr)."
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"<% a %>"
      , ?ToMetaExpr(appl(_, _))
      )

    ; apply-and-check(!"Simple quotation with asfix content."
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"<? a or b ?>"
      , ?ToTerm(appl(_, [appl(_, _), _, _, _, appl(_, _)]))
      )

    ; apply-and-check(!"Meta variables are imploded."
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"<? e ?>"
      , ?ToTerm(meta-var("e"))
      )

    ; apply-and-check(!"Simple quotation with asfix content."
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"<! a !>"
      , ?ToBuild(appl(_, _))
      )

    ; apply-and-check(!"Simple quotation with asfix content."
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"< a >"
      , ?ToStrategy(appl(_, _))
      )

    ; apply-test(!"Simple quotation with anti-quotation."
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"<? ?> () <? ?>"
      , !ToTerm(FromTerm(Empty()))
      )

    ; apply-test(!"Simple quotation with anti-quotation."
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"<? !> () <! ?>"
      , !ToTerm(FromApp(Empty()))
      )

    ; apply-and-check(!"WithAnno: term is not imploded."
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"<? a { () } ?>"
      , ?ToTerm(WithAnno(appl(_, _), _))
      )

    ; apply-and-check(!"Simple quotation with anti-quotation."
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"<? a or ?> () <? ?>"
      , ?ToTerm(appl(_, [_, _, _, _, FromTerm(Empty())]))
      )
    ; apply-and-check(!"WithAnno: annotations are imploded."
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"<? a { () } ?>"
      , ?ToTerm(WithAnno(_, [Empty()]))
      )

    ; apply-and-check(!"WithAnno: recursive ToTerm in annotations"
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"<? a { <? b ?> } ?>"
      , ?ToTerm(WithAnno(_, [ToTerm(appl(_, _))]))
      )

    ; apply-and-check(!"WithAnno: recursive ToTerm in annotations"
      , parse-string-pt(|tbl)
        ; implode-asfix(false)
      , !"<? a { <? b ?> } ?>"
      , ?ToTerm(WithAnno(_, [ToTerm(appl(_, _))]))
      )

    ; where(<close-parse-table> tbl)
    
    
  implode-tests-concrete-yield =
      where(
        <ReadFromFile> "Concrete.tbl"; open-parse-table => tbl
      )
    ; set-default-sglr-config
     
    ; let tester = 
            parse-string-pt(|tbl)
            ; implode-asfix(false)
            ; yield-asfix-quotes
    in
    
      apply-and-check(!"Simple yielded quotation with asfix content."
      , tester
      , !"<? a ?>"
      , ?ToTerm(appl(_, <implode-string; ?"a">))
      )
      
    ; apply-and-check(!"Simple yielded quotation with asfix content (ToMetaExpr)."
      , tester
      , !"<% a %>"
      , ?ToMetaExpr(appl(_, ['a']))
      )

    ; apply-and-check(!"Simple yielded quotation with asfix content."
      , tester
      , !"<? a or b ?>"
      , ?ToTerm(appl(_,  <implode-string; ?"a or b">))
      )

    ; apply-and-check(!"Meta variables are imploded yielded."
      , tester
      , !"<? e ?>"
      , ?ToTerm(meta-var("e"))
      )

    ; apply-and-check(!"Simple quotation with asfix content yielded."
      , tester
      , !"<! a !>"
      , ?ToBuild(appl(_, <implode-string; ?"a">))
      )

    ; apply-and-check(!"Simple quotation with asfix content yielded."
      , tester
      , !"< a >"
      , ?ToStrategy(appl(_,  <implode-string; ?"a">))
      )

    ; apply-test(!"Simple quotation with anti-quotation yielded."
      , tester
      , !"<? ?> () <? ?>"
      , !ToTerm(FromTerm(Empty()))
      )
      
    ; apply-and-check(!"Simple quotation with anti-quotation yielded."
      , tester
      , !"<? a or ?> <? a or b ?> <? ?>"
      , ?ToTerm(appl(_, ['a', ' ', 'o', 'r', ' ',
           FromTerm(
             ToTerm(appl(_, ['a', ' ', 'o', 'r', ' ', 'b']))
           )]
         ))
      )

    ; apply-test(!"Simple quotation with anti-quotation yielded."
      , tester
      , !"<? !> () <! ?>"
      , !ToTerm(FromApp(Empty()))
      )

    ; apply-and-check(!"Simple quotation with anti-quotation yielded."
      , tester
      , !"<? a or ?> () <? ?>"
      , ?ToTerm(appl(_, ['a', ' ', 'o', 'r', ' ', FromTerm(Empty())]))
      )
  end
  

  implode-tests-conc = id
    ; where(
        <ReadFromFile> "ConcreteSyntax2.tbl"; open-parse-table => tbl
      )
    ; set-default-sglr-config

    ; apply-test(!"Conc test 1"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"e1*,e2*"
      , !"Conc"#([meta-listvar("e1*"),meta-listvar("e2*")])
      )

    ; apply-test(!"Conc test 2"
      , parse-string-pt(|tbl)
        ; conc-test-fetch-top
        ; appl(id, filter(not(is-ignorable-syntax)))
        ; ReplConsConcTest(!"foo")
      , !"e1*,e2*"
      , !"Conc"#(["foo", "foo"])
      )

    ; apply-and-check(!"Conc test 3"
      , parse-string-pt(|tbl)
        ; conc-test-fetch-top
        ; appl(id, filter(not(is-ignorable-syntax)))
        ; ?appl(<id>, [_,_])
      , !"e1*,e2*"
      , is-conc
      )

    ; where(<close-parse-table> tbl)

  implode-tests-ast-attributes = id
    ; where(
        <ReadFromFile> "AstAttributes.tbl"; open-parse-table => tbl
      )
    ; set-default-sglr-config

    ; apply-test(!"Ast node test 1"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"(1 + 2)"
      , !Plus(Int("1"))
      )

    ; apply-test(!"Ast node test 2"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"(1 - 2)"
      , !Minus(Int("2"))
      )
      
    ; apply-test(!"Ast node test conc 1"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"f(1 | 2)"
      , !Call("f", [Int("1"), Int("2")])
      )
      
    ; apply-test(!"Ast node test conc 2"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"f(1 | 2, 3)"
      , !Call("f", [Int("1"), Int("2"), Int("3")])
      )
      
    ; apply-test(!"Ast node test conc 3"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"f(1, 2 & 3)"
      , !Call("f", [Int("1"), Int("2"), Int("3")])
      )

    ; apply-test(!"Ast attribute with annotations (1)"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"anno a b c"
      , !Foo("a", "b", "c")
      )

    ; apply-test(!"Ast attribute with annotations (2)"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"anno b c"
      , !Foo("b"){"c"}
      )

    ; apply-test(!"Ast attribute with annotations (3)"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"anno b c d"
      , !Foo("b"){"c", "d"}
      )

    ; apply-test(!"Ast attribute with annotations (4)"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"anno c d"
      , !Foo("c"){Id("d")}
      )

    ; apply-test(!"Ast attribute with annotations (5)"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"anno d e"
      , !"d"{"e"}
      )

    ; apply-test(!"Ast attribute with annotations (6)"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"anno c d e"
      , !Foo(1{"c"}, 2{"d"}, 3{"e"})
      )

    ; apply-test(!"Ast attribute with annotations (7)"
      , parse-string-pt(|tbl)
        ; implode-asfix
      , !"anno e"
      , !"e"{1, 2}
      )
    ; where(<close-parse-table> tbl)

 implode-tests-lexical = id
    ; where(
        <ReadFromFile> "Lexical.tbl"; open-parse-table => tbl
      )
    ; set-default-sglr-config

    ; apply-test(!"Repeated literals (STR-546)"
      , parse-string(|tbl, "List")
      , !"$$$"
      , !["$", "$", "$"]
      )

    ; apply-test(!"Repeated literals (STR-546)"
      , parse-string(|tbl, "ListCase")
      , !"dollar Dollar dollar"
      , !["dollar", "dollar", "dollar"]
      )

    ; apply-test(!"Repeated literals (STR-546)"
      , parse-string(|tbl, "ListSep")
      , !"$,$,$"
      , !["$", "$", "$"]
      )

    ; apply-test(!"Repeated literals (STR-546)"
      , parse-string(|tbl, "ListSepCase")
      , !"dollar,DOLLAR,dollaR"
      , !["dollar", "dollar", "dollar"]
      )
      
    ; apply-test(!"Repeated literals (STR-546)"
      , parse-string(|tbl, "Opt")
      , !"$"
      , !Some("$")
      )

    ; apply-test(!"Repeated literals (STR-546)"
      , parse-string(|tbl, "OptCase")
      , !"dollar"
      , !Some("dollar")
      )

    ; apply-test(!"Repeated literals (STR-546)"
      , parse-string(|tbl, "Opt")
      , !""
      , !None()
      )

    ; apply-test(!"Repeated literals (STR-546)"
      , parse-string(|tbl, "OptCase")
      , !""
      , !None()
      )
      
    ; apply-test(!"Ignore literals"
      , parse-string(|tbl, "Expr")
      , !"$x"
      , !Id("x")
      )

    ; apply-test(!"Ignore case-insensitive literals"
      , parse-string(|tbl, "ExprCase")
      , !"DOLLAR x"
      , !Id("x")
      )

    ; apply-test(!"Ignore case-insensitive literals"
      , parse-string(|tbl, "ExprCase")
      , !"dollar x"
      , !Id("x")
      )

    ; apply-test(!"Literal injection"
      , parse-string(|tbl, "Inj")
      , !"this"
      , !"this"
      )

    ; apply-test(!"Literal injection"
      , parse-string(|tbl, "InjCase")
      , !"TRUE"
      , !"true"
      )

    ; apply-test(!"Literal injection"
      , parse-string(|tbl, "InjCase")
      , !"True"
      , !"true"
      )

    ; apply-test(!"Case insensitive literal"
      , parse-string(|tbl, "ExprCase")
      , !"true"
      , !True()
      )

    ; where(<close-parse-table> tbl)

    
  asfix2me-tests = id
    ; where(
        <ReadFromFile> "ExpInt.tbl"; open-parse-table => tbl
      )

    ; set-default-sglr-config
    ; where(<set-parse-tree-format> AsFix2ME())

    ; apply-and-check(!"Check that the parse tree format can be set to AsFix2ME"
      , parse-string-pt(|tbl)
      , !"12 + 13"
      ,   oncetd(?[49, 50])
        ; oncetd(?[49, 51])
      )

    ; set-default-sglr-config      
    ; where(set-asfix2me-format)
    
    ; apply-and-check(!"Check that the parse tree format can be set to AsFix2ME"
      , parse-string-pt(|tbl)
      , !"12 + 13"
      ,   oncetd(?[49, 50])
        ; oncetd(?[49, 51])
      )
      
    ; set-default-sglr-config
    ; where(<set-parse-tree-format> AsFix2())

    ; apply-and-check(!"Check that the parse tree format can be set to AsFix2"
      , parse-string-pt(|tbl)
      , !"12 + 13"
      ,   oncetd(?[49])
        ; oncetd(?[50])
        ; oncetd(?[51])
        ; not(oncetd(?[49, 50]))
        ; not(oncetd(?[49, 51]))
      )

    ; set-default-sglr-config      
    ; where(set-asfix2-format)
    
    ; apply-and-check(!"Check that the parse tree format can be set to AsFix2"
      , parse-string-pt(|tbl)
      , !"12 + 13"
      ,   oncetd(?[49])
        ; oncetd(?[50])
        ; oncetd(?[51])
        ; not(oncetd(?[49, 50]))
        ; not(oncetd(?[49, 51]))        
      )

    ; set-default-sglr-config      

  conc-test-fetch-top =
    oncetd(?appl(prod(_, cf(iter-star-sep(sort("Exp"), lit(","))), _), _); ?appl)
    ; !appl

  ReplConsConcTest(impl) =
    ?appl(p, [t1,t2])
    ; <is-conc> p
    ; <impl> t1 => ts1
    ; <impl> t2 => ts2
    ; if <[] + [id|id]> ts2 then
        <conc> (ts1, ts2)
      else
        !"Conc"#([ts1, ts2])
      end

signature
  constructors
    WithAnno   : A * B -> C
    ToTerm     : A -> B
    ToMetaExpr :  A -> B
    FromTerm   : A -> B
    FromApp    : A -> B
    Empty      : A
    appl       : A * B -> C

    Iter : A -> B
    Iter-sep : A -> B
    Iter-star : A -> B
    Iter-star-sep : A -> B
    Nesting-iter-sep1 : A -> B
    Nesting-iter-sep2 : A -> B
    Nesting-iter-star-sep : A -> B
    Empty-iter-star-sep : A -> B
    
    IterN : A -> B
    IterSepN : A -> B

    Alt1a : A -> B
    Alt2a : A * B -> C
    Alt4a : A -> B
    Var1  : A -> B

    Call : Id * List(Exp) -> B
    Plus : A -> B    
    Minus : A -> B
    Id : A -> B
    True : A
    
    Foo : A -> A
    Foo : A * A -> A
    Foo : A * A * A -> A

    pos-info : AnnoKey