definition
module Main
exports
  context-free start-symbols Exp
  sorts IntConst Exp
  
  lexical syntax
    [\ \t\n]  -> LAYOUT
    [0-9]+    -> IntConst
    [A-Za-z]+ -> Id
      
  context-free syntax
    IntConst  -> Exp {cons("Int")}

    "(" Exp "+" Exp ")" -> Exp {ast("Plus(<1>)")}
    "(" Exp "-" Exp ")" -> Exp {ast("Minus(<2>)")}
    
    Id "(" {Exp ","}* "|" {Exp ","}* ")" -> Exp {ast("Call(<1>, <conc(<2>, <3>)>)")}
    Id "(" {Exp ","}* "&" Exp  ")" -> Exp {ast("Call(<1>, <conc(<2>, [<3>])>)")}

   context-free syntax
     "anno" A B C -> Exp {ast("Foo(<1>, <2>, <3>)")}
     "anno" B C   -> Exp {ast("Foo(<1>){<2>}")}
     "anno" B C D -> Exp {ast("Foo(<1>){<2>, <3>}")}
     "anno" C D   -> Exp {ast("Foo(<1>){Id(<2>)}")}
     "anno" D E   -> Exp {ast("<1>{<2>}")}
     "anno" C D E -> Exp {ast("Foo(1{<1>}, 2{<2>}, 3{<3>})")}

     "anno" Foo   -> Exp {ast("<1>{1}")}
     E            -> Foo {ast("<1>{2}")}

  lexical syntax
    "a" -> A
    "b" -> B
    "c" -> C
    "d" -> D
    "e" -> E
