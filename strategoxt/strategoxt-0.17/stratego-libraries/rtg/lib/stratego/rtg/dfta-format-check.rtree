Module("stratego/rtg/dfta-format-check",[Imports([Import("stratego/rtg/dfta-accept"),Import("libstratego-lib")]),Strategies([SDefT("dfta-format-check",[],[DefaultVarDec("dfta")],CallT(SVar("dfta-format-check"),[CallNoArgs(SVar("false")),CallNoArgs(SVar("true"))],[Var("dfta")])),SDefT("dfta-format-check",[DefaultVarDec("report-errors"),DefaultVarDec("fail-on-error")],[DefaultVarDec("dfta")],Where(Seq(CondChoice(CallNoArgs(SVar("report-errors")),Seq(CallT(SVar("dfta-accept"),[CallNoArgs(SVar("dftafc-report-failure"))],[Var("dfta")]),CallT(SVar("dftafc-report-start"),[],[Var("dfta")])),CallT(SVar("dfta-accept"),[Id],[Var("dfta")])),IfThen(CallNoArgs(SVar("fail-on-error")),CallT(SVar("dftafc-error-start"),[],[Var("dfta")])))))]),Strategies([SDefT("dftafc-error-start",[],[DefaultVarDec("dfta")],Seq(Match(Var("state")),Where(Seq(Assign(NoAnnoList(Op("DFTA",[Var("starts"),Wld])),Var("dfta")),BA(Call(SVar("fetch"),[Match(Var("state"))]),Var("starts")))))),SDefT("dftafc-report-start",[],[DefaultVarDec("dfta")],Seq(Match(Var("state")),Where(Seq(Assign(NoAnnoList(Op("DFTA",[Var("starts"),Wld])),Var("dfta")),Seq(CondChoice(Assign(NoAnnoList(Op("Failure",[])),Var("state")),Build(NoAnnoList(Int("1"))),CondChoice(BA(Call(SVar("fetch"),[Match(Var("state"))]),Var("starts")),Seq(Call(SVar("if-verbose2"),[BA(Seq(CallNoArgs(SVar("dftafc-state-to-string")),Call(SVar("debug"),[Build(NoAnnoList(Str("\"info: term typed as \"")))])),Var("state"))]),Build(NoAnnoList(Int("0")))),Seq(BA(CallNoArgs(SVar("fprintnl")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("stderr-stream"))),NoAnnoList(List([NoAnnoList(Str("\"error: term typed as \"")),App(CallNoArgs(SVar("dftafc-state-to-string")),Var("state")),NoAnnoList(Str("\" but expected \"")),App(CallNoArgs(SVar("dftafc-states-to-string")),Var("starts"))]))]))),Build(NoAnnoList(Int("1")))))),BA(CallNoArgs(SVar("set-config")),NoAnnoList(Tuple([NoAnnoList(Str("\"--exit-code\"")),RootApp(Id)])))))))),SDefT("dftafc-report-failure",[],[DefaultVarDec("t")],Seq(Match(NoAnnoList(Op("Appl",[Wld,Var("arg-states")]))),Where(IfThen(Not(BA(Call(SVar("fetch"),[Match(NoAnnoList(Op("Failure",[])))]),Var("arg-states"))),Seq(BA(CallNoArgs(SVar("fprintnl")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("stderr-stream"))),NoAnnoList(List([NoAnnoList(Str("\"error: cannot type \"")),App(CallNoArgs(SVar("write-to-string")),Var("t"))]))]))),IfThen(Not(Assign(NoAnnoList(List([])),Var("arg-states"))),Seq(BA(CallNoArgs(SVar("fprintnl")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("stderr-stream"))),NoAnnoList(List([NoAnnoList(Str("\"    inferred types of subterms: \""))]))]))),Seq(Assign(Var("args"),App(CallNoArgs(SVar("dftafc-get-arguments")),Var("t"))),Seq(BA(CallNoArgs(SVar("zip")),NoAnnoList(Tuple([Var("args"),Var("arg-states")]))),Call(SVar("map"),[Scope(["arg","state"],Seq(Match(NoAnnoList(Tuple([Var("arg"),Var("state")]))),BA(CallNoArgs(SVar("fprintnl")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("stderr-stream"))),NoAnnoList(List([NoAnnoList(Str("\"    typed \"")),App(CallNoArgs(SVar("write-to-string")),Var("arg")),NoAnnoList(Str("\" as \"")),App(CallNoArgs(SVar("dftafc-state-to-string")),Var("state"))]))])))))])))))))))),SDefNoArgs("dftafc-get-arguments",GuardedLChoice(Match(NoAnnoList(ListTail([Var("x")],Var("xs")))),Build(NoAnnoList(List([Var("x"),Var("xs")]))),GuardedLChoice(Match(NoAnnoList(List([]))),Build(NoAnnoList(List([]))),GuardedLChoice(CallNoArgs(SVar("is-int")),Build(NoAnnoList(List([]))),GuardedLChoice(CallNoArgs(SVar("is-string")),Build(NoAnnoList(List([]))),CallNoArgs(SVar("get-appl-arguments")))))))]),Rules([SDefNoArgs("dftafc-state-to-string",LChoice(Match(NoAnnoList(Op("Set",[RootApp(CallNoArgs(SVar("dftafc-states-to-string")))]))),CallNoArgs(SVar("rtg-to-string")))),SDefNoArgs("dftafc-states-to-string",Seq(Call(SVar("map"),[CallNoArgs(SVar("dftafc-state-to-string"))]),Seq(Call(SVar("separate-by"),[Build(NoAnnoList(Str("\", \"")))]),CallNoArgs(SVar("concat-strings"))))),RDefNoArgs("rtg-to-string",RuleNoCond(NoAnnoList(Op("Nonterm",[Var("s")])),Var("s"))),RDefNoArgs("rtg-to-string",RuleNoCond(NoAnnoList(Op("Set",[Var("args")])),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([NoAnnoList(Str("\"{\"")),App(Seq(Call(SVar("map"),[CallNoArgs(SVar("rtg-to-string"))]),Seq(Call(SVar("separate-by"),[Build(NoAnnoList(Str("\", \"")))]),CallNoArgs(SVar("concat-strings")))),Var("args")),NoAnnoList(Str("\"}\""))]))))),RDefNoArgs("rtg-to-string",RuleNoCond(NoAnnoList(Op("Generated",[Var("t")])),App(CallNoArgs(SVar("rtg-to-string")),Var("t")))),RDefNoArgs("rtg-to-string",RuleNoCond(NoAnnoList(Op("Appl",[Var("t"),Var("args")])),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([App(CallNoArgs(SVar("rtg-to-string")),Var("t")),NoAnnoList(Str("\"(\"")),App(Seq(Call(SVar("map"),[CallNoArgs(SVar("rtg-to-string"))]),Seq(Call(SVar("separate-by"),[Build(NoAnnoList(Str("\", \"")))]),CallNoArgs(SVar("concat-strings")))),Var("args")),NoAnnoList(Str("\")\""))]))))),RDefNoArgs("rtg-to-string",RuleNoCond(NoAnnoList(Op("Ref",[Var("nt")])),App(CallNoArgs(SVar("rtg-to-string")),Var("nt")))),RDefNoArgs("rtg-to-string",RuleNoCond(NoAnnoList(Op("Term",[Var("s")])),Var("s"))),RDefNoArgs("rtg-to-string",RuleNoCond(NoAnnoList(Op("ConcTerm",[])),NoAnnoList(Str("\"<conc>\"")))),RDefNoArgs("rtg-to-string",RuleNoCond(NoAnnoList(Op("SomeTerm",[])),NoAnnoList(Str("\"<some>\"")))),RDefNoArgs("rtg-to-string",RuleNoCond(NoAnnoList(Op("NoneTerm",[])),NoAnnoList(Str("\"<none>\"")))),RDefNoArgs("rtg-to-string",RuleNoCond(NoAnnoList(Op("StringTerm",[])),NoAnnoList(Str("\"<string>\"")))),RDefNoArgs("rtg-to-string",RuleNoCond(NoAnnoList(Op("IntTerm",[])),NoAnnoList(Str("\"<int>\"")))),RDefNoArgs("rtg-to-string",RuleNoCond(NoAnnoList(Op("TupleTerm",[Var("x")])),App(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([NoAnnoList(Str("\"<(\"")),App(CallNoArgs(SVar("int-to-string")),Var("x")),NoAnnoList(Str("\")>\""))])))))])])
