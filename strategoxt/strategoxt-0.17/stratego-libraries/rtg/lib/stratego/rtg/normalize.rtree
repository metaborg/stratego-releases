Module("stratego/rtg/normalize",[Imports([Import("stratego/rtg/signature"),Import("libstratego-lib")]),Strategies([SDefNoArgs("rtg-remove-nested-trees",Call(SVar("RTG"),[Call(SVar("Start"),[Id]),Call(SVar("ProdRules"),[Call(SVar("listtd"),[Call(SVar("repeat"),[CallNoArgs(SVar("rtg-lift-nested-tree"))])])])])),RDefNoArgs("rtg-lift-nested-tree",Rule(NoAnnoList(ListTail([NoAnnoList(Op("ProdRule",[Var("a"),NoAnnoList(List([NoAnnoList(Op("Appl",[Var("f"),Var("ts")]))]))]))],Var("ps"))),NoAnnoList(ListTail([NoAnnoList(Op("ProdRule",[Var("a"),NoAnnoList(List([NoAnnoList(Op("Appl",[Var("f"),Var("ts'")]))]))])),NoAnnoList(Op("ProdRule",[Var("t'"),NoAnnoList(List([Var("t")]))]))],Var("ps"))),Assign(Var("ts'"),App(Call(SVar("fetch"),[SRule(Rule(NoAnnoList(Op("Appl",[Var("g"),Var("ts2")])),NoAnnoList(Op("Ref",[Var("t'")])),Seq(Match(Var("t")),Assign(Var("t'"),App(CallNoArgs(SVar("rtg-nested-tree-to-nonterm")),Var("t"))))))]),Var("ts"))))),RDefNoArgs("rtg-nested-tree-to-nonterm",RuleNoCond(As(Var("a"),NoAnnoList(Op("Appl",[Var("f"),Var("ts")]))),NoAnnoList(Op("Generated",[Var("a")]))))]),Strategies([RDefNoArgs("rtg-remove-injection-rules",Rule(NoAnnoList(Op("RTG",[NoAnnoList(Op("Start",[Var("starts")])),NoAnnoList(Op("ProdRules",[Var("prodrules")]))])),NoAnnoList(Op("RTG",[NoAnnoList(Op("Start",[Var("starts")])),NoAnnoList(Op("ProdRules",[Var("prodrules'")]))])),Let([SDefNoArgs("create-hashtable",Scope(["tbl"],Seq(Assign(Var("tbl"),RootApp(CallNoArgs(SVar("new-hashtable")))),Seq(BA(Call(SVar("map"),[CallT(SVar("add-production-to-tbl"),[],[Var("tbl")])]),Var("prodrules")),Build(Var("tbl")))))),SDefT("add-production-to-tbl",[],[DefaultVarDec("tbl")],Scope(["a","p"],Seq(Match(As(Var("p"),NoAnnoList(Op("ProdRule",[Var("a"),Wld])))),BA(CallT(SVar("hashtable-push"),[],[Var("a"),Var("p")]),Var("tbl"))))),SDefNoArgs("is-normalized",Call(SVar("ProdRule"),[Id,ListCongNoTail([Call(SVar("Appl"),[Id,Call(SVar("map"),[Call(SVar("Ref"),[Id])])])])])),SDefNoArgs("is-injection",Call(SVar("ProdRule"),[Id,ListCongNoTail([Call(SVar("Ref"),[Id])])])),SDefNoArgs("ensure-injection",LChoice(CallNoArgs(SVar("is-injection")),Seq(CallT(SVar("log"),[],[NoAnnoList(Op("Error",[])),NoAnnoList(Str("\"expected injection production\"")),RootApp(Id)]),Fail))),SDefT("remove-injection",[],[DefaultVarDec("ps"),DefaultVarDec("tbl")],Scope(["a","b","tail","ps'"],Seq(Match(NoAnnoList(ListTail([NoAnnoList(Op("ProdRule",[Var("a"),NoAnnoList(List([NoAnnoList(Op("Ref",[Var("b")]))]))]))],Var("tail")))),Seq(Assign(Var("ps'"),App(Seq(CallT(SVar("hashtable-get"),[],[Var("b")]),Call(SVar("map"),[CallT(SVar("make-inlined"),[],[Var("a")])])),Var("tbl"))),Seq(BA(CallT(SVar("iset-addlist"),[],[App(Call(SVar("retain-all"),[CallNoArgs(SVar("is-normalized"))]),Var("ps'"))]),Var("ps")),Seq(BA(Call(SVar("remove-all"),[CallNoArgs(SVar("is-normalized"))]),Var("ps'")),Seq(Call(SVar("map"),[CallNoArgs(SVar("ensure-injection"))]),BA(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([RootApp(Id),Var("tail")])))))))))),SDefT("make-inlined",[],[DefaultVarDec("a")],LRule(RuleNoCond(NoAnnoList(Op("ProdRule",[Var("b"),NoAnnoList(List([Var("alt")]))])),NoAnnoList(Op("ProdRule",[Var("a"),NoAnnoList(List([Var("alt")]))])))))],Seq(Assign(Var("tbl"),RootApp(CallNoArgs(SVar("create-hashtable")))),Seq(Assign(Var("ps"),RootApp(CallNoArgs(SVar("new-iset")))),Call(SVar("finally"),[Seq(BA(CallT(SVar("iset-addlist"),[],[App(Call(SVar("retain-all"),[CallNoArgs(SVar("is-normalized"))]),Var("prodrules"))]),Var("ps")),Seq(BA(Call(SVar("remove-all"),[CallNoArgs(SVar("is-normalized"))]),Var("prodrules")),Seq(Call(SVar("map"),[CallNoArgs(SVar("ensure-injection"))]),Seq(Call(SVar("repeat"),[CallT(SVar("remove-injection"),[],[Var("ps"),Var("tbl")])]),Seq(LChoice(Match(NoAnnoList(List([]))),Seq(Match(NoAnnoList(ListTail([RootApp(Id)],Wld))),Seq(Call(SVar("debug"),[Build(NoAnnoList(Str("\"cannot remove injection: \"")))]),Fail))),Assign(Var("prodrules'"),App(CallNoArgs(SVar("iset-elements")),Var("ps")))))))),Seq(BA(CallNoArgs(SVar("iset-destroy")),Var("ps")),BA(CallNoArgs(SVar("hashtable-destroy")),Var("tbl")))]))))))])])
