Module("stratego/rtg/dfta-accept",[Imports([Import("stratego/rtg/signature"),Import("libstratego-lib")]),Signature([Constructors([OpDecl("DFTA",FunType([ConstType(Sort("List",[SortNoArgs("State")])),ConstType(SortNoArgs("Hashtable"))],ConstType(SortNoArgs("DFTA")))),OpDecl("Failure",ConstType(SortNoArgs("Failure")))])]),Strategies([SDefNoArgs("open-dfta",Seq(Match(NoAnnoList(Op("RTG",[NoAnnoList(Op("Start",[Var("start-states")])),NoAnnoList(Op("ProdRules",[RootApp(Id)]))]))),Seq(Where(Assign(Var("tbl"),RootApp(CallNoArgs(SVar("new-hashtable"))))),Seq(Call(SVar("map"),[Scope(["a","q"],LChoice(Seq(Match(NoAnnoList(Op("ProdRule",[Var("q"),NoAnnoList(List([As(Var("a"),NoAnnoList(Op("Appl",[Wld,Wld])))]))]))),BA(CallT(SVar("hashtable-put"),[],[Var("a"),Var("q")]),Var("tbl"))),Seq(Call(SVar("debug"),[Build(NoAnnoList(Str("\"internal error: cannot create type rule for \"")))]),Fail)))]),Build(NoAnnoList(Op("DFTA",[Var("start-states"),Var("tbl")]))))))),SDefNoArgs("dfta-destroy",Call(SVar("DFTA"),[Id,CallNoArgs(SVar("hashtable-destroy"))])),SDefNoArgs("is-dfta",Match(NoAnnoList(Op("DFTA",[Wld,Wld]))))]),Strategies([SDefT("dfta-accept",[VarDec("fail-hook",FunType([ConstType(SortVar("t")),ConstType(SortNoArgs("Appl"))],ConstType(SortVar("a"))))],[DefaultVarDec("dfta")],Seq(Where(AM(Build(Var("dfta")),NoAnnoList(Op("DFTA",[Var("set"),Var("tbl")])))),Let([SDefT("transition",[],[DefaultVarDec("t")],CallT(SVar("dfta-accept-transition"),[CallNoArgs(SVar("fail-hook"))],[Var("tbl"),Var("t")]))],Call(SVar("bottomup-reconstruct"),[CallNoArgs(SVar("transition")),CallNoArgs(SVar("dfta-accept-reconstruct"))])))),SDefT("dfta-accept-transition",[VarDec("fail-hook",FunType([ConstType(SortVar("t")),ConstType(SortNoArgs("Appl"))],ConstType(SortVar("a"))))],[DefaultVarDec("tbl"),DefaultVarDec("t")],LChoice(Seq(Id,Seq(Match(Var("a")),BA(CallT(SVar("hashtable-get"),[],[Var("a")]),Var("tbl")))),Seq(CallT(SVar("fail-hook"),[],[Var("t")]),Build(NoAnnoList(Op("Failure",[]))))))]),Strategies([SDefT("dfta-accept-reconstruct",[],[DefaultVarDec("args")],LChoice(CallT(SVar("dfta-accept-explode-int"),[],[Var("args")]),LChoice(CallT(SVar("dfta-accept-explode-string"),[],[Var("args")]),LChoice(CallT(SVar("dfta-accept-explode-nil"),[],[Var("args")]),LChoice(CallT(SVar("dfta-accept-explode-cons"),[],[Var("args")]),LChoice(CallT(SVar("dfta-accept-explode-conc"),[],[Var("args")]),LChoice(CallT(SVar("dfta-accept-explode-some"),[],[Var("args")]),LChoice(CallT(SVar("dfta-accept-explode-none"),[],[Var("args")]),CallT(SVar("dfta-accept-explode-appl"),[],[Var("args")]))))))))),SDefT("dfta-accept-explode-nil",[],[DefaultVarDec("args")],Seq(Match(NoAnnoList(List([]))),Build(NoAnnoList(Op("Appl",[NoAnnoList(Op("NilTerm",[])),NoAnnoList(List([]))]))))),SDefT("dfta-accept-explode-cons",[],[DefaultVarDec("args")],Seq(Match(NoAnnoList(ListTail([Wld],Wld))),Build(NoAnnoList(Op("Appl",[NoAnnoList(Op("ConsTerm",[])),Var("args")]))))),SDefT("dfta-accept-explode-conc",[],[DefaultVarDec("args")],Seq(Match(NoAnnoList(Op("Conc",[Wld,Wld]))),Build(NoAnnoList(Op("Appl",[NoAnnoList(Op("ConcTerm",[])),Var("args")]))))),SDefT("dfta-accept-explode-none",[],[DefaultVarDec("args")],Seq(Match(NoAnnoList(Op("None",[]))),Build(NoAnnoList(Op("Appl",[NoAnnoList(Op("NoneTerm",[])),NoAnnoList(List([]))]))))),SDefT("dfta-accept-explode-some",[],[DefaultVarDec("args")],Seq(Match(NoAnnoList(Op("Some",[Wld]))),Build(NoAnnoList(Op("Appl",[NoAnnoList(Op("SomeTerm",[])),Var("args")]))))),SDefT("dfta-accept-explode-appl",[],[DefaultVarDec("args")],Seq(Id,Seq(Where(Assign(Var("f"),RootApp(CallNoArgs(SVar("get-constructor"))))),CondChoice(Assign(Var("f"),NoAnnoList(Str("\"\""))),Build(NoAnnoList(Op("Appl",[NoAnnoList(Op("TupleTerm",[App(CallNoArgs(SVar("length")),Var("args"))])),Var("args")]))),Build(NoAnnoList(Op("Appl",[NoAnnoList(Op("Term",[Var("f")])),Var("args")]))))))),SDefT("dfta-accept-explode-int",[],[DefaultVarDec("args")],Seq(CallNoArgs(SVar("is-int")),Build(NoAnnoList(Op("Appl",[NoAnnoList(Op("IntTerm",[])),NoAnnoList(List([]))]))))),SDefT("dfta-accept-explode-string",[],[DefaultVarDec("args")],Seq(CallNoArgs(SVar("is-string")),Build(NoAnnoList(Op("Appl",[NoAnnoList(Op("StringTerm",[])),NoAnnoList(List([]))])))))]),Strategies([SDef("bottomup-reconstruct",[DefaultVarDec("s"),VarDec("reconstruct",FunType([ConstType(Sort("List",[SortVar("b")])),ConstType(SortVar("a"))],ConstType(SortVar("c"))))],Seq(Match(Var("t")),Seq(GuardedLChoice(Match(NoAnnoList(ListTail([Var("x")],Var("xs")))),Build(NoAnnoList(List([App(Call(SVar("bottomup-reconstruct"),[CallNoArgs(SVar("s")),CallNoArgs(SVar("reconstruct"))]),Var("x")),App(Call(SVar("bottomup-reconstruct"),[CallNoArgs(SVar("s")),CallNoArgs(SVar("reconstruct"))]),Var("xs"))]))),GuardedLChoice(Match(NoAnnoList(List([]))),Build(NoAnnoList(List([]))),GuardedLChoice(CallNoArgs(SVar("is-int")),Build(NoAnnoList(List([]))),GuardedLChoice(CallNoArgs(SVar("is-string")),Build(NoAnnoList(List([]))),Call(SVar("get-appl-arguments"),[Call(SVar("bottomup-reconstruct"),[CallNoArgs(SVar("s")),CallNoArgs(SVar("reconstruct"))])]))))),Seq(Match(Var("args")),Seq(BA(CallT(SVar("reconstruct"),[],[Var("args")]),Var("t")),CallT(SVar("s"),[],[Var("t")]))))))])])
