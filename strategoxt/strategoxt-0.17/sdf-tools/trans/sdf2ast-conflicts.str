/**
 * Generates a description of conflicts in an AST from an SDF syntax definition.
 *
 * @author  Martin Bravenboer <martin.bravenboer@gmail.com>
 * @since   0.11
 */
module sdf2ast-conflicts
imports
  libstratego-lib
  Stratego
  Sdf2
  libstratego-xtc
  ast-conflicts
  sdf-spread-cons
  sdf/tool/options
  sdf/symbol/implode
  sdf/tool/xtc

strategies

  main-sdf2ast-conflicts =
    xtc-io-wrap(sdf-main-module-option + tbl-option,
      if not(<get-config> "--tbl" + FILE(has-extension(|"tbl"))) then
        xtc-transform(!"sdf2table", !["-m", <get-sdf-main-module> | <pass-v-verbose>])
      end
      ; read-from
      ; ?parse-table(_, _, labels, _, priorities(<id>))
      ; core-sdf2conflicts(|labels)
      ; write-to
    )

  tbl-option =
    Option("--tbl"
    , <set-config> ("--tbl", ())
    , !"--tbl            Input is a parse table"
    )  

  core-sdf2conflicts(|labels) = id
    ; lookup-labels(|labels)
    ; check-empty-table
    ; retain-all(all-prods-have-cons)
    ; map(Priority2Conflicts <+ log(|Error(), "Could not handle priority", <id>); fail)
    ; concat

  check-empty-table =
    if ?[arg-gtr-prio(
           prod([cf(layout()), cf(layout())], cf(layout()), _)
         , 1
         , prod([cf(layout()), cf(layout())], cf(layout()), _))
        ]
    then
      log(|Error(), "No priorities in parse table. Did you specify the right main module?")
      ; <xtc-exit> 1
    end

strategies

  lookup-labels(|labels) =
    {| LookupLabel :
      where(<map(define-label)> labels)
      ; map(LookupLabels <+ log(|Error(), "Could not find labels for priority", <id>); fail)
    |}

  define-label =
    ?label(prod, nr)
    ; rules(LookupLabel: nr -> prod)

  LookupLabels =
    gtr-prio(LookupLabel, LookupLabel)

  LookupLabels =
    arg-gtr-prio(LookupLabel, id, LookupLabel)

  /**
   * @type Priority -> Priority
   */
  all-prods-have-cons =
    ?arg-gtr-prio(p1, _, p2)
    ; where(<cons-of-prod> p1; <cons-of-prod> p2)

  all-prods-have-cons =
    ?gtr-prio(p1, p2)
    ; where(<cons-of-prod> p1; <cons-of-prod> p2)

rules

  Priority2Conflicts :
    gtr-prio(p1, p2) -> <map(!SubtermConflict(sym1, <id>, sym2))> args
    where
      sym1@Symbol(_, n) := <Prod2Symbol> p1
      ; sym2 := <Prod2Symbol> p2
      ; args := <range> (0, n)

  Priority2Conflicts =
    ?arg-gtr-prio(p1, arg, p2)
    ; sym1 := <Prod2Symbol> p1
    ; sym2 := <Prod2Symbol> p2
    ; arg' := <arg-for-symbol(|p1)> arg
    ; if arg' := () then
        ![]
      else
        ![SubtermConflict(sym1, arg', sym2)]
      end

  Prod2Symbol :
    p@prod(syms, _, _) -> Symbol(x, n)
    where
      n := <filter(not(is-empty-sym)); length> syms
      ; x := <cons-of-prod> p

strategies

  /**
   * @type Int -> Int
   */
  arg-for-symbol(|p) =
    ?arg
    ; prod(syms, _, _) := p
    ; syms' := <add-indices; retain-all((id, not(is-empty-sym)); ?(<id>, _))> syms
    ; (<get-index; dec> (<inc> arg, syms') <+ !())

signature
  constructors
    gtr-prio : Int * Int -> Priority
    arg-gtr-prio : Int * Int * Int -> Priority
    parse-table : Int * Int * Labels * States * Priorities -> ParseTable
