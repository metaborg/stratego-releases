/**
 * Options for parse-unit
 *
 * @author Martin Bravenboer <martin.bravenboer@gmail.com>
 */
module parse-unit-options
imports 
  tool-doc

signature
  constructors
    ParseTable : ConfigKey
    TopSort    : ConfigKey

strategies

  parse-unit-usage =
    <tool-doc>
      [ Usage("parse-unit -p <file.tbl> -i <file.testsuite>")
      , Summary(
         "Performs the test cases in a testsuite for an SDF syntax definition")
      , OptionUsage()
      , AutoReportBugs()
      ]

  parse-unit-about =
    <tool-doc>
      [ AutoProgram()
      , Author(Person("Martin Bravenboer", "martin.bravenboer@gmail.com"))
      , GNU_LGPL("2003-2008", "Stratego Software Foundation <stratego@cs.uu.nl>")
      , Config([
          DefaultXTCRepository()
        , CurrentXTCRepository()
        ])
      ]

strategies

  process-testsuite-options =
    parse-testsuite(id, options(map(where(process-testsuite-option <+ unknown-testsuite-option))), id)
    ; where(
        if not(<get-config> TopSort()) then
          log(|Critical(), "The options of the testsuite do not specify a topsort.")
          ; <xtc-exit> 1
        end
      )

  process-testsuite-option =
    ?option("topsort", s)
    ; <set-config> (TopSort(), s)

  process-testsuite-option =
    ?option("ambiguity", "fails")
    ; set-ambiguity-is-error(true)

  process-testsuite-option =
    ?option("ambiguity", "succeeds")
    ; set-ambiguity-is-error(false)

  process-testsuite-option =
    ?option("heuristic-filters", "off")
    ; set-heuristic-filters(false)

  process-testsuite-option =
    ?option("heuristic-filters", "on")
    ; set-heuristic-filters(true)

  process-testsuite-option =
    ?option("post-parse-priority-filter", "off")
    ; set-filter-priority(false)

  process-testsuite-option =
    ?option("post-parse-priority-filter", "on")
    ; set-filter-priority(true)

  unknown-testsuite-option =
    ?option(k, v)
    ; log(|Warning(), ["Unknown option specified in testsuite: ", k, " ", v])

strategies

  parse-unit-options =
       sglr-parse-table-option
    <+ sglr-filter-option
    <+ single-option
    <+ single-asfix2-option
    <+ single-ast-option

  init-parse-unit-options =
    where(
      <set-verbosity> 1
      ; set-heuristic-filters(false)
      ; set-ambiguity-is-error(true)
    )

/**
 * @todo These options should really be in libstratego-sglr
 * Warning: the default
 */
strategies

  /**
   * Parse table
   */
  sglr-parse-table-option =
    ArgOption("-p"
    , where(<set-config> (ParseTable(), <id>))
    , !"-p <file.tbl>         Use parse table <file.tbl> (required)"
    )

  /**
   * Filters
   */
  sglr-filter-option =
      ArgOption("--heuristic-filters"
      , switch id
          case "off" : set-heuristic-filters(false)
          case "on"  : set-heuristic-filters(true)
          otherwise  : fatal-err(|"Invalid value for option --heurstic-filters: use on or off")
        end
      , !"--heuristic-filters <on|off>  Enable heuristic disambiguation filters (default: off)"
      )
    + Option("--no-heuristic-filters"
      , set-heuristic-filters(false)
      , !"--no-heuristic-filters        Disable heuristic disambiguation filters (deprecated option)"
      )

strategies

  single-option =
    ArgOption("--single"
    , where(<set-config> ("--single", <string-to-int>))
    , !"--single <nr>     Parse test <nr> and output the result to the output"
    )

  get-single-test =
    <get-config> "--single"

  get-single-test-output =
    <get-config> "--single-output"

  is-single-test-output-asfix2 =
    get-single-test-output => "asfix2"

  single-asfix2-option =
    Option("--asfix2"
    , where(<set-config> ("--single-output", "asfix2"))
    , !"--asfix2          Parse to AsFix2 (only applicable when --single is used)"
    )

  single-ast-option =
    Option("--ast"
    , where(<set-config> ("--single-output", "ast"))
    , !"--ast             Parse to AST (only applicable when --single is used)"
    )

  abs-test-file =
    <conc-strings> (<get-relative-prefix> "-i", <id>)

  get-relative-prefix =
    (get-config; dirname <+ getcwd)
    ; <conc-strings> (<id>, "/")
