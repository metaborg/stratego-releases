module parse-unit
imports
  libstratego-lib
  libstratego-xtc
  libstratego-sglr
  libstratego-aterm
  parse-testsuite
  parse-unit-io
  parse-unit-test-results
  parse-unit-options
  parse-unit-present

strategies

  main-parse-unit =
    init-parse-unit-options
    ; xtc-io-wrap(
        parse-unit-options
      , parse-unit-usage
      , parse-unit-about
      , ![]
      , parse-unit
    )

strategies

  parse-unit = 
    read-parse-testsuite
    ; process-testsuite-options
    ; where(
        tbl := <try-open-parse-table>
        ; sort := <get-config> TopSort()
      )
    ; if get-single-test then
        where(set-ambiguity-is-error(false))
        ; do-single-test(|tbl, sort, <get-single-test> ())
        ; write-to-text
      else
        do-full-testsuite(|tbl, sort)
        ; <xtc-exit> 0
      end
    <+ <xtc-exit> 1

  do-full-testsuite(|tbl, sort) =
    echo-start
    ; ?parse-testsuite(name(name), _, <id>)
    ; map-with-index(execute-test(|sort, tbl))
    ; !TestResults(<id>)
    ; where(<echo-results> (name, <id>))
    ; parse-unit-exit-on-failure

  parse-unit-exit-on-failure =
    ?TestResults(<id>)
    ; map(?Success())
    <+ <xtc-exit> 1

  do-single-test(|tbl, sort, i) =
    ?parse-testsuite(name(name), _, <id>)
    ; ( <index> (i, <id>)
      ; ?parse-test(description(s), input, output)
        <+ say(!"error: parse-unit: no such test.")
           ; fail
      )
    ; where(<debug(!"test : ")> s)
    ; <parse-unit-parse(|tbl, sort)> input
    ; ?ParseResult(_, Success(<id>))
    ; if not(is-single-test-output-asfix2) then
        implode-asfix
      end

strategies

  /**
   * @type (Int, Input) -> Result
   */
  execute-test(|sort, tbl) = 
      ?(i, <id>)
    ; ?t@parse-test(description(n), <id>, expected)
    ; parse-unit-parse(|tbl, sort)
    ; parse-unit-implode
    ; ?result
    ; <create-test-result> (result, expected)
    ; where(
        <echo-report> (i, t, result, <id>)
      )


strategies

  parse-unit-parse(|tbl, sort) =
    ?input@file(f)
    ; if pt := <parse-file-pt(|tbl, sort)> f then
        !ParseResult(FILE(f), Success(pt))
      else
        !ParseResult(FILE(f), Failure(Parse(<get-parse-error>)))
      end

  parse-unit-parse(|tbl, sort) =
    ?input@string(s)
    ; if pt := <parse-string-pt(|tbl, sort)> s then
        !ParseResult(s, Success(pt))
      else
        !ParseResult(s, Failure(Parse(<get-parse-error>)))
      end

  parse-unit-implode =
    if ?ParseResult(input, Success(pt)) then
      if ast := <implode-asfix> pt then
        !ParseResult(input, Success(ast))
       else
         !ParseResult(input, Failure(Implode(pt)))
       end
    end

strategies

  try-open-parse-table =
    (<get-config> ParseTable()
       <+ log(|Critical(), "No parse table specified. Please use the -p option."); <xtc-exit> 1)
    ; stream := <fopen <+ parse-unit-perror> (<id>, "r")
    ; finally(read-from-stream, <fclose> stream)
    ; if not(?"parse-table"#(_)) then
        log(|Critical(), "The specified parse table file does not contain a parse table")
        ; <xtc-exit> 1
      end
    ; open-parse-table
    <+ log(|Critical(), "Could not open parse table")


  parse-unit-perror =
    <conc-strings; perror; fail> ("parse-unit: ", <id>)
