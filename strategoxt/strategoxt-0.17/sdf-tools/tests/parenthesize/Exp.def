definition
module Exp
exports
  context-free start-symbols Exp

  sorts Exp Id
  context-free syntax
    Id           -> Exp {cons("Var")}
    "(" Exp ")"  -> Exp {bracket}

    Exp "instanceof" Id -> Exp {cons("InstanceOf")}

    "++" Exp -> Exp {cons("PreIncr")}
    "--" Exp -> Exp {cons("PreDecr")}
    Exp "++" -> Exp {cons("PostIncr")}
    Exp "--" -> Exp {cons("PostDecr")}

    Exp "*"   Exp -> Exp  {left, cons("Mul")}
    Exp "/"   Exp -> Exp  {left, cons("Div")}
    Exp "+"   Exp -> Exp  {left, cons("Plus")}
    Exp "-"   Exp -> Exp  {non-assoc, cons("Minus")}
    Exp "<"   Exp -> Exp  {left, cons("Lt")}
    Exp ">"   Exp -> Exp  {left, cons("Gt")}
    Exp "=="  Exp -> Exp  {left, cons("Eq")}
    Exp "!="  Exp -> Exp  {left, cons("NotEq")}

    Exp "&&"  Exp -> Exp  {left, cons("And")}
    Exp "||"  Exp -> Exp  {left, cons("Or")}

    Exp "?" Exp ":" Exp -> Exp {right, cons("Cond")}

  context-free priorities
    {right:
      Exp "++" -> Exp
      Exp "--" -> Exp
    }
  > {right:
      "++" Exp -> Exp
      "--" Exp -> Exp
    }
  > {left:
      Exp "*" Exp -> Exp
      Exp "/" Exp -> Exp
    } 
  > {left:
      Exp "+" Exp -> Exp
      Exp "-" Exp -> Exp
    }
  > {left:
      Exp "instanceof" Id -> Exp
      Exp "<"   Exp -> Exp
      Exp ">"   Exp -> Exp
    }
  > {left:
      Exp "=="  Exp -> Exp
      Exp "!="  Exp -> Exp
    }
  >   Exp "&&"  Exp -> Exp
  >   Exp "||"  Exp -> Exp
  >   Exp "?" Exp ":" Exp -> Exp

  lexical syntax
    [a-zA-Z\_] [a-zA-Z0-9\_]* -> Id
    [\ \t\n] -> LAYOUT
  
  lexical restrictions
    Id -/- [a-zA-Z0-9\_]

  context-free restrictions
    LAYOUT? -/- [\ \t\n]
