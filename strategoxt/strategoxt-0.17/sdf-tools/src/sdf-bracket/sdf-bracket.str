/**
 * Utility that inserts brackets in the AST of SDF modules such that:
 *   implode(parse(sdf-bracket(AST))) = AST
 *
 *
 * Currently this is implemented as follows:
 * SDF infix operators  "alt", "pair", and sequence (represented as lists)
 * are put inside a "bracket-symbol" in the context of nested SDF symbols
 * iter, iter-star, opt, alt, and sequence (represented as list).
 *
 * Example:
 * The AST for the symbol (A|B)* is
 *    iter-star(alt(sort("A"),sort("B")))
 * sdf-bracket transforms this AST into
 *    iter-star(bracket-symbol(alt(sort("A"),sort("B"))))
 */
module sdf-bracket
imports libstratego-lib Sdf2 Bracket-Symbol AsFix

strategies

  sdf-bracket-usage =
    default-system-usage(
      !["Usage: sdf-bracket [options]"]
    , ![ "This program generates a disambiguated AST of SDF modules\n"
       , "by inserting bracket symbols for SDF infix operators.\n"
       , "Use this program before pretty-printing ASTs of SDF modules.\n"
       ]
    )

  sdf-bracket-about =
    system-about

  io-sdf-bracket = 
    io-wrap(fail, sdf-bracket-usage, sdf-bracket-about, sdf-bracket)

  sdf-bracket =
      topdown(try(Bracket))
    ; topdown(try(DeBracket))

  infix-op = alt(id, id) + is-list

rules

  Bracket :
    iter(s) -> iter(bracket-symbol(s)) where <infix-op>s

  Bracket :
    iter-star(s) -> iter-star(bracket-symbol(s)) where <infix-op>s

  Bracket :
    opt(s) -> opt(bracket-symbol(s)) where <infix-op>s

  Bracket :
    alt(s1, s2) -> alt(<try(infix-op;!bracket-symbol(s1))>s1, 
                       <try(not(alt(id,id));infix-op;!bracket-symbol(s2))>s2)

  // This rule is for sequences  which are represented as lists.
  Bracket :
     [x|xs] -> xs'
  where
     map( \s -> <try(infix-op;!bracket-symbol(s))>s \ ) => xs'


  // Remove inserted brackets for productions of the form
  //     prod( [lit(f), bracket-symbol(s)], sort, attrs) 
  // because after unparsing it corresponds to an SDF prod-fun (i.e., the
  // definition of a prefix function f(s) ).
  DeBracket :
    prod([lit(f), bracket-symbol(alt(s1,s2))],s,a) -> prod( [lit(f), alt(s1, s2)], s, a)

