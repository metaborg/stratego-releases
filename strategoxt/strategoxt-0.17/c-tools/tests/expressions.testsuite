testsuite C Expressions
topsort AssignExp

test null literal
  "NULL" -> Id("NULL")

test "simple int literal
  "5" -> IntConst("5")

test simple addition"
  "2 + 3" -> Add(IntConst("2"),IntConst("3"))

test always take longest match for --
  "1--2" fails

test simple pre increment
  "++2" -> PreIncr(IntConst("2"))

test addition is left associative
  "1 + 2 + 3" -> Add(Add(_, _), _)

test multiplication has higher priority than addition
  "1 + 2 * 3" -> Add(_, Mul(_, _))

test relational operators have higher priority than equational ones
  "1 < 2 == 3 < 4" -> Equal(Lt(_, _), Lt(_, _))

test simple name
  "x" -> Id("x")

test keyword cannot be identifier
  "case" fails

test keyword cannot be identifier
  "for" fails

test simple comparison 1
  "2 == 3" -> Equal(IntConst("2"),IntConst("3"))

test simple comparison 2
  "0 == PushChoice()" -> Equal(IntConst("0"), FunCall(Id("PushChoice"),[]))

test simple comparison 3
  "PushChoice() == 0" -> Equal(FunCall(Id("PushChoice"),[]),IntConst("0"))

test post increment has higher priority than pre increment
  "++ 1 ++" -> PreIncr(PostIncr(IntConst("1")))

test simple assignment
  "x = 1" -> Assign(Id("x"),AssignEq, IntConst("1"))

test Field access on expression
  "blaat().field" -> Field(FunCall(Id("blaat"),[]),Id("field"))

test Method invocation has higher priority than assignment")
  "x = var.method()" -> 
    Assign(Id("x"),AssignEq, FunCall(Field(Id("var"),Id("method")),[]))

test Simple literal
  ["Literal"] -> StringLit(["\"Literal\""])
