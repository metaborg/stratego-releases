module xml-info2data
imports
  xml-info
  libstratego-lib
  xml-front-options

strategies

  main-xml-info2data =
    io-wrap(explicit-mode-option,
      xml-info2data
    )

strategies

  xml-info2data =
      ?Document(<id>)
    ; rec x(
        xml-info2data-anno-wrap(XmlImplode(x))
      )

  xml-info2data-anno-wrap(s) =
    if ?Element(name, attrs, content) then
      !content
      ; partition(project-anno-element)
      ; ?(anno1*, real-content)
      ; <s> Element(name, attrs, real-content)
      ; ?t{anno2*}
      ; <conc> (<map(s)> [anno1*], [anno2*]) => [anno*]
      ; !t{anno*}
    else
      s
    end

  is-anno-element =
    ?Element(ATermName("anno"), _, _)

  project-anno-element :
    Element(ATermName("anno"), [], [e]) -> e

/**
 * Implicit implode rules
 */
rules

  XmlImplode(x) :
    Element(Name(None(), s), [atts1*], children) -> s#(<map(x)> children){atts2*}
    where
      <map(x)> atts1* => atts2*

  XmlImplode(x) :
    Text(s) -> s

  XmlImplode(x) :
    Attribute(Name(None(), s), value) -> (s, value)

/**
 * Explicit implode rules
 */
rules

  XmlImplode(x) :
    Element(ATermName("int"), _, [Text(s)]) -> <trim-chars('\n' + '\t' + '\r' + ' '); string-to-int> s

  XmlImplode(x) :
    Element(ATermName("string"), _, [Text(s)]) -> s

/**
 * Very explicit implode rules
 */
rules

  XmlImplode(x) :
    Element(ATermName("appl"), [Attribute(ATermName("fun"), name)], content) -> name#(<map(x)> children)
    where
      <filter(not(is-anno-element + ?Text(_)))> content => children

  XmlImplode(x) :
    Element(ATermName("int"), _, content) -> <trim-chars('\n' + '\t' + '\r' + ' '); string-to-int> s
    where
      <fetch(?Element(ATermName("value"), _, [Text(s)]))> content
    
  XmlImplode(x) :
    Element(ATermName("string"), _, content) -> s
    where
      <fetch(?Element(ATermName("value"), _, [Text(s)]))> content 

  XmlImplode(x) :
    Element(ATermName("tuple"), _, content) -> ""#(<map(x)> children)
    where
      <filter(not(is-anno-element + ?Text(_)))> content => children

  XmlImplode(x) :
    Element(ATermName("list"), _, content) -> <map(x)> children
    where
      <filter(not(is-anno-element + ?Text(_)))> content => children

overlays

  ATermName(s) = Name(Some("http://aterm.org"), s)
