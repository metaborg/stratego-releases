/**
 * Transformation from AsFix terms produced y the SDF2 parser to 
 * abstract syntax terms. The transformation removes layout and 
 * literals, collapses lexical terms to strings and replaces 
 * production applications by applications of a derived 
 * constructor name.
 */
module implode-asfix
imports 
  libstratego-sglr 
  libstratego-lib

strategies

  main-implode-asfix = 
    io-wrap(implode-asfix-options, implode-asfix-using-config)

  /**
   * @warning This strategy is also used by sglri.
   */
  implode-asfix-using-config =
    ?term
    ; if <get-config> "--lex"    then asfix-flat-lex end
    ; if <get-config> "--layout" then asfix-remove-layout end
    ; if <get-config> "--nt"     then asfix-appl-to-sort end
    ; if <get-config> "--list"   then asfix-flat-list end
    ; if <get-config> "--lit"    then asfix-remove-lit end
    ; if <get-config> "--appl"   then asfix-replace-appl end
    ; if <get-config> "--inj"    then asfix-flat-injections end
    ; if <get-config> "--alt"    then asfix-flat-alt end
    ; if <get-config> "--seq"    then asfix-remove-seq end
    ; if <get-config> "--pt"     then ?parsetree(<id>, _) end
    ; try(
        ?term
        ; implode-asfix(not(<get-config> ("--concrete")))
      )
    ; if <get-config> "--yield-quotes" then
        yield-asfix-quotes
      end

  /**
   * @warning These options are also used by sglri.
   */
  implode-asfix-options =
    Option( "--lex",    
	where(<set-config>("--lex", <id>)),
	!"--lex            Flatten lexical substrings to strings" )

  + Option( "--layout", 
	where(<set-config>("--layout", <id>)),
	!"--layout         Remove layout nodes from the AsFix? parse tree" )

  + Option( "--lit",    
	where(<set-config>("--lit", <id>)),
	!"--lit            Remove literal nodes from the AsFix? parse tree")

  + Option( "--alt",    
	where(<set-config>("--alt", <id>)),
	!"--alt            Flat alternatives")

  + Option( "--appl",   
	where(<set-config>("--appl", <id>)),
	!"--appl           Replace 'appl' applications by constructor applications" )

  + Option( "--nt",     
	where(<set-config>("--nt", <id>)),
	!"--nt             Replace 'appl' applications by non-terminal application" )

  + Option( "--inj",    
	where(<set-config>("--inj", <id>)),
	!"--inj            Remove injections from the parse tree." )

  + Option( "--list",   
	where(<set-config>("--list", <id>)),
	!"--list           Flatten lists." )

  + Option( "--seq",    
	where(<set-config>("--seq", <id>)),
	!"--seq            Replace sequences by tuples" )

  + Option( "--pt",     
	where(<set-config>("--pt", <id>)),
	!"--pt             Remove the outer 'pt' function symbol from the parse tree" )

  + Option( "--concrete",
	where(<set-config>("--concrete", <id>)),
        !"--concrete   Do not implode quotes (concrete object syntax)")

  + Option( "--yield-quotes",
      where(
	    <set-config>("--yield-quotes", <id>)
	  ; <set-config>("--concrete", <id>)	    
      )
    , !"--yield-quotes  Yield quotes (concrete object syntax) to single applications"
    )
