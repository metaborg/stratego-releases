.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "RTG2TYPEMATCH" "1" "08/26/2005" "" "Programs and Tools"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
rtg2typematch \- generates a set of Stratego strategies for typechecking terms against a regular tree grammar (RTG)
.SH "SYNOPSIS"
.HP 14
\fBrtg2typematch\fR [\-i\ \fIfile\fR\ |\ \-\-input\ \fIfile\fR] [\-o\ \fIfile\fR\ |\ \-\-output\ \fIfile\fR] [\-b] [\-S\ |\ \-\-silent] [\-\-verbose\ \fIlevel\fR] [\-k\ \fIlevel\fR\ |\ \-\-keep\ \fIlevel\fR] [\-h\ |\ \-?\ |\ \-\-help] [\-\-about] [\-\-version]
.SH "DESCRIPTION"
.PP
The
\fBrtg2typematch\fR
utility is used to generate a collection of Stratego strategies with can be used to typecheck terms against a regular tree grammar.
.PP
The regular tree grammar is derived from the syntax definition, so the strategies generated by
\fBrtg2typematch\fR
are useful for checking the well\-formedness of a term against a particular SDF grammar.
.SH "OPTIONS"
.PP
\fBCommon Input/Output Options\fR
.TP
\fB\-i \fR\fB\fIfile\fR\fR
The input term given by the file name
\fI\fIfile\fR\fR.
.sp
In the absence of the
\fB\-i\fR
option, input will be read from
\fIstdin\fR.
.TP
\fB\-o \fR\fB\fIfile\fR\fR
The output will be written to the file given by the file name
\fI\fIfile\fR\fR.
.sp
In the absence of the
\fB\-o\fR
option, output will be written to
\fIstdout\fR.
.TP
\fB\-b\fR
The output will be written in the binary (BAF) ATerm format.
.sp
ATerms in the BAF format require a lot less space than ones in the TAF format, but the Java ATerm library does not currently support baf ATerms. ATerms in the baf format is the preferred format of exchange between Stratego tools.
.PP
\fBCommon Debugging Options\fR
.TP
\fB\-\-about\fR
See
\fB\-\-version\fR.
.TP
\fB\-h\fR, \fB\-?\fR, \fB\-\-help\fR
Display usage information.
.TP
\fB\-\-keep \fR\fB\fIint\fR\fR
Keep intermediate results produced by the internal stages in the pretty\-printing process. This is only useful for debugging. A high value of
\fIint\fR
indicates increased eagerness for keeping intermediate results.
.sp
Default setting is 0, indicating that no intermediates will be kept.
.TP
\fB\-S\fR, \fB\-\-silent\fR
Silent execution. Same as
\fB\-\-verbose \fR\fB\fI0\fR\fR.
.TP
\fB\-\-verbose \fR\fB\fIint\fR\fR
Set verbosity level to numerical value
\fIint\fR. The higher the number, the more information about pp\-aterm's inner workings are printed.
.sp
Alternatively,
\fIint\fR
can be set to either of the following verbosity levels, given in increasing order of verbosity:
\fBemergency\fR,
\fBalert\fR,
\fBcritical\fR,
\fBerror\fR,
\fBwarning\fR,
\fBnotice\fR,
\fBinfo\fR,
\fBdebug\fR,
\fBvomit\fR.
.TP
\fB\-\-version\fR
Displays the tool name and version.
.SH "EXAMPLE"
.PP
Consider the regular tree grammar given below (the exciting part about how we created this from an SDF definition can be gleaned from the example for
sdf2rtg):
.sp
.nf
regular tree grammar
start Exp
productions
  Exp      \-> Minus(Exp,Exp)
  Exp      \-> Plus(Exp,Exp)
  Exp      \-> Mod(Exp,Exp)
  Exp      \-> Div(Exp,Exp)
  Exp      \-> Mul(Exp,Exp)
  Exp      \-> Int(IntConst)
  Exp      \-> Var(Id)
  IntConst \-> <string>
  Id       \-> <string>
.fi
.PP
We run
\fBrtg2typematch\fR
as shown below, to obtain the following Stratego module. Assume the regular tree grammar above is stored in
\fIExp.rtg\fR.
.sp
.nf
$ rtg2typematch \-i Exp.rtg \-o Exp\-typematch.rtg
.fi
.sp
.nf
module Exp\-typematch
strategies
  is\-Exp =
    ?Minus(_, _)
    + ?Plus(_, _)
      + ?Mod(_, _)
        + ?Div(_, _)
          + ?Mul(_, _)
            + ?Int(_)
              + ?Var(_)

  is\-IntConst =
    is\-string

  is\-Id =
    is\-string
.fi
.PP
From inspecting the generated code, we see that
\fBis\-Exp\fR
can be used to check whether a term is of sort
\fBExp\fR. Notice that the generated code only looks at the name of the constructor. If the same constructor can be used to produce different sorts, the typematch strategy of all these sort will accept a term that is an application of this constructor.
.SH "REPORTING BUGS"
.PP
Please report bugs to
<stratego\-bugs@cs.uu.nl>
.SH "COPYRIGHT"
.PP
Copyright (C) 2002\-2005 Eelco Visser
<visser@acm.org>
.PP
This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
