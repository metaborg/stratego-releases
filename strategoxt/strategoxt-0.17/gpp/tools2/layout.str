/**
 * @author Merijn de Jonge (mdejonge@cwi.nl)
 */
module layout
imports pp-table

signature
   constructors
      layout-place-holder : LPH

strategies

insert-layout =
   (id, ?[initial-layout| _]; Tl);
   rec x ({a,a',b,w,b',w',w'': 
      ?(H(a, b), w);
      <InsLayout(x)>(b, w) => (b',w');
      !(H(a, b'), w')
   <+
      ?(HV(a, b), w);
      <InsLayout(x)>(b, w) => (b',w');
      !(HV(a, b'), w')
   <+
      ?(V(a, b), w);
      <InsLayout(x)>(b, w) => (b',w');
      !(V(a, b'), w')
   <+
      ?(A(a, a', b), w);
      <InsLayout(x)>(b, w) => (b',w');
      !(A(a, a', b'), w')
   <+
      ?(R(a, b), w);
      <InsLayout(x)>(b, w) => (b',w');
      !(R(a, b'), w')
   <+
      ?(ALT(a,b), w);
      <InsLayout(x)>(a, w) => (a',w');
      <InsLayout(x)>(b, w) => (b', w'');
      !(ALT(a', b'), w'')
   <+
      ?(LBL(a,b),w);
      <InsLayout(x)>(b, w) => (b', w');
      !(LBL(a,b'), w')
   <+
      ?(REF(a,b),w);
      <InsLayout(x)>(b, w) => (b', w');
      !(REF(a,b'), w')
   <+
      ?(L(a,b),w);
      <InsLayout(x)>(b, w) => (b', w');
      !(L(a,b'), w')
   <+
      ?(LNAT(a,b),w);
      <InsLayout(x)>(b, w) => (b', w');
      !(LNAT(a,b'), w')


   <+
      ([id|id],id);InsLayout(x)
   <+
      id
   }   );

   // Put box in HV box when it is a list of boxes
   (try(is-list; \x -> HV([], x) \ ), id );
   ?(abox, [trailing-layout|xs]);
   
   // Put optional initial + trailing layout in H box
   ![initial-layout, abox, trailing-layout];
   filter(
       not(layout(id))
     <+layout(id);is-pp-conservative-enabled;has-layout;layout2box
     <+layout(id);not(is-pp-conservative-enabled);has-significant-layout;layout2box
   );flat-list;
   (  \ [x] -> x \ 
   <+ \ x -> H([SOpt(HS,"0")], x ) \
   )

InsLayout(s) = 
   rec x ( {a,a',w,b,b',xs, ws, ws', ws'',xs',ws''':
      ([], id)
   <+
      ?([a], ws);<s>(a,ws);?(a',ws');!([a'],ws')
   <+
      ?([a,b|xs], ws); 
      <s>(a,ws) => (a',[w|ws']);
      <x>([b|xs], ws');?([b'|xs'], ws'');
      (
         // In case of conservative pretty-printing we insert original
         // layout (when it exists) in the generated BOX expression. When
         // No layout exists, we use the layout of te generated BOX
         // expressions.
         is-pp-conservative-enabled
         ; <has-layout> w
         ; !([H([SOpt(HS,"0")],[H([],[a']), <layout2box>w, H([],[b'])])|xs']
            , ws''
            )
      <+
         // For non-conservative pretty-printing, we only insert significant
         // layout (i.e., layout other than spaces, tabs, and new lines).
         not(is-pp-conservative-enabled)
         ; <has-significant-layout> w
         ; !([a', <layout2box>w, b'|xs'], ws'')
     <+
         // No existing layout used. Instead, generated layout is used.
         !([a', b'|xs'],ws'')
      )
   } )

  has-layout = 
    not(layout(layout-place-holder))

  has-significant-layout =
    where(
      not(layout(layout-place-holder))
    ; ?layout(<concat-strings>)
    ; explode-string
    ; filter(not(9 + 10 + 13 + 32))
    ; not([])
    )

  layout2box =
    ?layout(x)
    ; if has-significant-layout then
        !C([],[S(<concat-strings> x)])
      else
        !S(<concat-strings> x)
      end
