/**
 * @author  Merijn de Jonge
 *
 * Martin Bravenboer: This module has been cloned to
 * pp-table-io2. Ast-to-abox uses the new module, Asfix-to-abox still
 * uses this old one.
 */
module pp-tables-io
imports pp-table 

strategies
  
  read-pp-tables =
    where(<table-create> "pp-table")
    ; map(
       notify(!"Reading table: ")
       ; ReadFromFile
       ; build-pp-table
      )
  
  /**
   * Add entries to table. Reverse the list of entries to get correct ordering
   * of entries.
   */
  build-pp-table =
     ?PP-Table(Entries);
     <reverse;map(makePPEntry;StoreEntry)>Entries
  
  StoreEntry =
     ?PP-Entry( path, value );
     <table-put>("pp-table", <mk-key>path, (path, value));
     <notify(!"storing: ")>(<path-to-string>path, value)
  
  StoreEntryIfNotExists = 
        ?PP-Entry( path, value );
        (
           where(<table-get>("pp-table", <mk-key>path ))
        <+
           StoreEntry
        )
     
  
  mk-key = ?Path1( s ) ;![s]
         <+
           ?Path( s1, s2 ) ;
            <map( {a, b: \ selector( a, b) -> a \ })>s2 =>  xs;
            ![s1|xs]
  
  path-to-string = 
        ?Path1(s); !s
     <+
        ?Path( s1, s2 );
        <map( \selector(a,b) -> [".", <int-to-string>a,":", b] \ );concat>s2 => s3;
        <concat-strings>[s1 | s3]        
  
  makePPEntry =
    topdown( try(MakePPTerm ) )

  MakePPTerm =
      Arg(string-to-int)
    + Arg2(string-to-int, string-to-int)
    + SOpt(id, id)
    + S(un-double-quote; unescape)
    + selector(string-to-int, id)

  pp-table-get =
     ?key;
     <table-get>("pp-table", key ) => (path, template);
     where ( <path-to-string>path ; notify(!"obtaining: " ))
  
  try-pp-table-get =
     ?key;
     (  pp-table-get 
     <+ log(|Error(),<concat-strings>["No pp entry found for: ",<write-to-string>]); fail
     )
  
  pp-table-put =
     ?(key, value);
     !key;
     where(path-to-string; notify( !"storing: "));
     <table-put>("pp-table", key, value )
