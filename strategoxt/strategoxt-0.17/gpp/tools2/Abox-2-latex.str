/**
 * GT -- Grammar Tools
 *
 * Authors:
 * - Merijn de Jonge <mdejonge@cwi.nl>
 * - Eelco Visser <visser@acm.org>
 * - Joost Visser <jvisser@cwi.nl>
 */
module Abox-2-latex
imports
  libstratego-lib
  libstratego-xtc
  libstratego-gpp
  Box
  Box-util
  Abox-2-latex-lib
  plain-text
  misc

strategies

  io-Abox-2-latex = 
     option-wrap( Abox-2-latex-options + io-options, 
      xtc-io(
         load-latex-table
         ; read-from
         ; (
            where(<get-config>"output"; "alltt" )
            <    // Produced alltt environment
                 try-abox2alltt(|0); Fst
               ; <latex2text>ALLTT(<id>)
            +    // Produce boxenv environment
                 topdown(try(Abox2latex))
               ; <latex2text> BOXENV(<BOXENV-args>, <id>)
           )
         ; <topdown-print-to>([<create-header>(),<id>], "\n")
     ) )

  Abox-2-latex-options =
      Option( 
         "--alltt",
         <set-config>("output", "alltt"),
         !"--alltt          Produce verbatim-like output with alltt environment")
    + Option( 
         "--boxenv",
         <set-config>("output", "boxenv"),
         !"--boxenv         Produce fully formatted LaTeX output (default)")
    + ArgOption(
         "-t" + "--latex-table", 
         <set-config> ("--latex-table", <id>), 
         !"-t|--latex-table f  Use LaTeX abbreviaitions from file f")
    + ArgOption(
         "-w"+ "--width", 
         <set-config> ("--width", <id>), 
         !"-w|--width w        Use page width w")

  load-latex-table = where(
      <table-create> "latex-abbrevs"
    ; try(
      <get-config> "--latex-table"
    ; ReadFromFile
    ; map( \ [s1, s2] -> <table-put> ("latex-abbrevs", s1, s2) \ )
    ))

//  abox2latex = (id, load-latex-table
//                    ; topdown(try(Abox2latex))
//                    ; <latex2text> BOXENV(<BOXENV-args>, <id>);
//                      collect-set(is-string); concat-strings)

  try-abox2alltt(|xpos) =
    where(<get-config> "--width" => width);

    let local(|pos) =
             abox2alltt(local | pos) 
          <+ abox2text(local | pos, width)
          <+ log(|Error(),"invalid box:", <id>)
             ; <exit>1
     in local(|xpos)
    end

  BOXENV-args =
    <get-config> "--width"; ![<id>] <+ ![]

  Abox2latex :
    S(s) -> <latex-string>s

  Abox2latex :
    C( [], s ) -> CBOX( s' )
      where <map( \ S(x) -> <make-latex-comment>x \ )>s => s'

  Abox2latex:
    FBOX(fo, b) -> BOXFONT(fo, b)
      where <KW() + VAR() + NUM() + MATH()> fo

  Abox2latex:
    FBOX(F([]), b) -> b

  Abox2latex:
    FBOX(F([foption|xs]), b) -> BOXFONT(fo, FBOX(F(xs), b))
    where <   FFID(FM(), ?fo)
           <+ FFID(SE(), ?fo)
           <+ FFID(SH(), ?fo)
           <+ FFID(SZ(), ?fo)
           <+ FFID(CL(), ?i ); !BOXCOLOR(i) => fo
          > foption

  Abox2latex:
    H(so, b ) -> HBOX(hs, b' )
      where <Hspace>so => hs
          ; <toh> b => b'

Abox2latex:
   V(so, b ) -> VBOX( vs,  is, b' )
   where
      <Vspace>so => vs;
      <Ispace>so => is;
      <filter(not([]));separate-by(!"\n\n")>b => b'

Abox2latex:
   HV(so, b ) -> HVBOX( hs, vs, is, b' )
   where
      <Hspace>so => hs;
      <Vspace>so => vs;
      <Ispace>so => is;
      <filter(not([]));separate-by(!"\\ ")>b => b'

Abox2latex:
   A(aos, so, b ) -> ABOX( tdef, bs' )
   where
      <construct-rows>b => bs;
      <Vspace;string-to-int>so        => vs;
      <conc>(<copy>(vs, EOR ),[EOR, "\n"])  => row-end;
      <table-def>aos    => tdef;
      <map(MkRows); separate-by(!row-end)>bs => bs'

Abox2latex:
   ALT( b1, b2 ) -> ALTBOX( b1, b2 )

Abox2latex:
   L( f, b ) -> LBOX( f', b )
   where
      (  // Sequence of exactly f copies of b
         <string-to-int>f => f'
      <+
         // Horizontal line (because b1 equals '=' character)
         <explode-string>f;
         [61|id]; ![61]; 
         implode-string => f'
      <+
         // Sequence of copies of ordinary string b
         !f => f'
      )

Abox2latex:
   LBL( s, b ) -> LBLBOX( s, b)

Abox2latex:
   REF( s, b ) -> REFBOX( s, b )
   
// This is a simplified implementation. The originalused a space as
// separator between horzontal boxes whenever the rightmost or left most box
// contains comments. 
  toh =
    filter(not([]));separate-by( !"~" )

  Hspace = hs-length; int-to-string
  Vspace = vs-length; int-to-string
  Ispace = is-length; int-to-string

table-def =
   ?AOPTIONS( aos ); !aos;
   map(  \ AL(so) -> [L,<copy>(<Hspace;string-to-int>so, "~")] \
        +
         \ AC(so) -> [C,<copy>(<Hspace;string-to-int>so, "~")] \
        +
         \ AR(so) -> [R,<copy>(<Hspace;string-to-int>so, "~")] \
      );
      separate-by(![CSEP]);concat;at-last(![EOR])

table-row =
   ?R(_,bs );!bs;
   rec x ({e1, e2, xs:
      []
   <+ [id]
   <+ [C(id,id),id|x]
   <+ [id,C(id,id)|x]
   <+ ?[e1,e2|xs];![e1,CSEP|<x>[e2|xs]]
   })
   
MkRows =
   (
      ?LBL(s, b );
      <table-row>b;
      !LBLBOX(s, <table-row>b)
   <+
      table-row
   )

make-latex-comment =
   explode-string;
   reverse;
   split(id,![]);
   rec x ({xs,ys,a:
      ?([],ys);![<LatexComment>ys]
      <+
      ?([10|xs], ys);
      ![<LatexComment>ys| <x>(xs, [])]
      <+
      ?([a|xs],ys);
      <x>(xs, [a|ys])
   }   );
   remove-trailing(?"");
   reverse;
   remove-trailing(?"");
   map( \x -> [x,"\n"] \ )

// Remove trailing layout (tabs and spaces) and comment characters (%%)
LatexComment = 
   remove-trailing(9+32);
   try(at-suffix([37,37|?xs];!xs));
   implode-string

// Stuff for generating LaTeX alltt environment
  abox2alltt(rec : t * t -> t | xpos):
    (FBOX(fo, b), xpos) -> (BOXFONT(fo, b'), xpos')
      where 
         <KW() + VAR() + NUM() + MATH()> fo
         ; <rec(|xpos)> b => (b',xpos')

  abox2alltt(rec : t * t -> t | xpos):
    (FBOX(F([]), b), xpos) -> <rec(|xpos)> b

  abox2alltt(rec : t * t -> t | xpos):
    FBOX(F([foption|xs]), b) -> (BOXFONT(fo, b'), xpos')
    where 
     <   FFID(FM(), ?fo)
           <+ FFID(SE(), ?fo)
           <+ FFID(SH(), ?fo)
           <+ FFID(SZ(), ?fo)
           <+ FFID(CL(), ?i ); !BOXCOLOR(i) => fo
          > foption;
          <rec(|xpos)> FBOX(F(xs), b) => (b', xpos')
          
  // S
  abox2alltt(rec : t * t -> t | xpos) :
     S(s) -> (<alltt-string> s, <add> (xpos, <rel-string-length(|xpos)> s))

  alltt-string =
        latex-abbrev
     <+ string-as-chars(escape-special-characters)

  create-header =
    !["% \n",
      "% This file is generated automatically by \n",
      "% \n",
      "%    abox2latex (C) 2001-2004 Merijn de Jonge (mdejonge@cs.uu.nl) \n",
      "% \n",
      "% Tokens from the BOX term are formatted using the LaTeX macros  \n",
      "% defined in the table(s):  \n",
      <tables2text>(),
      "% \n",
      "% To use this file add: \n",
      "%    \\usepackage{boxenv} to your documents preamble \n",
      "% and  \n",
      "%    \\input{<this_file>}  \n",
      "% to your LaTeX document. \n",
      "% \n",
      "% If you don't have boxenv.sty already, generate it with:: \n",
      "%    gen-latex-boxstyle -o boxenv.sty \n",
      "% \n"
    ]; concat-strings

// Create list of abbreviation tables
tables2text =
      (<get-config> "--latex-tables" <+ ![]);
      map( !["%   ", <id>, "\n"]; concat-strings );
      concat-strings
