/**
 * @author Merijn de Jonge (mdjonge@cwi.nl)
 */
module pp-tables-io2
imports pp-table

strategies
  
  /**
   * @type List(String) -> ...
   */
  read-pp-tables =
    where(<table-create> "pp-table")
    ; map(
        notify(!"Reading table: ")
        ; ReadFromFile
        // todo: remove this line (baseline issue)
        ; (?PP-Table(_) <+ ?version#([<?PP-Table(_)>]))
        ; build-pp-table
      )

  /**
   * Add entries to table. Reverse the list of entries to get correct
   * ordering of entries.
   */
  build-pp-table =
     ?PP-Table(<id>)
     ; reverse
     ; map(makePPEntry; StoreEntry)
  
  StoreEntry =
     ?PP-Entry(path, value)
     ; <table-put> ("pp-table", <mk-key-arity>, (path, value))
     ; <notify(!"storing: ")> (<path-to-string> path, value)
  
  StoreEntryIfNotExists = 
    ?PP-Entry( path, value )
    ; ( where(<table-get> ("pp-table", <mk-key-arity>))
     <+ StoreEntry
      )

/**
 * Pretty-printing of paths
 */
strategies

  /**
   * @type Path -> String
   */
  path-to-string = 
    ?Path1(<id>)

  /**
   * @type Path -> String
   */
  path-to-string =
    ?Path( s1, s2 )
    ; < map( \ selector(a,b) -> [".", <int-to-string>a,":", b] \ )
      ; concat
      > s2 => s3
    ; <concat-strings> [s1 | s3]

/**
 * Key of a pp entry.
 */
strategies

  /**
   * @type PP-Entry -> Key
   */
  mk-key-arity :
    PP-Entry(Path1(s), value) -> (arity, [s])
    where
      <arity-of-template> value => arity

  mk-key-arity :
    PP-Entry(Path(s1, s2), value) -> <reverse> [s1 | xs]
    where
      <map(?selector(<id>, _))> s2 =>  xs

  /**
   * Determines the arity of a template by collecting the Arg nodes.
   *
   * @type BOX -> Int
   */
  arity-of-template =
    collect(Arg(id)); length

/**
 * Desguaring of pp entries
 */
strategies
  
  makePPEntry =
    topdown( try(MakePPTerm ) )

  MakePPTerm =
      Arg(string-to-int)
    + Arg2(string-to-int, string-to-int)
    + SOpt(id, id)
    + S(un-double-quote; unescape)
    + selector(string-to-int, id)

/**
 * Access to the pp table
 */
strategies

  pp-table-get =
     ?key
     ; <table-get> ("pp-table", key )
     /* ; where(
         <path-to-string> path
         ; notify(!"obtaining: " )
       ) */
  
  try-pp-table-get =
    pp-table-get 
    <+ log(|Error(),<concat-strings>["No pp entry found for: ",<write-to-string>]); fail

  try-pp-table-get(|tbl) =
    ?key
    ; ( <hashtable-get(|key)> tbl
        <+ log(|Error(),<concat-strings>["No pp entry found for: ",<write-to-string> key])
           ; fail)
  
  pp-table-put =
     ?(key, value)
     ; !key
     ; where(path-to-string; notify( !"storing: "))
     ; <table-put> ("pp-table", key, value)
