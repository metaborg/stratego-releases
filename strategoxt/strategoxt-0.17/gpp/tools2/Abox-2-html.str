/*
% GT -- Grammar Tools
% Copyright (C) 2000 Merijn de Jonge <mdejonge@cwi.nl>
%                    Eelco Visser <visser@acm.org>
%                    Joost Visser <jvisser@cwi.nl>
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2, or (at your option)
% any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
% 02111-1307, USA.

% $Id: Abox-2-html.str,v 1.1 2003/01/03 07:23:39 stratego Exp $

% Author: Merijn de Jonge (mdjonge@cwi.nl)

*/
module Abox-2-html
imports 
  libstratego-lib
  libstratego-xtc
  Abox-2-html-lib
  Box
  Box-util
  plain-text

strategies

  io-Abox-2-html =
    xtc-io-wrap(
        read-from
      ; abox2html
      ; topdown-print-to
    )
    
  abox2html = 
      normalize
    ; topdown( try(Abox2html) )
    ; !TABLE( [], [TR([],[TD([], <id>)])])
    ; html2text
   
rules
  // Box strings
  Abox2html :
    S(s) -> <html-string> s

  // Box comments
  Abox2html :
    C([], bs) -> TDTR( TR([], [TD(["colspan=\"100\" class=\"comment\""], [bs2])]))
      where <map(\ S(x) -> <make-html-comment> x \)> bs => bs2

  // Box fonts
  // Box dynamic fonts are translated to special HTML classes.  
  // Static Box font are discarded in the HTML transformation.
  Abox2html :
    FBOX(fo, b) -> s
      where <  KW();   !SPAN(["class=\"keyword\""],  [b] )
            <+ VAR();  !SPAN(["class=\"variable\""], [b] )
            <+ NUM();  !SPAN(["class=\"number\""],   [b] )
            <+ MATH(); !SPAN(["class=\"math\""],     [b] )
            <+ !b
            > fo => s

  //  Box H operator
  Abox2html:
    H(so, b ) -> s
      where <Hspace> so => hs
          ; <filter(not([]));sep-by(!hs)>b => s

// Box V operator
Abox2html:
   V(so, b ) -> [TDTD(), TABLE([],s)]
   where
      <Vspace>so => vs;
      <Ispace>so => is;
      <filter(not([]))>b;
      [tov(!"")|map(tov(!is))];
      separate-by(!vs) => s

// Box HV operator
Abox2html:
   HV(so, b ) -> s
   where
      <Hspace>so => hs;
      (
         ?[];<filter(not([]))>b
      <+
         at-last(![" "]) => sep;
         ![TDTD(), <filter(not([])); separate-by(!sep)> b]
      ) => s

// Box A operator
Abox2html:
   A(aos, so, b ) -> TD'(TD([], [TABLE([],[s])]))
   where
      <construct-rows>b => bs;
      <Vspace>so => vs;
      <map( toa( !aos )  )>bs;
      separate-by( !vs ) => s

// Box ALT operator
Abox2html:
   ALT( b1, b2 ) -> b1

// Box L operator
Abox2html:
   L( b1, b2 ) -> HR

// Box L operator
Abox2html:
   LNAT( i, b ) -> HR

// Box LBL operator
Abox2html:
   LBL( url, text ) -> [ANCHOR( url ), text]

// Box REF operator
Abox2html:
   REF( url, text ) -> HREF( url, text )
   
toa(aoptions) : 
   R( [], bs ) -> TR(["valign=\"top\""], [s])
   where
   <aoptions>() => AOPTIONS( aos );
   !(bs, aos);
   rec x ({a,b,a',as,ao,aos':
      ?([], _ ); ![]
   <+
      ?([C(a,b)|as],aos');
      ![TD([],[C(a,b)])|<x>(as, aos')]

   <+
      ?([a,a'|as],[ao|aos']);
      ![TD([<aopt>ao],a), <make-hs>ao|<x>([a'|as], aos')] 
   <+
      ?([a|as],[ao|aos']);
      ![TD([<aopt>ao],a)|<x>(as, aos')]
}   ) => s

strategies

  aopt =
      ?AL(_) ; !"align=\"left\""
    + ?AR(_) ; !"align=\"right\""
    + ?AC(_) ; !"align=\"center\""

  make-hs =
    SOpts-of-alignment
   ; Hspace
   ; (?[] <+ !TD([], <id>))

  tov(is) =
   (
   L(id,id)
   <+
   LNAT(id,id)
   <+
   ?b;
   !TABLE([],[TR(["valign=\"top\""],[<is>(), TD([],[b])])])
   ) => s;
   !TR(["valign=\"top\""],[TD([],[s])])

  Hspace =
    hs-length; (?0; ![] <+ <copy> (<id>, NBSP()))
   
  Vspace =
    vs-length; (?0; !"" <+ !TR([],[TD([],<copy> (<id> , BR()))]))

  Ispace =
    is-length; (?0; !"" <+ !TD([], <copy>(<id>, NBSP())))

  sep-by(s) =
      map( \ x -> [x] \ )
    ; separate-by(s)
    ; concat

  normalize =
   topdown( try(     \ H(_,[b]) -> b \ 
                   + \ V(_,[b]) -> b \ 
                   + Distribute ) )

Flat-list = 
   is-list;
   map( \[x] -> x \ ); filter( not([]))
   
// The next strategy rewrites terms like H[a V[b c] d] to H[a V[b H[c d]]]
Distribute =
   ?H( so, xs );
   <split-fetch( ?V( so', [a|as] ) )>xs;
   ?(l1, l2);
   <not(?[])>l2;
   <at-last( [?b]; ![H( so, [b | l2] )] )>[a|as] => l1';
   !H( so, <conc>(l1, [V(so', l1')]) )


// This strategy removes initial; and trailing new lines, and append a break
// (BR) to each remaining line of comment
make-html-comment =
  explode-string;
   reverse;
   split(id,![]);
   rec x ({xs,ys,a:
      ?([],ys);![<remove-trailing(9+32);implode-string>ys]
      <+
      ?([10|xs], ys);
      ![<remove-trailing(9+32);implode-string>ys| <x>(xs, [])]
      <+
      ?([a|xs],ys);
      <x>(xs, [a|ys])
   }   );
   remove-trailing(?"");
   reverse;
   remove-trailing(?"");
   map( \x -> [x,BR] \ )

