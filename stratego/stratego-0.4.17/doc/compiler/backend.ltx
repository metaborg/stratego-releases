
% Copyright (C) 1998, 1999 Eelco Visser <visser@acm.org>
% 
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2, or (at your option)
% any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
% 02111-1307, USA.

{\cd{../../spec/back}

\chapter{Backend}

\section{Abstract Machine}

	In this section we define the abstract machine instructions
	and a simplifier and peephole optimizer for abstract machine
	programs.

	\input{instructions.r}
	\input{ins-simplification.r}

\section{Compilation}

	In this section we define the translation from strategies to
	abstract machine instructions.

	(*** Consider transformation to an A-Normal-form like format. ***)

	\input{backend.r}
	\input{compiler.r}
	\input{specialized.r}

\section{Postproccesing}

	The postprocessing phase of the compiler takes an abstract
	machine program and derives initialization information from
	it. Currently it only deals with the initialization of rule
	counters by looking at the use of \verb|CountRule|
	instructions.

	\input{../post/postprocess.r}
}