Specification([

Signature([]),

Rules(RDef("MkCons",[],Rule(Op("TCons",[Var("x"),Op("TCons",[Op("Nil",[]),Op("TNil",[])])]),Op("Cons",[Var("x"),Op("Nil",[])]),Id)),RDef("MkCons",[],Rule(Op("TCons",[Var("x"),Op("TCons",[Op("Cons",[Var("y"),Var("z")]),Op("TNil",[])])]),Op("Cons",[Var("x"),Op("Cons",[Var("y"),Var("z")])]),Id)),RDef("MkSingleton",[],Rule(Var("x"),Op("Cons",[Var("x"),Op("Nil",[])]),Id)),RDef("RevInit",[],Rule(Var("xs"),Op("TCons",[Var("xs"),Op("TCons",[Op("Nil",[]),Op("TNil",[])])]),Id))),

Strategies([

SDef("int-to-string",[],Seq(Rec("x",Seq(Call(SVar("split"),[Seq(Call(SVar("sect"),[Call(SVar("mod"),[]),Build(Int(10))]),Call(SVar("sect"),[Call(SVar("add"),[]),Build(Int(48))])),Seq(Call(SVar("sect"),[Call(SVar("div"),[]),Build(Int(10))]),Call(SVar("int"),[]))]),Seq(Call(SVar("TCons"),[Id,Call(SVar("TCons"),[LChoice(Seq(AM(Id,Int(0)),Build(Op("Nil",[]))),Call(SVar("x"),[])),Call(SVar("TNil"),[])])]),Call(SVar("MkCons"),[])))),Seq(Call(SVar("reverse"),[]),Call(SVar("implode-string"),[])))),

SDef("main", [], Call(SVar("int-to-string"),[]))

])

])