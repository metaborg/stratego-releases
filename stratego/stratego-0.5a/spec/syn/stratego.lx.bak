%{         

#include <aterm2.h>
#include "stratego.h"
#include "stratego.grm.tab.h"
#include "options.h"

static void eat_comment();
static void eat_c_comment();
static ATerm mkstring();
void yyerror(char *msg);

FILE *outfile;

#define lexerror(x, y) fprintf(stderr, "%s %s\n", x, y)

#define YY_DECL  int yylex(YYSTYPE *lvalp)

extern char file_name[256];

/*
lcid		{lcstart}{idchars}*
ucid		{ucstart}{idchars}*
lcid		{idchars}+
ucid		{idchars}+
*/

%}

lcstart		[a-z`]
ucstart		[A-Z_]
idchars		{lcstart}|{ucstart}|[0-9'.\-]
lcid		{lcstart}{idchars}*
ucid		{ucstart}{idchars}*
primeid		[']{lcid}|{ucid}
ID		{lcid}|{ucid}
ws		[\t\ ]*
num		[0-9]+
real		[\-]?[0-9]+[.][0-9]+
shortcom	"//"[^\n]*[\n]
backslash	\x5C
literate	{backslash}"literate"
endcode		{backslash}"end\{code\}"
begincode	{backslash}"begin\{code\}"
endliterate	{backslash}"endliterate"

%x COMM MODNAME IMP LIT STARTLIT

%option yylineno
%option noyywrap
 
%%

		/* Literate programs */ 

<INITIAL>{literate}	BEGIN LIT;
<INITIAL>{endcode}	BEGIN LIT;
<LIT>{begincode}	BEGIN INITIAL;
<LIT>{endliterate}	BEGIN INITIAL;
<LIT>\n			; /* ignore newlines */
<LIT>.			; /* ignore text */

		/* Layout */

<INITIAL>{ws}		; /* ignore whitespace */
<INITIAL>{shortcom} 	; /* ignore comments */
<INITIAL>\n		; /* ignore newlines */

		/* Comments (SML style) */

<INITIAL>"(*"   eat_comment();
<INITIAL>"/*"   eat_c_comment();

		/* Module header */

<INITIAL>"module"	BEGIN MODNAME; return MODULE;
<INITIAL>"*"		return ASTERISK;
<INITIAL>"="		return EQ;

		/* Imports */

<INITIAL,MODNAME>"imports" 	BEGIN MODNAME; return IMPORTS;

<INITIAL,MODNAME>"strategies" 	BEGIN INITIAL; return STRATEGIES;
<INITIAL,MODNAME>"rules"      	BEGIN INITIAL; return RULES;
<INITIAL,MODNAME>"signature" 	BEGIN INITIAL; return SIGNATURE;
<INITIAL,MODNAME>"overlays" 	BEGIN INITIAL; return OVERLAYS;

<MODNAME>"(*"			eat_comment();
<MODNAME>"/*"			eat_c_comment();

<MODNAME>{endcode}		BEGIN LIT;

<MODNAME>{lcid} 		(*lvalp).term = ATmakeString(yytext); return LCID;
<MODNAME>{ucid} 		(*lvalp).term = ATmakeString(yytext); return UCID;

<MODNAME>[ \t\n]		; /* ignore whitespace */

 		/* keywords */


<INITIAL>"rec"		return MU;
<INITIAL>"fail"		return FAIL;
<INITIAL>"id"		return SUCC;

<INITIAL>"some"		return SOMETOK;
<INITIAL>"one"		return ONE;
<INITIAL>"thread"	return THREAD;
<INITIAL>"all"		return ALL;
<INITIAL>"not"		return NOT;
<INITIAL>"let"		return LET;
<INITIAL>"in"		return IN;

<INITIAL>"?" 	   	return MATCHe;
<INITIAL>"!" 		return BUILDe;

<INITIAL>"@" 		return AS;

<INITIAL>"where" 	return WHERE;
<INITIAL>"test" 	return TEST;
<INITIAL>"sorts" 	return SORTS;

<INITIAL>"constructors" return CONSTRUCTORS;
<INITIAL>"prim" 	return PRIM;


		/* Operators */

<INITIAL>"\\"    	return BACKSLASH;
<INITIAL>"."    	return DOT;
<INITIAL>":-"		return BACKARROW;
<INITIAL>":="		return ASSIGN;
<INITIAL>"+"		return PLUS;
<INITIAL>"<+"		return LTPLUS;
<INITIAL>"_"		return UNDERSCORE;
<INITIAL>"**"		return STARSTAR;
<INITIAL>"*"		return ASTERISK;
<INITIAL>"="		return EQ;
<INITIAL>","		return COMMA;
<INITIAL>";"		return SEMICOLON;
<INITIAL>":"		return COLON;
<INITIAL>"::"		return DOUBLECOLON;
<INITIAL>"("		return LPAREN;
<INITIAL>")"		return RPAREN;
<INITIAL>"{"		return LCURLY;
<INITIAL>"}"		return RCURLY;
<INITIAL>"["		return LBRACK;
<INITIAL>"]"		return RBRACK;
<INITIAL>"<"		return LT;
<INITIAL>">"		return GT;
<INITIAL>"<<"		return LL;
<INITIAL>">>"		return GG;
<INITIAL>"-->"		return LONGARROW;
<INITIAL>"->"		return ARROW;
<INITIAL>"=>"		return DOUBLEARROW;
<INITIAL>"<="		return LEFTDOUBLEARROW;
<INITIAL>"|"		return BAR;
<INITIAL>"#" 	   	return EXPLODE;
<INITIAL>"^" 	   	return MODIFIER;

		/* Identifiers, strings and numbers */

<INITIAL>{lcid} 	(*lvalp).term = ATmakeString(yytext); return LCID;
<INITIAL>{ucid} 	(*lvalp).term = ATmakeString(yytext); return UCID;
<INITIAL>{primeid} 	(*lvalp).term = ATmakeString(yytext+1); return UCID;
<INITIAL>"\""           (*lvalp).term = mkstring(); return STRINGTOK;
<INITIAL>{num}		(*lvalp).num  = atoi(yytext); return INT;
<INITIAL>{real}		(*lvalp).real = atof(yytext); return REAL;

		/* All other characters are wrong */

<INITIAL>.		lexerror ("ignoring illegal character", yytext);

<<EOF>>		{BEGIN(INITIAL); yyterminate();}

%%

/*
 * Function which skips comment chars. The function allows '*' to
 * occure within comments.
 */

static void eat_comment()
{
   char c;
   
   while( 1 )
   {
      /* get a character */
      c = input();
      
      /* if it equals '*" and the next character equals ')' then
       * the end of the comment is reached.
       */
      if( c == '*' )
      {
         c = input();
         if( c == ')' )
            return;
      }
   }
}


static void eat_c_comment()
{
   char c;
   
   while( 1 )
   {
      /* get a character */
      c = input();
      
      /* if it equals '*" and the next character equals '/' then
       * the end of the comment is reached.
       */
      if( c == '*' )
      {
         c = input();
         if( c == '/' )
            return;
      }
   }
}

static char* resize_buf( char* buf, int size)
{
   buf = (char*)realloc( buf, size );
   assert( buf != NULL );
   return buf;
}

#define CHECK(buf, size, ind ) \
	if( ind == size ){ size *= 2; buf = resize_buf( buf, size );}

/*
 * This functions parses a quoted string and accepts
 * escaped quotes (e.g., "hello \"world\"") within strings.
 */
static ATerm mkstring()
{
   ATerm theString;
   char* buf = NULL;
   int c;
   int size = 512;
   int ind  = 0;
   
   /* use dynamically resizable buffer to store string */
   buf = resize_buf( buf, size );

   /* add opening quote */
   CHECK( buf, size, ind );
   buf[ind++] = '"';

   while( 1 )
   {
      c = input();

      if( c == '\"' )
         break;

      if( c <= 0 )
      {
         yyerror( "String not terminated at eof" );
         return NULL;
      }
      
      /* Handle escaped character */
      if( c == '\\' )
      {
         CHECK( buf, size, ind );
         buf[ind++] = c;
         c = input();
      }

      CHECK( buf, size, ind );
      buf[ind++] = c;
   }
   /* Add closing quote */
   CHECK( buf, size, ind );
   buf[ind++] = '"';

   /* terminate string */
   buf[ind] = '\0';

   /* convert to aterm */
   theString = ATparse( buf );

   /* free buffer */
   free( buf );
   
   /* return quotes string */
   return theString;
}
/* flex user code */
